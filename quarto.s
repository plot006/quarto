;
; File generated by cc65 v 2.19 - Git fcda94f
;
	.fopt		compiler,"cc65 v 2.19 - Git fcda94f"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "quarto.c", 59435, 1631960823
	.dbg		file, "lib/neslib.h", 8684, 1631688193
	.dbg		file, "resource/test2_blank.h", 156, 1631791396
	.dbg		file, "resource/open_name.h", 1681, 1631791333
	.dbg		file, "resource/qr.h", 583, 1631936245
	.dbg		file, "resource/menu.h", 276, 1631791192
	.dbg		file, "resource/jeesus.h", 597, 1631936355
	.dbg		file, "cc65/include/stdlib.h", 6147, 1631688192
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "oam_hide_rest", "00", extern, "_oam_hide_rest"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "rand8", "00", extern, "_rand8"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_fill", "00", extern, "_vram_fill"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.dbg		sym, "itoa", "00", extern, "_itoa"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memfill
	.import		_delay
	.export		_test2_blank
	.export		_open_name
	.export		_qr
	.export		_menu
	.export		_jeesus
	.import		_itoa
	.export		_reset
	.export		_attr_pos
	.export		_stage_anime_index
	.export		_msgBlank
	.export		_stage_pos
	.export		_open_palette1
	.export		_open_palette2
	.export		_open_palette3
	.export		_open_palette4
	.export		_palette1
	.export		_palette2
	.export		_palette3
	.export		_palette4
	.export		_bg_palettes
	.export		_palette5
	.export		_palette6
	.export		_palette7
	.export		_palette8
	.export		_bg_palettes2
	.export		_palette_jeesus
	.export		_meta_quarto
	.export		_meta_p1win
	.export		_meta_p2win
	.export		_meta_right_cursor
	.export		_meta_pos1
	.export		_meta_pos2
	.export		_meta_pos1_reverse
	.export		_cursor
	.export		_cursor2
	.export		_koma_1
	.export		_koma_2
	.export		_koma_3
	.export		_koma_4
	.export		_koma_5
	.export		_koma_6
	.export		_koma_7
	.export		_koma_8
	.export		_koma_1_P2
	.export		_koma_2_P2
	.export		_koma_3_P2
	.export		_koma_4_P2
	.export		_koma_5_P2
	.export		_koma_6_P2
	.export		_koma_7_P2
	.export		_koma_8_P2
	.export		_OFF_koma_1
	.export		_OFF_koma_2
	.export		_OFF_koma_3
	.export		_OFF_koma_4
	.export		_OFF_koma_5
	.export		_OFF_koma_6
	.export		_OFF_koma_7
	.export		_OFF_koma_8
	.export		_koma_type
	.export		_koma_list
	.export		_seedRandBox
	.export		_put_update_debug
	.export		_update_init
	.export		_upProc
	.export		_setStageAdr
	.export		_up_stage
	.export		_cycleColor
	.export		_cycleSprColor
	.export		_checkForceBreak
	.export		_bgFlash
	.export		_bgDown
	.export		_bgUp
	.export		_move_next
	.export		_getStagePos
	.export		_getAttrPos
	.export		_putStageKomaColor
	.export		_putKomaColor
	.export		_checkPutPos
	.export		_putStockKoma
	.export		_printBar
	.export		_initBar
	.export		_autoPrintBar
	.export		_putKoma
	.export		_printCursor
	.export		_checkLineQuarto
	.export		_initQuartoFlg
	.export		_bitCalc
	.export		_checkQuarto
	.export		_moveKoma
	.export		_printTimerInit
	.export		_printTimer
	.export		_animeKomaTurnOff
	.export		_animeKomaTurn
	.export		_initMsg
	.export		_printMsg
	.export		_initLife
	.export		_printLife
	.export		_loseAnime
	.export		_procSayQuarto
	.export		_timerSet
	.export		_eventChooseButtonA
	.export		_procChooseKoma
	.export		_preQuartoCheck
	.export		_checkReach
	.export		_eventMoveButtonA
	.export		_autoSetXY
	.export		_procMoveKoma
	.export		_procCheckQuarto
	.export		_initVal
	.export		_main

.segment	"DATA"

_anime:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.res	12,$00
_bg_palettes:
	.addr	_palette1
	.addr	_palette2
	.addr	_palette3
	.addr	_palette4
_bg_palettes2:
	.addr	_palette5
	.addr	_palette6
	.addr	_palette7
	.addr	_palette8
_koma_list:
	.addr	_koma_1
	.addr	_koma_2
	.addr	_koma_3
	.addr	_koma_4
	.addr	_koma_5
	.addr	_koma_6
	.addr	_koma_7
	.addr	_koma_8
	.addr	_koma_1_P2
	.addr	_koma_2_P2
	.addr	_koma_3_P2
	.addr	_koma_4_P2
	.addr	_koma_5_P2
	.addr	_koma_6_P2
	.addr	_koma_7_P2
	.addr	_koma_8_P2
	.res	16,$00

.segment	"RODATA"

_test2_blank:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$C2
	.byte	$55
	.byte	$01
	.byte	$37
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_open_name:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$40
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$A5
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$15
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$F7
	.byte	$55
	.byte	$AA
	.byte	$EE
	.byte	$33
	.byte	$44
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$55
	.byte	$5A
	.byte	$5E
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$45
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$FF
	.byte	$70
	.byte	$54
	.byte	$55
	.byte	$01
	.byte	$05
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$01
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_qr:
	.byte	$01
	.byte	$FF
	.byte	$01
	.byte	$82
	.byte	$00
	.byte	$01
	.byte	$C8
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$28
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$2E
	.byte	$2F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$8C
	.byte	$55
	.byte	$01
	.byte	$37
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_menu:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$11
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$2C
	.byte	$21
	.byte	$39
	.byte	$00
	.byte	$01
	.byte	$38
	.byte	$36
	.byte	$33
	.byte	$00
	.byte	$30
	.byte	$2C
	.byte	$21
	.byte	$39
	.byte	$00
	.byte	$01
	.byte	$D8
	.byte	$34
	.byte	$29
	.byte	$2D
	.byte	$25
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$55
	.byte	$01
	.byte	$37
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_jeesus:
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$FE
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$25
	.byte	$26
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$34
	.byte	$35
	.byte	$36
	.byte	$37
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$E8
	.byte	$E9
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EA
	.byte	$EC
	.byte	$00
	.byte	$08
	.byte	$FE
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$55
	.byte	$08
	.byte	$37
	.byte	$05
	.byte	$08
	.byte	$06
	.byte	$05
	.byte	$08
	.byte	$00
_attr_pos:
	.byte	$CB
	.byte	$CC
	.byte	$D3
	.byte	$D4
	.byte	$D2
	.byte	$D3
	.byte	$D2
	.byte	$D3
	.byte	$D1
	.byte	$D2
	.byte	$D9
	.byte	$DA
	.byte	$D8
	.byte	$D9
	.byte	$D8
	.byte	$D9
	.byte	$D4
	.byte	$D5
	.byte	$D4
	.byte	$D5
	.byte	$D3
	.byte	$D4
	.byte	$DB
	.byte	$DC
	.byte	$DA
	.byte	$DB
	.byte	$DA
	.byte	$DB
	.byte	$D9
	.byte	$DA
	.byte	$E1
	.byte	$E2
	.byte	$D5
	.byte	$D6
	.byte	$DD
	.byte	$DE
	.byte	$DC
	.byte	$DD
	.byte	$DC
	.byte	$DD
	.byte	$DB
	.byte	$DC
	.byte	$E3
	.byte	$E4
	.byte	$E2
	.byte	$E3
	.byte	$E2
	.byte	$E3
	.byte	$DE
	.byte	$DF
	.byte	$DE
	.byte	$DF
	.byte	$DD
	.byte	$DE
	.byte	$E5
	.byte	$E6
	.byte	$E4
	.byte	$E5
	.byte	$E4
	.byte	$E5
	.byte	$E3
	.byte	$E4
	.byte	$EB
	.byte	$EC
	.res	12,$00
	.res	48,$00
_stage_anime_index:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.res	30,$00
_msgBlank:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_stage_pos:
	.byte	$01
	.byte	$0E
	.byte	$01
	.byte	$2E
	.byte	$01
	.byte	$4E
	.byte	$01
	.byte	$4A
	.byte	$01
	.byte	$6A
	.byte	$01
	.byte	$8A
	.byte	$01
	.byte	$86
	.byte	$01
	.byte	$A6
	.byte	$01
	.byte	$C6
	.byte	$01
	.byte	$C2
	.byte	$01
	.byte	$E2
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$52
	.byte	$01
	.byte	$72
	.byte	$01
	.byte	$92
	.byte	$01
	.byte	$8E
	.byte	$01
	.byte	$AE
	.byte	$01
	.byte	$CE
	.byte	$01
	.byte	$CA
	.byte	$01
	.byte	$EA
	.byte	$02
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$02
	.byte	$26
	.byte	$02
	.byte	$46
	.byte	$01
	.byte	$96
	.byte	$01
	.byte	$B6
	.byte	$01
	.byte	$D6
	.byte	$01
	.byte	$D2
	.byte	$01
	.byte	$F2
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$0E
	.byte	$02
	.byte	$2E
	.byte	$02
	.byte	$4E
	.byte	$02
	.byte	$4A
	.byte	$02
	.byte	$6A
	.byte	$02
	.byte	$8A
	.byte	$01
	.byte	$DA
	.byte	$01
	.byte	$FA
	.byte	$02
	.byte	$1A
	.byte	$02
	.byte	$16
	.byte	$02
	.byte	$36
	.byte	$02
	.byte	$56
	.byte	$02
	.byte	$52
	.byte	$02
	.byte	$72
	.byte	$02
	.byte	$92
	.byte	$02
	.byte	$8E
	.byte	$02
	.byte	$AE
	.byte	$02
	.byte	$CE
	.res	18,$00
	.res	72,$00
_open_palette1:
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
_open_palette2:
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
_open_palette3:
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
_open_palette4:
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
_palette1:
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$0F
	.byte	$0F
_palette2:
	.byte	$0F
	.byte	$1C
	.byte	$3C
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0C
	.byte	$0F
	.byte	$15
	.byte	$35
	.byte	$0F
_palette3:
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$0C
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
_palette4:
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$26
	.byte	$30
	.byte	$07
	.byte	$0B
	.byte	$17
	.byte	$30
	.byte	$37
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
_palette5:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_palette6:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$0F
	.byte	$24
	.byte	$0F
	.byte	$21
	.byte	$0F
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_palette7:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$30
	.byte	$24
	.byte	$0F
	.byte	$21
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_palette8:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$24
	.byte	$24
	.byte	$0F
	.byte	$0F
	.byte	$21
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_palette_jeesus:
	.byte	$0F
	.byte	$05
	.byte	$30
	.byte	$26
	.byte	$0F
	.byte	$05
	.byte	$30
	.byte	$36
	.byte	$0F
	.byte	$16
	.byte	$30
	.byte	$36
	.byte	$0F
	.byte	$26
	.byte	$30
	.byte	$30
_meta_quarto:
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$21
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$32
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$34
	.byte	$01
	.byte	$28
	.byte	$00
	.byte	$2F
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$80
_meta_p1win:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$37
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$28
	.byte	$00
	.byte	$2E
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$80
_meta_p2win:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$37
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$28
	.byte	$00
	.byte	$2E
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$80
_meta_right_cursor:
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$80
_meta_pos1:
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$01
	.byte	$80
_meta_pos2:
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$02
	.byte	$80
_meta_pos1_reverse:
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$81
	.byte	$80
_cursor:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$80
_cursor2:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$81
	.byte	$80
_koma_1:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_3:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_4:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_1_P2:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_2_P2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_3_P2:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_4_P2:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_5_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_6_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_7_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_8_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_OFF_koma_1:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_3:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_4:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_koma_type:
	.byte	$00
	.byte	$F0
	.byte	$E1
	.byte	$D2
	.byte	$C3
	.byte	$B4
	.byte	$A5
	.byte	$96
	.byte	$87
	.byte	$78
	.byte	$69
	.byte	$5A
	.byte	$4B
	.byte	$3C
	.byte	$2D
	.byte	$1E
	.byte	$0F
S0009:
	.byte	$50,$32,$3A,$50,$4C,$41,$59,$49,$4E,$47,$20,$20,$20,$20,$00
S0008:
	.byte	$50,$31,$3A,$50,$4C,$41,$59,$49,$4E,$47,$20,$20,$20,$20,$00
S0007:
	.byte	$50,$32,$3A,$53,$45,$4C,$45,$43,$54,$20,$4E,$45,$58,$54,$00
S0006:
	.byte	$50,$31,$3A,$53,$45,$4C,$45,$43,$54,$20,$4E,$45,$58,$54,$00
S0002:
	.byte	$50,$52,$45,$53,$53,$20,$42,$55,$54,$54,$4F,$4E,$21,$00
S0003:
	.byte	$30,$30,$36,$20,$2A,$20,$32,$30,$32,$31,$00
S0005	:=	S0009+11
S0017:
	.byte	$4F,$46,$46,$00
S0016	:=	S0009+11
S0015	:=	S0009+11
S0014	:=	S0009+11
S000A	:=	S0009+11
S000B	:=	S0009+11
S000C	:=	S0009+11
S000D:
	.byte	$58,$20,$20,$00
S000E:
	.byte	$58,$58,$20,$00
S000F:
	.byte	$58,$58,$58,$00
S0010	:=	S0009+11
S0011	:=	S000D+0
S0012	:=	S000E+0
S0013	:=	S000F+0
S0004	:=	S0009+11

.segment	"BSS"

_strbuf:
	.res	16,$00
_quarto:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_k:
	.res	1,$00
_l:
	.res	1,$00
_m:
	.res	1,$00
_n:
	.res	1,$00
_o:
	.res	1,$00
_p:
	.res	1,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_x_index:
	.res	1,$00
_y_index:
	.res	1,$00
_timer:
	.res	1,$00
_timerSetCount:
	.res	1,$00
_set_posh:
	.res	1,$00
_set_posl:
	.res	1,$00
_whichTurn:
	.res	1,$00
_selBW:
	.res	1,$00
_pad:
	.res	1,$00
_spr:
	.res	1,$00
_calc:
	.res	1,$00
_tmp:
	.res	1,$00
_tmp2:
	.res	1,$00
_tmp3:
	.res	1,$00
_tmp4:
	.res	1,$00
_frame:
	.res	1,$00
_koma_frame:
	.res	1,$00
_q_black:
	.res	1,$00
_q_white:
	.res	1,$00
_q_high:
	.res	1,$00
_q_low:
	.res	1,$00
_q_square:
	.res	1,$00
_q_circle:
	.res	1,$00
_q_plane:
	.res	1,$00
_q_dot:
	.res	1,$00
_err:
	.res	2,$00
_set_posx:
	.res	1,$00
_set_posy:
	.res	1,$00
_moving:
	.res	1,$00
_p1only:
	.res	1,$00
_koma_pos:
	.res	2,$00
_koma_x:
	.res	2,$00
_koma_y:
	.res	2,$00
_ChooseKoma:
	.res	1,$00
_koma_exist:
	.res	16,$00
_killer_exist:
	.res	16,$00
_bgpl:
	.res	1,$00
_game_music:
	.res	1,$00
_reach:
	.res	1,$00
_autoChoose:
	.res	1,$00
_isForceFin:
	.res	1,$00
_isVsCPU:
	.res	1,$00
_attr_stat:
	.res	40,$00
_rand_box1:
	.res	4,$00
_rand_box2:
	.res	4,$00
_stage_stat:
	.res	48,$00
_quarto_line:
	.res	8,$00
_update_list:
	.res	23,$00
_update_koma:
	.res	25,$00
_update_koma_color:
	.res	5,$00
_update_debug:
	.res	20,$00
_dbgcnt:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

	.dbg	func, "reset", "00", extern, "_reset"

.segment	"CODE"

;
; scroll(0,0);
;
	.dbg	line, "quarto.c", 2356
	jsr     push0
	jsr     _scroll
;
; initVal() ;
;
	.dbg	line, "quarto.c", 2357
	jsr     _initVal
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2359
	jsr     _oam_clear
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 2360
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 2361
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)menu);
;
	.dbg	line, "quarto.c", 2362
	lda     #<(_menu)
	ldx     #>(_menu)
	jsr     _vram_unrle
;
; pal_bg((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 2363
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L004C
	inx
	clc
L004C:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 2364
	jsr     _ppu_on_all
;
; put_update_debug(16,17, 3, "   ");
;
	.dbg	line, "quarto.c", 2367
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0014)
	ldx     #>(S0014)
	jsr     _put_update_debug
;
; put_update_debug(16,17, 3, itoa(timerSetCount, &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2368
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _timerSetCount
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ;
;
	.dbg	line, "quarto.c", 2370
L0051:	lda     _whichTurn
	bne     L0054
	lda     _p1only
	cmp     #$01
	bne     L0055
L0054:	lda     #$00
	jmp     L0056
L0055:	lda     #$01
L0056:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_UP && p1only == 0){
;
	.dbg	line, "quarto.c", 2371
	and     #$08
	beq     L005A
	lda     _p1only
	bne     L005A
;
; p1only = 1 ;
;
	.dbg	line, "quarto.c", 2372
	lda     #$01
	sta     _p1only
;
; isVsCPU = 1 ;
;
	.dbg	line, "quarto.c", 2373
	sta     _isVsCPU
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2374
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if(pad&PAD_DOWN && p1only == 1){
;
	.dbg	line, "quarto.c", 2377
L005A:	lda     _pad
	and     #$04
	beq     L0060
	lda     _p1only
	cmp     #$01
	bne     L0060
;
; p1only = 0 ;
;
	.dbg	line, "quarto.c", 2378
	lda     #$00
	sta     _p1only
;
; isVsCPU = 0 ;
;
	.dbg	line, "quarto.c", 2379
	sta     _isVsCPU
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2380
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 2382
L0060:	lda     _pad
	and     #$80
	beq     L0067
;
; sfx_play(5,0);
;
	.dbg	line, "quarto.c", 2383
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2384
L0012:	lda     _pad
	and     #$80
	beq     L0003
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 2385
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2384
	lda     _whichTurn
	bne     L0063
	lda     _p1only
	cmp     #$01
	bne     L0064
L0063:	lda     #$00
	jmp     L0065
L0064:	lda     #$01
L0065:	jsr     _pad_poll
	sta     _pad
	jmp     L0012
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 2389
L0067:	sta     _spr
;
; spr = oam_meta_spr( 70, 63+(p1only==1?0:1*16), spr, meta_right_cursor) ;
;
	.dbg	line, "quarto.c", 2390
	jsr     decsp3
	lda     #$46
	ldy     #$02
	sta     (sp),y
	lda     _p1only
	cmp     #$01
	bne     L0068
	lda     #$00
	jmp     L001B
L0068:	lda     #$10
L001B:	clc
	adc     #$3F
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_right_cursor)
	ldx     #>(_meta_right_cursor)
	jsr     _oam_meta_spr
	sta     _spr
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2391
	inc     _frame
;
; while(1){
;
	.dbg	line, "quarto.c", 2369
	jmp     L0051
;
; seedRandBox() ;
;
	.dbg	line, "quarto.c", 2393
L0003:	jsr     _seedRandBox
;
; put_update_debug(1,50, 1, itoa(rand_box1[0], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2395
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box1
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(3,50, 1, itoa(rand_box1[1], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2396
	jsr     decsp3
	lda     #$03
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box1+1
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(5,50, 1, itoa(rand_box1[2], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2397
	jsr     decsp3
	lda     #$05
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box1+2
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(7,50, 1, itoa(rand_box1[3], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2398
	jsr     decsp3
	lda     #$07
	ldy     #$02
	sta     (sp),y
	lda     #$32
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box1+3
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(1,51, 1, itoa(rand_box2[0], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2399
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$33
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box2
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(3,51, 1, itoa(rand_box2[1], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2400
	jsr     decsp3
	lda     #$03
	ldy     #$02
	sta     (sp),y
	lda     #$33
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box2+1
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(5,51, 1, itoa(rand_box2[2], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2401
	jsr     decsp3
	lda     #$05
	ldy     #$02
	sta     (sp),y
	lda     #$33
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box2+2
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; put_update_debug(7,51, 1, itoa(rand_box2[3], &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2402
	jsr     decsp3
	lda     #$07
	ldy     #$02
	sta     (sp),y
	lda     #$33
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _rand_box2+3
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 2404
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( 70, 135, spr, meta_right_cursor) ;
;
	.dbg	line, "quarto.c", 2405
	jsr     decsp3
	lda     #$46
	ldy     #$02
	sta     (sp),y
	lda     #$87
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_right_cursor)
	ldx     #>(_meta_right_cursor)
	jsr     _oam_meta_spr
	sta     _spr
;
; pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ;
;
	.dbg	line, "quarto.c", 2407
L0069:	lda     _whichTurn
	bne     L006C
	lda     _p1only
	cmp     #$01
	bne     L006D
L006C:	lda     #$00
	jmp     L006E
L006D:	lda     #$01
L006E:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_UP&& timerSetCount<=200){
;
	.dbg	line, "quarto.c", 2408
	and     #$08
	jeq     L0075
	lda     _timerSetCount
	cmp     #$C9
	jcs     L0075
;
; timerSetCount+= pad&PAD_B?10:1 ;
;
	.dbg	line, "quarto.c", 2409
	lda     _pad
	and     #$40
	beq     L0072
	lda     #$0A
	jmp     L0074
L0072:	lda     #$01
L0074:	clc
	adc     _timerSetCount
	sta     _timerSetCount
;
; if( timerSetCount < 3 ){ timerSetCount=3 ;} ;
;
	.dbg	line, "quarto.c", 2411
	cmp     #$03
	bcs     L002A
	lda     #$03
	sta     _timerSetCount
;
; put_update_debug(16,17, 3, "   ");
;
	.dbg	line, "quarto.c", 2413
L002A:	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0015)
	ldx     #>(S0015)
	jsr     _put_update_debug
;
; put_update_debug(16,17, 3, itoa(timerSetCount, &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2414
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _timerSetCount
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2415
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(2) ;
;
	.dbg	line, "quarto.c", 2416
	lda     #$02
	jsr     _delay
;
; if(pad&PAD_DOWN&&timerSetCount>3){
;
	.dbg	line, "quarto.c", 2419
L0075:	lda     _pad
	and     #$04
	jeq     L007D
	lda     _timerSetCount
	cmp     #$04
	jcc     L007D
;
; tmp = pad&PAD_B?10:1;
;
	.dbg	line, "quarto.c", 2420
	lda     _pad
	and     #$40
	beq     L0079
	lda     #$0A
	jmp     L007A
L0079:	lda     #$01
L007A:	sta     _tmp
;
; if( timerSetCount <= tmp ){ 
;
	.dbg	line, "quarto.c", 2421
	lda     _timerSetCount
	cmp     _tmp
	beq     L007B
	bcs     L007C
;
; timerSetCount = 3 ;
;
	.dbg	line, "quarto.c", 2422
L007B:	lda     #$03
;
; }else{
;
	.dbg	line, "quarto.c", 2423
	jmp     L004B
;
; timerSetCount-= tmp ;
;
	.dbg	line, "quarto.c", 2424
L007C:	lda     _tmp
	eor     #$FF
	sec
	adc     _timerSetCount
L004B:	sta     _timerSetCount
;
; put_update_debug(16,17, 3, "   ");
;
	.dbg	line, "quarto.c", 2426
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0016)
	ldx     #>(S0016)
	jsr     _put_update_debug
;
; put_update_debug(16,17, 3, itoa(timerSetCount, &strbuf[0], 10 ));
;
	.dbg	line, "quarto.c", 2427
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _timerSetCount
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _put_update_debug
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2428
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(2) ;
;
	.dbg	line, "quarto.c", 2429
	lda     #$02
	jsr     _delay
;
; if(pad&PAD_RIGHT && timerSetCount!=0){
;
	.dbg	line, "quarto.c", 2431
L007D:	lda     _pad
	and     #$01
	beq     L0081
	lda     _timerSetCount
	beq     L0081
;
; timerSetCount = 0 ;
;
	.dbg	line, "quarto.c", 2432
	lda     #$00
	sta     _timerSetCount
;
; put_update_debug(16,17, 3, "OFF");
;
	.dbg	line, "quarto.c", 2433
	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0017)
	ldx     #>(S0017)
	jsr     _put_update_debug
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2434
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; delay(2) ;
;
	.dbg	line, "quarto.c", 2435
	lda     #$02
	jsr     _delay
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 2437
L0081:	lda     _pad
	and     #$80
	jeq     L0069
;
; sfx_play(5,0);
;
	.dbg	line, "quarto.c", 2438
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; timer=timerSetCount;
;
	.dbg	line, "quarto.c", 2442
	lda     _timerSetCount
	sta     _timer
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2444
	jsr     _oam_clear
;
; pal_spr((char*)bg_palettes[bgpl]);//set background palette from an array
;
	.dbg	line, "quarto.c", 2445
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L004D
	inx
	clc
L004D:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; pal_bg((char*)bg_palettes[bgpl]);//set background palette from an array
;
	.dbg	line, "quarto.c", 2446
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L004E
	inx
	clc
L004E:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 2448
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 2449
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)test2_blank);
;
	.dbg	line, "quarto.c", 2450
	lda     #<(_test2_blank)
	ldx     #>(_test2_blank)
	jsr     _vram_unrle
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 2451
	jsr     _ppu_on_all
;
; music_stop();
;
	.dbg	line, "quarto.c", 2453
	jsr     _music_stop
;
; delay(30) ;
;
	.dbg	line, "quarto.c", 2456
	lda     #$1E
	jsr     _delay
;
; update_init() ;
;
	.dbg	line, "quarto.c", 2474
	jsr     _update_init
;
; for( tmp=0; tmp < 16; tmp++ ){
;
	.dbg	line, "quarto.c", 2475
	lda     #$00
	sta     _tmp
L0082:	lda     _tmp
	cmp     #$10
	bcs     L0083
;
; up_stage(stage_anime_index[tmp][0], stage_anime_index[tmp][1] );
;
	.dbg	line, "quarto.c", 2476
	ldx     #$00
	lda     _tmp
	asl     a
	bcc     L0048
	inx
L0048:	sta     ptr1
	txa
	clc
	adc     #>(_stage_anime_index)
	sta     ptr1+1
	ldy     #<(_stage_anime_index)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _tmp
	asl     a
	bcc     L004F
	inx
	clc
L004F:	adc     #<(_stage_anime_index)
	sta     ptr1
	txa
	adc     #>(_stage_anime_index)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _up_stage
;
; for( tmp=0; tmp < 16; tmp++ ){
;
	.dbg	line, "quarto.c", 2475
	inc     _tmp
	jmp     L0082
;
; delay(15) ;
;
	.dbg	line, "quarto.c", 2479
L0083:	lda     #$0F
	jsr     _delay
;
; for( x = 0; x < 8; x++ ){
;
	.dbg	line, "quarto.c", 2480
	lda     #$00
	sta     _x
L0084:	lda     _x
	cmp     #$08
	jcs     L003E
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 2481
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; putStockKoma((x*4),0,0xAA, (unsigned char*)koma_list[0][0][x]) ;
;
	.dbg	line, "quarto.c", 2483
	jsr     decsp3
	lda     _x
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$AA
	dey
	sta     (sp),y
	ldx     #$00
	lda     _x
	asl     a
	bcc     L0050
	inx
	clc
L0050:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; sfx_play(2,1);
;
	.dbg	line, "quarto.c", 2484
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; putStockKoma(28-(x*4),26,0x55, (unsigned char*)koma_list[0][1][7-x]) ;
;
	.dbg	line, "quarto.c", 2486
	jsr     decsp3
	lda     #$1C
	jsr     pusha0
	lda     _x
	jsr     shlax2
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	lda     #$1A
	dey
	sta     (sp),y
	lda     #$55
	dey
	sta     (sp),y
	lda     #$07
	sec
	sbc     _x
	pha
	tya
	sbc     #$00
	sta     tmp1
	pla
	asl     a
	rol     tmp1
	clc
	adc     #<(_koma_list+16)
	sta     ptr1
	lda     tmp1
	adc     #>(_koma_list+16)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; for( x = 0; x < 8; x++ ){
;
	.dbg	line, "quarto.c", 2480
	inc     _x
	jmp     L0084
;
; memfill( stage_stat, 0x00, 48 );
;
	.dbg	line, "quarto.c", 2491
L003E:	jsr     decsp3
	lda     #<(_stage_stat)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_stage_stat)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$30
	jsr     _memfill
;
; memfill( koma_exist, 0x01, 16 );
;
	.dbg	line, "quarto.c", 2492
	jsr     decsp3
	lda     #<(_koma_exist)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_koma_exist)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$10
	jsr     _memfill
;
; memfill( killer_exist, 0x01, 16 );
;
	.dbg	line, "quarto.c", 2493
	jsr     decsp3
	lda     #<(_killer_exist)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_killer_exist)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$10
	jsr     _memfill
;
; memfill( quarto_line, 0x00, 8 );
;
	.dbg	line, "quarto.c", 2494
	jsr     decsp3
	lda     #<(_quarto_line)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_quarto_line)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$08
	jsr     _memfill
;
; music_play(game_music) ;
;
	.dbg	line, "quarto.c", 2496
	lda     _game_music
	jsr     _music_play
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 2499
	lda     #$0A
	jsr     _delay
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 2506
L0041:	lda     #$0A
	jsr     _delay
;
; procChooseKoma() ;
;
	.dbg	line, "quarto.c", 2508
	jsr     _procChooseKoma
;
; procCheckQuarto() ;
;
	.dbg	line, "quarto.c", 2509
	jsr     _procCheckQuarto
;
; procMoveKoma() ;
;
	.dbg	line, "quarto.c", 2511
	jsr     _procMoveKoma
;
; procCheckQuarto() ;
;
	.dbg	line, "quarto.c", 2512
	jsr     _procCheckQuarto
;
; while(1)
;
	.dbg	line, "quarto.c", 2504
	jmp     L0041

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ seedRandBox (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_seedRandBox: near

	.dbg	func, "seedRandBox", "00", extern, "_seedRandBox"

.segment	"CODE"

;
; memfill( rand_box1, 9, 4 );
;
	.dbg	line, "quarto.c", 858
	jsr     decsp3
	lda     #<(_rand_box1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_rand_box1)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; memfill( rand_box2, 9, 4 );
;
	.dbg	line, "quarto.c", 859
	jsr     decsp3
	lda     #<(_rand_box2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_rand_box2)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$04
	jsr     _memfill
;
; for( i=0; i < 4;){
;
	.dbg	line, "quarto.c", 860
	lda     #$00
	sta     _i
L001A:	lda     _i
	cmp     #$04
	bcs     L001C
;
; tmp = (rand8()+frame)%4 ;
;
	.dbg	line, "quarto.c", 861
	jsr     _rand8
	clc
	adc     _frame
	bcc     L0018
	inx
L0018:	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     tosmoda0
	sta     _tmp
;
; if( rand_box1[tmp] == i || rand_box1[tmp] != 9 ){
;
	.dbg	line, "quarto.c", 862
	ldy     _tmp
	lda     _rand_box1,y
	cmp     _i
	beq     L001B
	ldy     _tmp
	lda     _rand_box1,y
	cmp     #$09
	beq     L0006
;
; frame += open_palette1[tmp] ;
;
	.dbg	line, "quarto.c", 863
L001B:	ldy     _tmp
	lda     _open_palette1,y
	clc
	adc     _frame
	sta     _frame
;
; continue ;
;
	.dbg	line, "quarto.c", 864
	jmp     L001A
;
; rand_box1[tmp] = i ;
;
	.dbg	line, "quarto.c", 866
L0006:	ldy     _tmp
	lda     _i
	sta     _rand_box1,y
;
; i++ ;
;
	.dbg	line, "quarto.c", 867
	inc     _i
;
; }
;
	.dbg	line, "quarto.c", 868
	jmp     L001A
;
; for( i=0; i < 4;){
;
	.dbg	line, "quarto.c", 869
L001C:	lda     #$00
	sta     _i
L001D:	lda     _i
	cmp     #$04
	bcs     L000E
;
; tmp = (rand8()+frame)%4 ;
;
	.dbg	line, "quarto.c", 870
	jsr     _rand8
	clc
	adc     _frame
	bcc     L0019
	inx
L0019:	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     tosmoda0
	sta     _tmp
;
; if( rand_box2[tmp] == i || rand_box2[tmp] != 9 ){
;
	.dbg	line, "quarto.c", 871
	ldy     _tmp
	lda     _rand_box2,y
	cmp     _i
	beq     L001E
	ldy     _tmp
	lda     _rand_box2,y
	cmp     #$09
	beq     L0011
;
; frame += open_palette1[tmp] ;
;
	.dbg	line, "quarto.c", 872
L001E:	ldy     _tmp
	lda     _open_palette1,y
	clc
	adc     _frame
	sta     _frame
;
; continue ;
;
	.dbg	line, "quarto.c", 873
	jmp     L001D
;
; rand_box2[tmp] = i ;
;
	.dbg	line, "quarto.c", 875
L0011:	ldy     _tmp
	lda     _i
	sta     _rand_box2,y
;
; i++ ;
;
	.dbg	line, "quarto.c", 876
	inc     _i
;
; }
;
	.dbg	line, "quarto.c", 877
	jmp     L001D
;
; }
;
	.dbg	line, "quarto.c", 878
L000E:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ put_update_debug (unsigned char x, unsigned char y, unsigned char len, const char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_update_debug: near

	.dbg	func, "put_update_debug", "00", extern, "_put_update_debug"
	.dbg	sym, "x", "00", auto, 4
	.dbg	sym, "y", "00", auto, 3
	.dbg	sym, "len", "00", auto, 2
	.dbg	sym, "str", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 881
	jsr     pushax
;
; update_debug[0]=MSB(NTADR_A(x,y))|NT_UPD_HORZ;//set the address
;
	.dbg	line, "quarto.c", 883
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	lda     tmp1
	ora     #$20
	tax
	txa
	cpx     #$80
	ora     #$40
	sta     _update_debug
;
; update_debug[1]=LSB(NTADR_A(x,y));
;
	.dbg	line, "quarto.c", 884
	dey
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	sta     _update_debug+1
	lda     tmp1
	ora     #$20
;
; update_debug[2]=len;//update sequence is 4 tiles wide
;
	.dbg	line, "quarto.c", 885
	ldy     #$02
	lda     (sp),y
	sta     _update_debug+2
;
; update_debug[3+len]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 886
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$03
	bcc     L000B
	inx
	clc
L000B:	adc     #<(_update_debug)
	sta     ptr1
	txa
	adc     #>(_update_debug)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; set_vram_update(update_debug);
;
	.dbg	line, "quarto.c", 887
	lda     #<(_update_debug)
	ldx     #>(_update_debug)
	jsr     _set_vram_update
;
; for( dbgcnt = 0;dbgcnt<len;dbgcnt++)
;
	.dbg	line, "quarto.c", 889
	lda     #$00
	sta     _dbgcnt
L000D:	lda     _dbgcnt
	ldy     #$02
	cmp     (sp),y
	bcs     L0005
;
; if(!*str) break;
;
	.dbg	line, "quarto.c", 891
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L0005
;
; update_debug[3+dbgcnt]=(*str++)-0x20 ;//fill row buffer with random tiles
;
	.dbg	line, "quarto.c", 892
	ldx     #$00
	lda     _dbgcnt
	clc
	adc     #$03
	bcc     L000C
	inx
	clc
L000C:	adc     #<(_update_debug)
	sta     sreg
	txa
	adc     #>(_update_debug)
	sta     sreg+1
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$20
	sta     (sreg),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; for( dbgcnt = 0;dbgcnt<len;dbgcnt++)
;
	.dbg	line, "quarto.c", 889
	inc     _dbgcnt
	jmp     L000D
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 894
L0005:	jsr     _ppu_wait_frame
;
; set_vram_update(0);
;
	.dbg	line, "quarto.c", 895
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; }
;
	.dbg	line, "quarto.c", 896
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ update_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_init: near

	.dbg	func, "update_init", "00", extern, "_update_init"

.segment	"CODE"

;
; update_list[0]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 900
	lda     #$60
	sta     _update_list
;
; update_list[1]=0x00;
;
	.dbg	line, "quarto.c", 901
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=3;
;
	.dbg	line, "quarto.c", 902
	lda     #$03
	sta     _update_list+2
;
; update_list[(6)]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 904
	lda     #$60
	sta     _update_list+6
;
; update_list[(6)+1]=0x00;
;
	.dbg	line, "quarto.c", 905
	lda     #$00
	sta     _update_list+7
;
; update_list[(6)+2]=5;
;
	.dbg	line, "quarto.c", 906
	lda     #$05
	sta     _update_list+8
;
; update_list[(6+8)]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 908
	lda     #$60
	sta     _update_list+14
;
; update_list[(6+8)+1]=0x00;
;
	.dbg	line, "quarto.c", 909
	lda     #$00
	sta     _update_list+15
;
; update_list[(6+8)+2]=5;
;
	.dbg	line, "quarto.c", 910
	lda     #$05
	sta     _update_list+16
;
; update_list[(6+8+8)]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 912
	lda     #$FF
	sta     _update_list+22
;
; set_vram_update(update_list);
;
	.dbg	line, "quarto.c", 913
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jmp     _set_vram_update

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ upProc (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upProc: near

	.dbg	func, "upProc", "00", extern, "_upProc"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 932
	jsr     pusha
;
; for( i = 0; i < 5; i++ ){
;
	.dbg	line, "quarto.c", 933
	lda     #$00
	sta     _i
L0068:	lda     _i
	cmp     #$05
	jcs     L0082
;
; if( anime[x][y] == 0 ){
;
	.dbg	line, "quarto.c", 934
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	bne     L0006
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 936
	tax
	lda     _i
	beq     L006C
	cmp     #$04
	beq     L006C
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 937
	clc
	adc     #$03
	bcc     L000B
	inx
L000B:	sec
	sbc     #$01
	bcs     L000C
	dex
L000C:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE5+i) ;
;
	.dbg	line, "quarto.c", 939
	tax
L006C:	lda     _i
	clc
	adc     #$06
	bcc     L0054
	inx
	clc
L0054:	adc     #$03
	bcc     L0055
	inx
	clc
L0055:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF5+i) ;
;
	.dbg	line, "quarto.c", 940
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0056
	inx
	clc
L0056:	adc     #$03
	bcc     L0057
	inx
	clc
L0057:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F5
;
; }else if( anime[x][y] == 1 ){
;
	.dbg	line, "quarto.c", 941
	jmp     L0087
L0006:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$01
	bne     L0014
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 942
	ldx     #$00
	lda     _i
	beq     L0070
	cmp     #$04
	beq     L0070
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 943
	clc
	adc     #$03
	bcc     L0019
	inx
L0019:	sec
	sbc     #$01
	bcs     L001A
	dex
L001A:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE5+i) ;
;
	.dbg	line, "quarto.c", 945
	tax
L0070:	lda     _i
	clc
	adc     #$06
	bcc     L0058
	inx
	clc
L0058:	adc     #$03
	bcc     L0059
	inx
	clc
L0059:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF5+i) ;
;
	.dbg	line, "quarto.c", 946
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L005A
	inx
	clc
L005A:	adc     #$03
	bcc     L005B
	inx
	clc
L005B:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F5
;
; }else if( anime[x][y] == 2 ){
;
	.dbg	line, "quarto.c", 947
	jmp     L0087
L0014:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$02
	bne     L0022
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 948
	ldx     #$00
	lda     _i
	beq     L0074
	cmp     #$04
	beq     L0074
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 949
	clc
	adc     #$03
	bcc     L0027
	inx
L0027:	sec
	sbc     #$01
	bcs     L0028
	dex
L0028:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE0+i) ;
;
	.dbg	line, "quarto.c", 951
	tax
L0074:	lda     _i
	clc
	adc     #$06
	bcc     L005C
	inx
	clc
L005C:	adc     #$03
	bcc     L005D
	inx
	clc
L005D:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E0
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF0+i) ;
;
	.dbg	line, "quarto.c", 952
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L005E
	inx
	clc
L005E:	adc     #$03
	bcc     L005F
	inx
	clc
L005F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F0
;
; }else if( anime[x][y] == 3 ){
;
	.dbg	line, "quarto.c", 953
	jmp     L0087
L0022:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$03
	jne     L0030
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 954
	lda     _i
	beq     L0078
	cmp     #$04
	beq     L0078
;
; update_list[i+3-1] = (unsigned char)(0xC5+i) ;
;
	.dbg	line, "quarto.c", 955
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0035
	inx
L0035:	sec
	sbc     #$01
	bcs     L0036
	dex
L0036:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C5
	ldy     #$00
	sta     (ptr1),y
;
; if( i == 0 || i == 4 ){
;
	.dbg	line, "quarto.c", 957
L0078:	lda     _i
	beq     L0079
	cmp     #$04
	bne     L0084
;
; update_list[i+(6)+3] = (unsigned char)(0xC5+i) ;
;
	.dbg	line, "quarto.c", 958
L0079:	ldx     #$00
	lda     _i
	clc
	adc     #$06
	bcc     L0060
	inx
	clc
L0060:	adc     #$03
	bcc     L0061
	inx
	clc
L0061:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xD5+i) ;
;
	.dbg	line, "quarto.c", 960
L0084:	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0062
	inx
	clc
L0062:	adc     #$03
	bcc     L0063
	inx
	clc
L0063:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D5
;
; }else if( anime[x][y] == 4 ){
;
	.dbg	line, "quarto.c", 961
	jmp     L0086
L0030:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$04
	jne     L0001
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 962
	lda     _i
	beq     L007E
	cmp     #$04
	beq     L007E
;
; update_list[i+3-1] = (unsigned char)(0xC0+i) ;
;
	.dbg	line, "quarto.c", 963
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0047
	inx
L0047:	sec
	sbc     #$01
	bcs     L0048
	dex
L0048:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C0
	ldy     #$00
	sta     (ptr1),y
;
; if( i == 0 || i == 4 ){
;
	.dbg	line, "quarto.c", 965
L007E:	lda     _i
	beq     L007F
	cmp     #$04
	bne     L0085
;
; update_list[i+(6)+3] = (unsigned char)(0xC0+i) ;
;
	.dbg	line, "quarto.c", 966
L007F:	ldx     #$00
	lda     _i
	clc
	adc     #$06
	bcc     L0064
	inx
	clc
L0064:	adc     #$03
	bcc     L0065
	inx
	clc
L0065:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C0
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xD0+i) ;
;
	.dbg	line, "quarto.c", 968
L0085:	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0066
	inx
	clc
L0066:	adc     #$03
	bcc     L0067
	inx
	clc
L0067:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D0
L0086:	ldy     #$00
L0087:	sta     (ptr1),y
;
; for( i = 0; i < 5; i++ ){
;
	.dbg	line, "quarto.c", 933
	inc     _i
	jmp     L0068
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 973
L0082:	lda     #$01
	jsr     _delay
;
; }
;
	.dbg	line, "quarto.c", 974
L0001:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ setStageAdr (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setStageAdr: near

	.dbg	func, "setStageAdr", "00", extern, "_setStageAdr"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 976
	jsr     pusha
;
; update_list[0]=0x20+stage_pos[x][y][0]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 977
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax6
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list
;
; update_list[1]=stage_pos[x][y][1]+1;
;
	.dbg	line, "quarto.c", 978
	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     _update_list+1
;
; update_list[(6)]=0x20+stage_pos[x][y][2]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 979
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$02
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list+6
;
; update_list[(6)+1]=stage_pos[x][y][3];
;
	.dbg	line, "quarto.c", 980
	dey
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$03
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_list+7
;
; update_list[(6+8)]=0x20+stage_pos[x][y][4]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 981
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$04
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list+14
;
; update_list[(6+8)+1]=stage_pos[x][y][5];
;
	.dbg	line, "quarto.c", 982
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$05
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_list+15
;
; }
;
	.dbg	line, "quarto.c", 983
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ up_stage (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_up_stage: near

	.dbg	func, "up_stage", "00", extern, "_up_stage"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 985
	jsr     pusha
;
; setStageAdr(x,y);
;
	.dbg	line, "quarto.c", 986
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _setStageAdr
;
; sfx_play(5,0);
;
	.dbg	line, "quarto.c", 995
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( anime[x][y] = 0 ; anime[x][y] < 5; anime[x][y]++ ){
;
	.dbg	line, "quarto.c", 997
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0006
	inx
L0006:	sta     ptr1
	stx     ptr1+1
	tya
	sta     (ptr1),y
L0002:	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$05
	bcs     L0003
;
; upProc(x,y) ;
;
	.dbg	line, "quarto.c", 1041
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _upProc
;
; for( anime[x][y] = 0 ; anime[x][y] < 5; anime[x][y]++ ){
;
	.dbg	line, "quarto.c", 997
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0007
	inx
L0007:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
	jmp     L0002
;
; }
;
	.dbg	line, "quarto.c", 1043
L0003:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ cycleColor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cycleColor: near

	.dbg	func, "cycleColor", "00", extern, "_cycleColor"

.segment	"CODE"

;
; if(frame%4==0){ pal_bg((char*)open_palette4);}
;
	.dbg	line, "quarto.c", 1057
	lda     _frame
	and     #$03
	bne     L000A
	lda     #<(_open_palette4)
	ldx     #>(_open_palette4)
	jsr     _pal_bg
;
; if(frame%4==1){ pal_bg((char*)open_palette3);}
;
	.dbg	line, "quarto.c", 1058
L000A:	lda     _frame
	and     #$03
	cmp     #$01
	bne     L000B
	lda     #<(_open_palette3)
	ldx     #>(_open_palette3)
	jsr     _pal_bg
;
; if(frame%4==2){ pal_bg((char*)open_palette2);}
;
	.dbg	line, "quarto.c", 1059
L000B:	lda     _frame
	and     #$03
	cmp     #$02
	bne     L000C
	lda     #<(_open_palette2)
	ldx     #>(_open_palette2)
	jsr     _pal_bg
;
; if(frame%4==3){ pal_bg((char*)open_palette1);}
;
	.dbg	line, "quarto.c", 1060
L000C:	lda     _frame
	and     #$03
	cmp     #$03
	bne     L0008
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jmp     _pal_bg
;
; }
;
	.dbg	line, "quarto.c", 1061
L0008:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ cycleSprColor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cycleSprColor: near

	.dbg	func, "cycleSprColor", "00", extern, "_cycleSprColor"

.segment	"CODE"

;
; if(frame%4==0){ pal_spr((char*)open_palette4);}
;
	.dbg	line, "quarto.c", 1064
	lda     _frame
	and     #$03
	bne     L000A
	lda     #<(_open_palette4)
	ldx     #>(_open_palette4)
	jsr     _pal_spr
;
; if(frame%4==1){ pal_spr((char*)open_palette3);}
;
	.dbg	line, "quarto.c", 1065
L000A:	lda     _frame
	and     #$03
	cmp     #$01
	bne     L000B
	lda     #<(_open_palette3)
	ldx     #>(_open_palette3)
	jsr     _pal_spr
;
; if(frame%4==2){ pal_spr((char*)open_palette2);}
;
	.dbg	line, "quarto.c", 1066
L000B:	lda     _frame
	and     #$03
	cmp     #$02
	bne     L000C
	lda     #<(_open_palette2)
	ldx     #>(_open_palette2)
	jsr     _pal_spr
;
; if(frame%4==3){ pal_spr((char*)open_palette1);}
;
	.dbg	line, "quarto.c", 1067
L000C:	lda     _frame
	and     #$03
	cmp     #$03
	bne     L0008
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jmp     _pal_spr
;
; }
;
	.dbg	line, "quarto.c", 1068
L0008:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkForceBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkForceBreak: near

	.dbg	func, "checkForceBreak", "00", extern, "_checkForceBreak"

.segment	"CODE"

;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 1071
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_START || pad&PAD_SELECT || pad&PAD_A || pad&PAD_B ){
;
	.dbg	line, "quarto.c", 1072
	and     #$10
	bne     L0008
	lda     _pad
	and     #$20
	bne     L0008
	lda     _pad
	and     #$80
	bne     L0008
	lda     _pad
	and     #$40
	beq     L0009
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1073
L0008:	ldx     #$00
	lda     #$01
	rts
;
; pad = pad_poll(1);
;
	.dbg	line, "quarto.c", 1075
L0009:	lda     #$01
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_START || pad&PAD_SELECT || pad&PAD_A || pad&PAD_B ){
;
	.dbg	line, "quarto.c", 1076
	and     #$10
	bne     L000A
	lda     _pad
	and     #$20
	bne     L000A
	lda     _pad
	and     #$80
	bne     L000A
	lda     _pad
	and     #$40
	bne     L000A
	tax
	rts
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1077
L000A:	ldx     #$00
	lda     #$01
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgFlash (unsigned char action)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgFlash: near

	.dbg	func, "bgFlash", "00", extern, "_bgFlash"
	.dbg	sym, "action", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1091
	jsr     pusha
;
; pal_bright(action);
;
	.dbg	line, "quarto.c", 1092
	ldy     #$00
	lda     (sp),y
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1093
	lda     #$06
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1094
	lda     #$04
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1095
	lda     #$06
	jsr     _delay
;
; pal_bright(action);
;
	.dbg	line, "quarto.c", 1096
	ldy     #$00
	lda     (sp),y
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1097
	lda     #$06
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1098
	lda     #$04
	jsr     _pal_bright
;
; }
;
	.dbg	line, "quarto.c", 1099
	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgDown: near

	.dbg	func, "bgDown", "00", extern, "_bgDown"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "quarto.c", 1102
	lda     #$03
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1103
	lda     #$06
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "quarto.c", 1104
	lda     #$02
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1105
	lda     #$06
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "quarto.c", 1106
	lda     #$01
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 1107
	lda     #$06
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 1108
	lda     #$00
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgUp: near

	.dbg	func, "bgUp", "00", extern, "_bgUp"

.segment	"CODE"

;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 1112
	lda     #$00
	jsr     _pal_bright
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 1113
	lda     #$0A
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "quarto.c", 1114
	lda     #$01
	jsr     _pal_bright
;
; delay(4) ;
;
	.dbg	line, "quarto.c", 1115
	lda     #$04
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "quarto.c", 1116
	lda     #$02
	jsr     _pal_bright
;
; delay(4) ;
;
	.dbg	line, "quarto.c", 1117
	lda     #$04
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1118
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ move_next (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_next: near

	.dbg	func, "move_next", "00", extern, "_move_next"

.segment	"CODE"

;
; for( i = 0; i < 2; i++ ){
;
	.dbg	line, "quarto.c", 1124
	lda     #$00
	sta     _i
L0056:	lda     _i
	cmp     #$02
	bcc     L0065
;
; }
;
	.dbg	line, "quarto.c", 1223
	rts
;
; koma_frame = 0 ;
;
	.dbg	line, "quarto.c", 1125
L0065:	lda     #$00
	sta     _koma_frame
;
; if( koma_frame % 10 == 0 ){ frame++ ; }
;
	.dbg	line, "quarto.c", 1128
L0057:	lda     _koma_frame
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L0009
	cmp     #$00
	bne     L0009
	inc     _frame
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1130
L0009:	lda     #$01
	jsr     _delay
;
; cycleColor() ;
;
	.dbg	line, "quarto.c", 1131
	jsr     _cycleColor
;
; if( koma_frame == 0 ){
;
	.dbg	line, "quarto.c", 1133
	lda     _koma_frame
	jne     L000F
;
; if( tmp < 10 ){ 
;
	.dbg	line, "quarto.c", 1135
	lda     _tmp
	cmp     #$0A
	bcs     L0058
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1136
	lda     #$01
	jsr     _delay
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 1137
	inc     _tmp
;
; continue ;
;
	.dbg	line, "quarto.c", 1138
	jmp     L0057
;
; if( tmp == 10 ){
;
	.dbg	line, "quarto.c", 1140
L0058:	lda     _tmp
	cmp     #$0A
	jne     L0059
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 1141
	inc     _tmp
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1142
	lda     #$14
	jsr     _delay
;
; bgFlash(0) ;
;
	.dbg	line, "quarto.c", 1144
	lda     #$00
	jsr     _bgFlash
;
; bgDown() ;
;
	.dbg	line, "quarto.c", 1145
	jsr     _bgDown
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 1147
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1148
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)open_name);
;
	.dbg	line, "quarto.c", 1149
	lda     #<(_open_name)
	ldx     #>(_open_name)
	jsr     _vram_unrle
;
; ppu_on_all() ;
;
	.dbg	line, "quarto.c", 1150
	jsr     _ppu_on_all
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1152
	lda     #$14
	jsr     _delay
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1153
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1154
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1155
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; bgUp() ;
;
	.dbg	line, "quarto.c", 1157
	jsr     _bgUp
;
; put_update_debug(10,25, 13, "PRESS BUTTON!" );
;
	.dbg	line, "quarto.c", 1159
	jsr     decsp3
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	lda     #$19
	dey
	sta     (sp),y
	lda     #$0D
	dey
	sta     (sp),y
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _put_update_debug
;
; put_update_debug(11,27, 10, "006 * 2021" );
;
	.dbg	line, "quarto.c", 1160
	jsr     decsp3
	lda     #$0B
	ldy     #$02
	sta     (sp),y
	lda     #$1B
	dey
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _put_update_debug
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1161
	lda     #$14
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1162
	lda     #$04
	jsr     _pal_bright
;
; music_play(0);
;
	.dbg	line, "quarto.c", 1163
	lda     #$00
	jsr     _music_play
;
; for( j = 0; j < 14; j++ ){
;
	.dbg	line, "quarto.c", 1166
L0059:	lda     #$00
	sta     _j
L005A:	lda     _j
	cmp     #$0E
	jcs     L000F
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1167
	lda     #$01
	jsr     _delay
;
; koma_y[i]-- ;
;
	.dbg	line, "quarto.c", 1168
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L0012
	inx
L0012:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1169
	sty     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1170
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1171
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; cycleColor() ;
;
	.dbg	line, "quarto.c", 1172
	jsr     _cycleColor
;
; if( koma_frame % 10 == 0 ){ frame++ ; }
;
	.dbg	line, "quarto.c", 1173
	lda     _koma_frame
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L0013
	cmp     #$00
	bne     L0013
	inc     _frame
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1174
L0013:	inc     _koma_frame
;
; if( checkForceBreak() ){ return ; }
;
	.dbg	line, "quarto.c", 1175
	jsr     _checkForceBreak
	tax
	beq     L0066
;
; }
;
	.dbg	line, "quarto.c", 1223
	rts
;
; for( j = 0; j < 14; j++ ){
;
	.dbg	line, "quarto.c", 1166
L0066:	inc     _j
	jmp     L005A
;
; if( checkForceBreak() ){ return ; }
;
	.dbg	line, "quarto.c", 1180
L000F:	jsr     _checkForceBreak
	tax
	beq     L0067
;
; }
;
	.dbg	line, "quarto.c", 1223
	rts
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1181
L0067:	inc     _koma_frame
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1183
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1185
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1186
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; if( koma_pos[i] == 0 ){
;
	.dbg	line, "quarto.c", 1189
	ldy     _i
	lda     _koma_pos,y
	bne     L0017
;
; if( koma_x[i] != 152 ){ koma_x[i]+=2; }
;
	.dbg	line, "quarto.c", 1190
	ldy     _i
	lda     _koma_x,y
	cmp     #$98
	beq     L0019
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L001B
	inx
L001B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 122 ){ koma_y[i]+=1; }
;
	.dbg	line, "quarto.c", 1191
L0019:	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	beq     L001C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L001E
	inx
L001E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 152 && koma_y[i] == 122 ){ 
;
	.dbg	line, "quarto.c", 1192
L001C:	ldy     _i
	lda     _koma_x,y
	cmp     #$98
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	jne     L0057
;
; koma_pos[i] = 1 ;
;
	.dbg	line, "quarto.c", 1193
	ldy     _i
	lda     #$01
;
; break ;
;
	.dbg	line, "quarto.c", 1194
	jmp     L0064
;
; else if( koma_pos[i] == 1 ){
;
	.dbg	line, "quarto.c", 1197
L0017:	ldy     _i
	lda     _koma_pos,y
	cmp     #$01
	bne     L0027
;
; if( koma_x[i] != 112 ){ koma_x[i]-=2; }
;
	.dbg	line, "quarto.c", 1198
	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	beq     L0029
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L002B
	inx
L002B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 144 ){ koma_y[i]+=1; }
;
	.dbg	line, "quarto.c", 1199
L0029:	ldy     _i
	lda     _koma_y,y
	cmp     #$90
	beq     L002C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L002E
	inx
L002E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 112 && koma_y[i] == 144  ){
;
	.dbg	line, "quarto.c", 1200
L002C:	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$90
	jne     L0057
;
; koma_pos[i] = 2 ;
;
	.dbg	line, "quarto.c", 1201
	ldy     _i
	lda     #$02
;
; break ;
;
	.dbg	line, "quarto.c", 1202
	jmp     L0064
;
; else if( koma_pos[i] == 2 ){
;
	.dbg	line, "quarto.c", 1205
L0027:	ldy     _i
	lda     _koma_pos,y
	cmp     #$02
	bne     L0037
;
; if( koma_x[i] != 72 ){ koma_x[i]-=2; }
;
	.dbg	line, "quarto.c", 1206
	ldy     _i
	lda     _koma_x,y
	cmp     #$48
	beq     L0039
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L003B
	inx
L003B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 122 ){ koma_y[i]-=1; }
;
	.dbg	line, "quarto.c", 1207
L0039:	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	beq     L003C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L003E
	inx
L003E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 72 && koma_y[i] == 122 ){
;
	.dbg	line, "quarto.c", 1208
L003C:	ldy     _i
	lda     _koma_x,y
	cmp     #$48
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	jne     L0057
;
; koma_pos[i] = 3 ;
;
	.dbg	line, "quarto.c", 1209
	ldy     _i
	lda     #$03
;
; break ;
;
	.dbg	line, "quarto.c", 1210
	jmp     L0064
;
; else if( koma_pos[i] == 3 ){
;
	.dbg	line, "quarto.c", 1213
L0037:	ldy     _i
	lda     _koma_pos,y
	cmp     #$03
	jne     L0057
;
; if( koma_x[i] != 112 ){ koma_x[i]+=2; }
;
	.dbg	line, "quarto.c", 1214
	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	beq     L0049
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L004B
	inx
L004B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 96 ){ koma_y[i]-=1; }
;
	.dbg	line, "quarto.c", 1215
L0049:	ldy     _i
	lda     _koma_y,y
	cmp     #$60
	beq     L004C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L004E
	inx
L004E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 112 && koma_y[i] == 96 ){
;
	.dbg	line, "quarto.c", 1216
L004C:	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$60
	jne     L0057
;
; koma_pos[i] = 0 ;
;
	.dbg	line, "quarto.c", 1217
	ldy     _i
	lda     #$00
L0064:	sta     _koma_pos,y
;
; for( i = 0; i < 2; i++ ){
;
	.dbg	line, "quarto.c", 1124
	inc     _i
	jmp     L0056

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ getStagePos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getStagePos: near

	.dbg	func, "getStagePos", "00", extern, "_getStagePos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1227
	jsr     pusha
;
; j = 0 ;
;
	.dbg	line, "quarto.c", 1229
	lda     #$00
	sta     _j
;
; if(posx >= 2 && posx <= 5){
;
	.dbg	line, "quarto.c", 1231
	ldy     #$01
	lda     (sp),y
	cmp     #$02
	bcc     L006B
	cmp     #$06
	bcs     L006B
;
; if( posy >= 10 && posy <= 12 ){ posx = 3 ;posy = 12 ; j++; x_index=0 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1232
	dey
	lda     (sp),y
	cmp     #$0A
	bcc     L0006
	cmp     #$0D
	bcs     L0006
	lda     #$03
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 6 && posx <= 9){
;
	.dbg	line, "quarto.c", 1234
L0006:	iny
L006B:	lda     (sp),y
	cmp     #$06
	bcc     L0078
	cmp     #$0A
	bcs     L0078
;
; if( posy >= 8 && posy <= 10 ){ posx = 7 ;posy = 10 ; j++; x_index=0 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1235
	dey
	lda     (sp),y
	cmp     #$08
	bcc     L0073
	cmp     #$0B
	bcs     L0073
	lda     #$07
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$02
	sta     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 7 ;posy = 14 ; j++; x_index=1 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1236
L0073:	lda     (sp),y
	cmp     #$0C
	bcc     L0012
	cmp     #$0F
	bcs     L0012
	lda     #$07
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 10 && posx <= 13){
;
	.dbg	line, "quarto.c", 1238
L0012:	iny
L0078:	lda     (sp),y
	cmp     #$0A
	bcc     L008A
	cmp     #$0E
	bcs     L008A
;
; if( posy >= 6 && posy <= 8 ){ posx = 11 ;posy = 8 ; j++; x_index=0 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1239
	dey
	lda     (sp),y
	cmp     #$06
	bcc     L0080
	cmp     #$09
	bcs     L0080
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$01
	sta     _y_index
;
; if( posy >= 10 && posy <= 12 ){ posx = 11 ;posy = 12 ; j++; x_index=1 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1240
L0080:	lda     (sp),y
	cmp     #$0A
	bcc     L0085
	cmp     #$0D
	bcs     L0085
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	lda     #$02
	sta     _y_index
;
; if( posy >= 14 && posy <= 16 ){ posx = 11 ;posy = 16 ; j++; x_index=2 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1241
L0085:	lda     (sp),y
	cmp     #$0E
	bcc     L0022
	cmp     #$11
	bcs     L0022
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 14 && posx <= 17){
;
	.dbg	line, "quarto.c", 1243
L0022:	iny
L008A:	lda     (sp),y
	cmp     #$0E
	jcc     L00A1
	cmp     #$12
	bcs     L00A1
;
; if( posy >= 4 && posy <= 7 ){ posx = 15 ;posy = 6 ; j++; x_index=0 ; y_index=0 ; }
;
	.dbg	line, "quarto.c", 1244
	dey
	lda     (sp),y
	cmp     #$04
	bcc     L0092
	cmp     #$08
	bcs     L0092
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	inc     _j
	tya
	sta     _x_index
	sta     _y_index
;
; if( posy >= 8 && posy <= 10 ){ posx = 15 ;posy = 10 ; j++; x_index=1 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1245
L0092:	lda     (sp),y
	cmp     #$08
	bcc     L0097
	cmp     #$0B
	bcs     L0097
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	sta     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 15 ;posy = 14 ; j++; x_index=2 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1246
L0097:	lda     (sp),y
	cmp     #$0C
	bcc     L009C
	cmp     #$0F
	bcs     L009C
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	sta     _y_index
;
; if( posy >= 16 && posy <= 18 ){ posx = 15 ;posy = 18 ; j++; x_index=3 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1247
L009C:	lda     (sp),y
	cmp     #$10
	bcc     L0036
	cmp     #$13
	bcs     L0036
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	sta     _y_index
;
; if(posx >= 18 && posx <= 21){
;
	.dbg	line, "quarto.c", 1249
L0036:	iny
L00A1:	lda     (sp),y
	cmp     #$12
	bcc     L00B3
	cmp     #$16
	bcs     L00B3
;
; if( posy >= 6 && posy <= 8 ){ posx = 19 ;posy = 8 ; j++; x_index=1 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1250
	dey
	lda     (sp),y
	cmp     #$06
	bcc     L00A9
	cmp     #$09
	bcs     L00A9
	lda     #$13
	iny
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	sty     _y_index
;
; if( posy >= 10 && posy <= 12 ){ posx = 19 ;posy = 12 ; j++; x_index=2 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1251
L00A9:	lda     (sp),y
	cmp     #$0A
	bcc     L00AE
	cmp     #$0D
	bcs     L00AE
	lda     #$13
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	lda     #$01
	sta     _y_index
;
; if( posy >= 14 && posy <= 16 ){ posx = 19 ;posy = 16 ; j++; x_index=3 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1252
L00AE:	lda     (sp),y
	cmp     #$0E
	bcc     L0046
	cmp     #$11
	bcs     L0046
	lda     #$13
	iny
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	lda     #$02
	sta     _y_index
;
; if(posx >= 22 && posx <= 25){
;
	.dbg	line, "quarto.c", 1254
L0046:	iny
L00B3:	lda     (sp),y
	cmp     #$16
	bcc     L00C0
	cmp     #$1A
	bcs     L00C0
;
; if( posy >= 8 && posy <= 10 ){ posx = 23 ;posy = 10 ; j++; x_index=2 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1255
	dey
	lda     (sp),y
	cmp     #$08
	bcc     L00BB
	cmp     #$0B
	bcs     L00BB
	lda     #$17
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	sty     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 23 ;posy = 14 ; j++; x_index=3 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1256
L00BB:	lda     (sp),y
	cmp     #$0C
	bcc     L0052
	cmp     #$0F
	bcs     L0052
	lda     #$17
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	lda     #$01
	sta     _y_index
;
; if(posx >= 26 && posx <= 29){
;
	.dbg	line, "quarto.c", 1258
L0052:	iny
L00C0:	lda     (sp),y
	cmp     #$1A
	bcc     L005A
	cmp     #$1E
	bcs     L005A
;
; if( posy >= 10 && posy <= 12 ){ posx = 27 ;posy = 12 ; j++;x_index=3 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1259
	dey
	lda     (sp),y
	cmp     #$0A
	bcc     L00C8
	cmp     #$0D
	bcs     L00C8
	lda     #$1B
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	sty     _y_index
;
; if( posy < 8 ){
;
	.dbg	line, "quarto.c", 1262
L005A:	ldy     #$00
L00C8:	lda     (sp),y
	cmp     #$08
	bcs     L00CA
;
; set_posh = 0x20 ;
;
	.dbg	line, "quarto.c", 1263
	lda     #$20
	sta     _set_posh
;
; set_posl = 0x00 + (0x20*posy) + posx ;
;
	.dbg	line, "quarto.c", 1264
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L0063
;
; }else{
;
	.dbg	line, "quarto.c", 1265
	jmp     L0063
;
; set_posh = 0x20 + posy / 8 ;
;
	.dbg	line, "quarto.c", 1266
L00CA:	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
	sta     _set_posh
;
; set_posl = 0x00 + (0x20*(posy%8)) + posx ;
;
	.dbg	line, "quarto.c", 1267
	lda     (sp),y
	ldx     #$00
	and     #$07
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
L0063:	sta     _set_posl
;
; set_posx = posx ;
;
	.dbg	line, "quarto.c", 1269
	lda     (sp),y
	sta     _set_posx
;
; set_posy = posy ;
;
	.dbg	line, "quarto.c", 1270
	dey
	lda     (sp),y
	sta     _set_posy
;
; }
;
	.dbg	line, "quarto.c", 1272
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ getAttrPos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getAttrPos: near

	.dbg	func, "getAttrPos", "00", extern, "_getAttrPos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1274
	jsr     pusha
;
; set_posh = 0x23 ;
;
	.dbg	line, "quarto.c", 1275
	lda     #$23
	sta     _set_posh
;
; set_posl = 0xC0 + (0x08*(posy/4)) + posx/4 ;
;
	.dbg	line, "quarto.c", 1276
	ldy     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$C0
	sta     ptr1
	iny
	lda     (sp),y
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _set_posl
;
; }
;
	.dbg	line, "quarto.c", 1278
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putStageKomaColor (unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putStageKomaColor: near

	.dbg	func, "putStageKomaColor", "00", extern, "_putStageKomaColor"
	.dbg	sym, "color", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1281
	jsr     pusha
;
; update_koma_color[0]=0x23|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1283
	lda     #$63
	sta     _update_koma_color
;
; update_koma_color[1]=0x00;
;
	.dbg	line, "quarto.c", 1284
	lda     #$00
	sta     _update_koma_color+1
;
; update_koma_color[2]=1;
;
	.dbg	line, "quarto.c", 1285
	lda     #$01
	sta     _update_koma_color+2
;
; update_koma_color[4]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1286
	lda     #$FF
	sta     _update_koma_color+4
;
; set_vram_update(update_koma_color);
;
	.dbg	line, "quarto.c", 1287
	lda     #<(_update_koma_color)
	ldx     #>(_update_koma_color)
	jsr     _set_vram_update
;
; for( i=0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1289
	lda     #$00
	sta     _i
L0039:	lda     _i
	cmp     #$04
	jcs     L0003
;
; update_koma_color[0]=0x23|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1290
	lda     #$63
	sta     _update_koma_color
;
; update_koma_color[1]=attr_pos[x_index][y_index][i];
;
	.dbg	line, "quarto.c", 1291
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_koma_color+1
;
; if( (x_index - y_index) % 2 == 0 ){
;
	.dbg	line, "quarto.c", 1292
	lda     _x_index
	jsr     pusha0
	lda     _y_index
	jsr     tossuba0
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	cpx     #$00
	jne     L0006
	cmp     #$00
	jne     L0006
;
; if( i == 0 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b01000000:0b10000000 ; tmp3 = 0b00111111 ;}
;
	.dbg	line, "quarto.c", 1293
	lda     _i
	bne     L003C
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0009
	dex
L0009:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L003A
	lda     #$40
	jmp     L003B
L003A:	lda     #$80
L003B:	sta     _tmp2
	lda     #$3F
	sta     _tmp3
;
; if( i == 1 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00010000:0b00100000 ; tmp3 = 0b11001111 ;}
;
	.dbg	line, "quarto.c", 1294
L003C:	lda     _i
	cmp     #$01
	bne     L003F
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L000D
	dex
L000D:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L003D
	lda     #$10
	jmp     L003E
L003D:	lda     #$20
L003E:	sta     _tmp2
	lda     #$CF
	sta     _tmp3
;
; if( i == 2 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000100:0b00001000 ; tmp3 = 0b11110011 ;}
;
	.dbg	line, "quarto.c", 1295
L003F:	lda     _i
	cmp     #$02
	bne     L0042
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0011
	dex
L0011:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0040
	lda     #$04
	jmp     L0041
L0040:	lda     #$08
L0041:	sta     _tmp2
	lda     #$F3
	sta     _tmp3
;
; if( i == 3 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000001:0b00000010 ; tmp3 = 0b11111100 ;}
;
	.dbg	line, "quarto.c", 1296
L0042:	lda     _i
	cmp     #$03
	jne     L007E
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0015
	dex
L0015:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0043
	lda     #$01
	jmp     L0044
L0043:	lda     #$02
L0044:	sta     _tmp2
	lda     #$FC
;
; }else{
;
	.dbg	line, "quarto.c", 1303
	jmp     L007F
;
; if( i == 0 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000100:0b00001000 ; tmp3 = 0b11110011 ;}
;
	.dbg	line, "quarto.c", 1304
L0006:	lda     _i
	bne     L0048
	tax
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L001C
	dex
L001C:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0046
	lda     #$04
	jmp     L0047
L0046:	lda     #$08
L0047:	sta     _tmp2
	lda     #$F3
	sta     _tmp3
;
; if( i == 1 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000001:0b00000010 ; tmp3 = 0b11111100 ;}
;
	.dbg	line, "quarto.c", 1305
L0048:	lda     _i
	cmp     #$01
	bne     L004B
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0020
	dex
L0020:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0049
	lda     #$01
	jmp     L004A
L0049:	lda     #$02
L004A:	sta     _tmp2
	lda     #$FC
	sta     _tmp3
;
; if( i == 2 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b01000000:0b10000000 ; tmp3 = 0b00111111 ;}
;
	.dbg	line, "quarto.c", 1306
L004B:	lda     _i
	cmp     #$02
	bne     L004E
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0024
	dex
L0024:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L004C
	lda     #$40
	jmp     L004D
L004C:	lda     #$80
L004D:	sta     _tmp2
	lda     #$3F
	sta     _tmp3
;
; if( i == 3 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00010000:0b00100000 ; tmp3 = 0b11001111 ;}
;
	.dbg	line, "quarto.c", 1307
L004E:	lda     _i
	cmp     #$03
	bne     L007E
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0028
	dex
L0028:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L004F
	lda     #$10
	jmp     L0050
L004F:	lda     #$20
L0050:	sta     _tmp2
	lda     #$CF
L007F:	sta     _tmp3
;
; if( color==0x00 ){ tmp2 = 0x00 ;}
;
	.dbg	line, "quarto.c", 1308
L007E:	ldx     #$00
	lda     (sp,x)
	bne     L0051
	sta     _tmp2
;
; tmp = tmp & tmp3;
;
	.dbg	line, "quarto.c", 1309
L0051:	lda     _tmp3
	and     _tmp
	sta     _tmp
;
; tmp = tmp | tmp2;
;
	.dbg	line, "quarto.c", 1310
	lda     _tmp2
	ora     _tmp
	sta     _tmp
;
; update_koma_color[3] = tmp ;
;
	.dbg	line, "quarto.c", 1311
	sta     _update_koma_color+3
;
; attr_stat[attr_pos[x_index][y_index][i]-0xC8] = tmp ;
;
	.dbg	line, "quarto.c", 1313
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L002C
	dex
L002C:	clc
	adc     #<(_attr_stat)
	sta     ptr1
	txa
	adc     #>(_attr_stat)
	sta     ptr1+1
	lda     _tmp
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1315
	jsr     _ppu_wait_frame
;
; for( i=0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1289
	inc     _i
	jmp     L0039
;
; }
;
	.dbg	line, "quarto.c", 1317
L0003:	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putKomaColor (unsigned char posx, unsigned char posy, unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putKomaColor: near

	.dbg	func, "putKomaColor", "00", extern, "_putKomaColor"
	.dbg	sym, "posx", "00", auto, 2
	.dbg	sym, "posy", "00", auto, 1
	.dbg	sym, "color", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1320
	jsr     pusha
;
; getAttrPos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1321
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _getAttrPos
;
; update_koma_color[0]=set_posh|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1322
	lda     _set_posh
	ora     #$40
	sta     _update_koma_color
;
; update_koma_color[1]=set_posl;
;
	.dbg	line, "quarto.c", 1323
	lda     _set_posl
	sta     _update_koma_color+1
;
; update_koma_color[2]=1;
;
	.dbg	line, "quarto.c", 1324
	lda     #$01
	sta     _update_koma_color+2
;
; update_koma_color[4]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1325
	lda     #$FF
	sta     _update_koma_color+4
;
; set_vram_update(update_koma_color);
;
	.dbg	line, "quarto.c", 1326
	lda     #<(_update_koma_color)
	ldx     #>(_update_koma_color)
	jsr     _set_vram_update
;
; update_koma_color[3] = color;
;
	.dbg	line, "quarto.c", 1328
	ldy     #$00
	lda     (sp),y
	sta     _update_koma_color+3
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1330
	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1332
	jmp     incsp3

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkPutPos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPutPos: near

	.dbg	func, "checkPutPos", "00", extern, "_checkPutPos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1334
	jsr     pusha
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1335
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _getStagePos
;
; if( j == 0 ){
;
	.dbg	line, "quarto.c", 1336
	ldx     #$00
	lda     _j
;
; return 1;
;
	.dbg	line, "quarto.c", 1337
	beq     L0006
;
; if( stage_stat[x_index][y_index][_KOMA_TYPE] != 0 ){
;
	.dbg	line, "quarto.c", 1339
	lda     _x_index
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _y_index
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	beq     L0001
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1340
L0006:	lda     #$01
;
; }
;
	.dbg	line, "quarto.c", 1343
L0001:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putStockKoma (unsigned char posx, unsigned char posy, unsigned char color, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putStockKoma: near

	.dbg	func, "putStockKoma", "00", extern, "_putStockKoma"
	.dbg	sym, "posx", "00", auto, 4
	.dbg	sym, "posy", "00", auto, 3
	.dbg	sym, "color", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1345
	jsr     pushax
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1346
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     _getStagePos
;
; update_koma[0]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1347
	lda     _set_posh
	ora     #$80
	sta     _update_koma
;
; update_koma[1]=set_posl;
;
	.dbg	line, "quarto.c", 1348
	lda     _set_posl
	sta     _update_koma+1
;
; update_koma[2]=4;
;
	.dbg	line, "quarto.c", 1349
	lda     #$04
	sta     _update_koma+2
;
; update_koma[7]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1350
	lda     _set_posh
	ora     #$80
	sta     _update_koma+7
;
; update_koma[8]=set_posl+1;
;
	.dbg	line, "quarto.c", 1351
	lda     _set_posl
	clc
	adc     #$01
	sta     _update_koma+8
;
; update_koma[9]=4;
;
	.dbg	line, "quarto.c", 1352
	lda     #$04
	sta     _update_koma+9
;
; update_koma[14]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1353
	lda     _set_posh
	ora     #$80
	sta     _update_koma+14
;
; update_koma[15]=set_posl+2;
;
	.dbg	line, "quarto.c", 1354
	lda     _set_posl
	clc
	adc     #$02
	sta     _update_koma+15
;
; update_koma[16]=4;
;
	.dbg	line, "quarto.c", 1355
	lda     #$04
	sta     _update_koma+16
;
; update_koma[(3+4)*3]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1356
	lda     #$FF
	sta     _update_koma+21
;
; set_vram_update(update_koma);
;
	.dbg	line, "quarto.c", 1357
	lda     #<(_update_koma)
	ldx     #>(_update_koma)
	jsr     _set_vram_update
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1359
	lda     #$00
	sta     _i
L0017:	lda     _i
	cmp     #$03
	bcs     L0005
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1360
	lda     #$00
	sta     _j
L0018:	lda     _j
	cmp     #$04
	bcs     L0019
;
; update_koma[7*i+j+3] = meta[4*(4*i+j)+2] ;
;
	.dbg	line, "quarto.c", 1361
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0014
	inx
	clc
L0014:	adc     #$03
	bcc     L0015
	inx
	clc
L0015:	adc     #<(_update_koma)
	sta     sreg
	txa
	adc     #>(_update_koma)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     shlax2
	clc
	adc     _j
	bcc     L0012
	inx
L0012:	jsr     aslax2
	clc
	adc     #$02
	bcc     L0016
	inx
	clc
L0016:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sreg),y
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1360
	inc     _j
	jmp     L0018
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1359
L0019:	inc     _i
	jmp     L0017
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1364
L0005:	jsr     _ppu_wait_frame
;
; if( posy == 26 ){
;
	.dbg	line, "quarto.c", 1367
	ldy     #$03
	lda     (sp),y
	cmp     #$1A
	bne     L000E
;
; tmp = color & 0b11110000 | 0b00000101 ;
;
	.dbg	line, "quarto.c", 1368
	dey
	lda     (sp),y
	and     #$F0
	ora     #$05
	sta     _tmp
;
; putKomaColor( posx, posy, tmp ) ;
;
	.dbg	line, "quarto.c", 1372
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _tmp
	jsr     _putKomaColor
;
; putKomaColor( posx, posy+2, color ) ;
;
	.dbg	line, "quarto.c", 1373
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	clc
	adc     #$02
;
; }else{
;
	.dbg	line, "quarto.c", 1374
	jmp     L001D
;
; putKomaColor( posx, posy, color) ;
;
	.dbg	line, "quarto.c", 1375
L000E:	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
L001D:	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _putKomaColor
;
; }
;
	.dbg	line, "quarto.c", 1377
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printBar (unsigned int adr, unsigned char action)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printBar: near

	.dbg	func, "printBar", "00", extern, "_printBar"
	.dbg	sym, "adr", "00", auto, 1
	.dbg	sym, "action", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1380
	jsr     pusha
;
; update_debug[0]=MSB(adr)|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1381
	ldy     #$02
	lda     (sp),y
	ora     #$40
	sta     _update_debug
;
; update_debug[1]=LSB(adr);
;
	.dbg	line, "quarto.c", 1382
	dey
	lda     (sp),y
	sta     _update_debug+1
;
; update_debug[2]=32;
;
	.dbg	line, "quarto.c", 1383
	lda     #$20
	sta     _update_debug+2
;
; update_debug[3+32]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1384
	lda     #$FF
	sta     _update_debug+35
;
; set_vram_update(update_debug);
;
	.dbg	line, "quarto.c", 1385
	lda     #<(_update_debug)
	ldx     #>(_update_debug)
	jsr     _set_vram_update
;
; if( action == 0 ){
;
	.dbg	line, "quarto.c", 1387
	ldy     #$00
	lda     (sp),y
	bne     L0019
;
; memfill( &update_debug[3], 0x00, 32 );
;
	.dbg	line, "quarto.c", 1388
	jsr     decsp3
	lda     #<(_update_debug+3)
	iny
	sta     (sp),y
	iny
	lda     #>(_update_debug+3)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$20
	jsr     _memfill
;
; }else{
;
	.dbg	line, "quarto.c", 1389
	jmp     L0005
;
; for( i=0; i<32; i++ ){
;
	.dbg	line, "quarto.c", 1390
L0019:	sty     _i
L001A:	lda     _i
	cmp     #$20
	bcs     L0005
;
; if( i == 0 ){ update_debug[i+3] = action == 1 ? 0xDD: 0xED ; }
;
	.dbg	line, "quarto.c", 1391
	ldx     #$00
	lda     _i
	bne     L001E
	clc
	adc     #$03
	bcc     L0016
	inx
	clc
L0016:	adc     #<(_update_debug)
	sta     ptr1
	txa
	adc     #>(_update_debug)
	sta     ptr1+1
	lda     (sp),y
	cmp     #$01
	bne     L001B
	lda     #$DD
	jmp     L0015
L001B:	lda     #$ED
;
; else if( i ==31 ){ update_debug[i+3] = action == 1 ? 0xDF: 0xEF ; }
;
	.dbg	line, "quarto.c", 1392
	jmp     L0015
L001E:	lda     _i
	cmp     #$1F
	bne     L0022
	clc
	adc     #$03
	bcc     L0017
	inx
	clc
L0017:	adc     #<(_update_debug)
	sta     ptr1
	txa
	adc     #>(_update_debug)
	sta     ptr1+1
	lda     (sp),y
	cmp     #$01
	bne     L001F
	lda     #$DF
	jmp     L0015
L001F:	lda     #$EF
;
; else { update_debug[i+3] = action == 1 ? 0xDE: 0xEE ; }
;
	.dbg	line, "quarto.c", 1393
	jmp     L0015
L0022:	lda     _i
	clc
	adc     #$03
	bcc     L0018
	inx
	clc
L0018:	adc     #<(_update_debug)
	sta     ptr1
	txa
	adc     #>(_update_debug)
	sta     ptr1+1
	lda     (sp),y
	cmp     #$01
	bne     L0023
	lda     #$DE
	jmp     L0015
L0023:	lda     #$EE
L0015:	sta     (ptr1),y
;
; for( i=0; i<32; i++ ){
;
	.dbg	line, "quarto.c", 1390
	inc     _i
	jmp     L001A
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1396
L0005:	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1397
	jmp     incsp3

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initBar: near

	.dbg	func, "initBar", "00", extern, "_initBar"

.segment	"CODE"

;
; printBar( NTADR_A(0,4), 0 );
;
	.dbg	line, "quarto.c", 1402
	ldx     #$20
	lda     #$80
	jsr     pushax
	lda     #$00
	jsr     _printBar
;
; printBar( NTADR_A(0,25), 0 );
;
	.dbg	line, "quarto.c", 1403
	ldx     #$23
	lda     #$20
	jsr     pushax
	lda     #$00
	jmp     _printBar

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ autoPrintBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_autoPrintBar: near

	.dbg	func, "autoPrintBar", "00", extern, "_autoPrintBar"

.segment	"CODE"

;
; printBar( NTADR_A(0,4), whichTurn==0?1:0 );
;
	.dbg	line, "quarto.c", 1408
	ldx     #$20
	lda     #$80
	jsr     pushax
	lda     _whichTurn
	bne     L0006
	lda     #$01
	jmp     L0007
L0006:	lda     #$00
L0007:	jsr     _printBar
;
; printBar( NTADR_A(0,25), whichTurn==0?0:1 );
;
	.dbg	line, "quarto.c", 1409
	ldx     #$23
	lda     #$20
	jsr     pushax
	lda     _whichTurn
	beq     L0009
	lda     #$01
L0009:	jmp     _printBar

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putKoma (unsigned char posx, unsigned char posy, unsigned char color, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putKoma: near

	.dbg	func, "putKoma", "00", extern, "_putKoma"
	.dbg	sym, "posx", "00", auto, 4
	.dbg	sym, "posy", "00", auto, 3
	.dbg	sym, "color", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1413
	jsr     pushax
;
; putStageKomaColor( color ) ;
;
	.dbg	line, "quarto.c", 1414
	ldy     #$02
	lda     (sp),y
	jsr     _putStageKomaColor
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1416
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     _getStagePos
;
; update_koma[0]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1417
	lda     _set_posh
	ora     #$80
	sta     _update_koma
;
; update_koma[1]=set_posl;
;
	.dbg	line, "quarto.c", 1418
	lda     _set_posl
	sta     _update_koma+1
;
; update_koma[2]=4;
;
	.dbg	line, "quarto.c", 1419
	lda     #$04
	sta     _update_koma+2
;
; update_koma[7]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1420
	lda     _set_posh
	ora     #$80
	sta     _update_koma+7
;
; update_koma[8]=set_posl+1;
;
	.dbg	line, "quarto.c", 1421
	lda     _set_posl
	clc
	adc     #$01
	sta     _update_koma+8
;
; update_koma[9]=4;
;
	.dbg	line, "quarto.c", 1422
	lda     #$04
	sta     _update_koma+9
;
; update_koma[14]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1423
	lda     _set_posh
	ora     #$80
	sta     _update_koma+14
;
; update_koma[15]=set_posl+2;
;
	.dbg	line, "quarto.c", 1424
	lda     _set_posl
	clc
	adc     #$02
	sta     _update_koma+15
;
; update_koma[16]=4;
;
	.dbg	line, "quarto.c", 1425
	lda     #$04
	sta     _update_koma+16
;
; update_koma[(3+4)*3]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1426
	lda     #$FF
	sta     _update_koma+21
;
; set_vram_update(update_koma);
;
	.dbg	line, "quarto.c", 1427
	lda     #<(_update_koma)
	ldx     #>(_update_koma)
	jsr     _set_vram_update
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1429
	lda     #$00
	sta     _i
L0040:	lda     _i
	cmp     #$03
	jcs     L0005
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1430
	lda     #$00
	sta     _j
L0041:	lda     _j
	cmp     #$04
	jcs     L0055
;
; update_koma[7*i+j+3] = meta[4*(4*i+j)+2] ;
;
	.dbg	line, "quarto.c", 1431
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0033
	inx
	clc
L0033:	adc     #$03
	bcc     L0034
	inx
	clc
L0034:	adc     #<(_update_koma)
	sta     sreg
	txa
	adc     #>(_update_koma)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     shlax2
	clc
	adc     _j
	bcc     L002C
	inx
L002C:	jsr     aslax2
	clc
	adc     #$02
	bcc     L0035
	inx
	clc
L0035:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sreg),y
;
; if( x_index != 0 && y_index != 0){
;
	.dbg	line, "quarto.c", 1436
	lda     _x_index
	jeq     L0054
	lda     _y_index
	jeq     L0054
;
; if( j == 0 ){
;
	.dbg	line, "quarto.c", 1437
	lda     _j
	jne     L0054
;
; if( ChooseKoma >= 4 && ChooseKoma <= 7 ){
;
	.dbg	line, "quarto.c", 1438
	lda     _ChooseKoma
	cmp     #$04
	bcc     L0048
	cmp     #$08
	bcs     L0048
;
; update_koma[7*i+j+3] = 0xD1+i ;
;
	.dbg	line, "quarto.c", 1440
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0036
	inx
	clc
L0036:	adc     #$03
	bcc     L0037
	inx
	clc
L0037:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D1
;
; }else{
;
	.dbg	line, "quarto.c", 1441
	jmp     L0059
;
; if( i == 1 ){ continue ; }
;
	.dbg	line, "quarto.c", 1443
L0048:	lda     _i
	cmp     #$01
	jeq     L0054
;
; if( ChooseKoma == 0 ){ update_koma[7*i+j+3] = i == 0 ? 0xAA : 0xAA+1 ;}
;
	.dbg	line, "quarto.c", 1444
	lda     _ChooseKoma
	bne     L004B
	tax
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0038
	inx
	clc
L0038:	adc     #$03
	bcc     L0039
	inx
	clc
L0039:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L0049
	lda     #$AA
	jmp     L0056
L0049:	lda     #$AB
L0056:	sta     (ptr1),y
;
; if( ChooseKoma == 1 ){ update_koma[7*i+j+3] = i == 0 ? 0xBA : 0xBA+1 ;}
;
	.dbg	line, "quarto.c", 1445
L004B:	lda     _ChooseKoma
	cmp     #$01
	bne     L004E
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003A
	inx
	clc
L003A:	adc     #$03
	bcc     L003B
	inx
	clc
L003B:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L004C
	lda     #$BA
	jmp     L0057
L004C:	lda     #$BB
L0057:	sta     (ptr1),y
;
; if( ChooseKoma == 2 ){ update_koma[7*i+j+3] = i == 0 ? 0xAC : 0xAC+1 ;}
;
	.dbg	line, "quarto.c", 1446
L004E:	lda     _ChooseKoma
	cmp     #$02
	bne     L0051
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003C
	inx
	clc
L003C:	adc     #$03
	bcc     L003D
	inx
	clc
L003D:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L004F
	lda     #$AC
	jmp     L0058
L004F:	lda     #$AD
L0058:	sta     (ptr1),y
;
; if( ChooseKoma == 3 ){ update_koma[7*i+j+3] = i == 0 ? 0xBC : 0xBC+1 ;}
;
	.dbg	line, "quarto.c", 1447
L0051:	lda     _ChooseKoma
	cmp     #$03
	bne     L0054
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003E
	inx
	clc
L003E:	adc     #$03
	bcc     L003F
	inx
	clc
L003F:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L0052
	lda     #$BC
	jmp     L0059
L0052:	lda     #$BD
L0059:	sta     (ptr1),y
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1430
L0054:	inc     _j
	jmp     L0041
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1429
L0055:	inc     _i
	jmp     L0040
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1453
L0005:	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1454
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printCursor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printCursor: near

	.dbg	func, "printCursor", "00", extern, "_printCursor"

.segment	"CODE"

;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1458
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( ChooseKoma*32+9, selBW==0? 28-frame%6 : 200+frame%6, spr, selBW==0 ? meta_pos1_reverse : meta_pos2  ) ;
;
	.dbg	line, "quarto.c", 1461
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$09
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	bne     L0008
	lda     #$1C
	jsr     pusha0
	lda     _frame
	jsr     pusha0
	lda     #$06
	jsr     tosumoda0
	jsr     tossubax
	jmp     L0005
L0008:	lda     _frame
	jsr     pusha0
	lda     #$06
	jsr     tosumoda0
	clc
	adc     #$C8
L0005:	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _selBW
	bne     L0006
	lda     #<(_meta_pos1_reverse)
	ldx     #>(_meta_pos1_reverse)
	jmp     L0007
L0006:	lda     #<(_meta_pos2)
	ldx     #>(_meta_pos2)
L0007:	jsr     _oam_meta_spr
	sta     _spr
;
; }
;
	.dbg	line, "quarto.c", 1465
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkLineQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkLineQuarto: near

	.dbg	func, "checkLineQuarto", "00", extern, "_checkLineQuarto"

.segment	"CODE"

;
; if ( q_black == 4 || q_white == 4 || q_high == 4 || q_low == 4 || 
;
	.dbg	line, "quarto.c", 1479
	lda     _q_black
	cmp     #$04
	beq     L0005
	lda     _q_white
	cmp     #$04
	beq     L0005
	lda     _q_high
	cmp     #$04
	beq     L0005
	lda     _q_low
	cmp     #$04
	beq     L0005
;
; q_square == 4 || q_circle == 4 || q_plane == 4 || q_dot == 4 ) {
;
	.dbg	line, "quarto.c", 1480
	lda     _q_square
	cmp     #$04
	beq     L0005
	lda     _q_circle
	cmp     #$04
	beq     L0005
	lda     _q_plane
	cmp     #$04
	beq     L0005
	lda     _q_dot
	cmp     #$04
	beq     L0005
	ldx     #$00
	txa
	rts
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1481
L0005:	ldx     #$00
	lda     #$01
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initQuartoFlg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initQuartoFlg: near

	.dbg	func, "initQuartoFlg", "00", extern, "_initQuartoFlg"

.segment	"CODE"

;
; q_black =0 ;
;
	.dbg	line, "quarto.c", 1487
	lda     #$00
	sta     _q_black
;
; q_white = 0 ;
;
	.dbg	line, "quarto.c", 1488
	sta     _q_white
;
; q_high = 0 ;
;
	.dbg	line, "quarto.c", 1489
	sta     _q_high
;
; q_low = 0 ;
;
	.dbg	line, "quarto.c", 1490
	sta     _q_low
;
; q_square = 0 ;
;
	.dbg	line, "quarto.c", 1491
	sta     _q_square
;
; q_circle = 0 ;
;
	.dbg	line, "quarto.c", 1492
	sta     _q_circle
;
; q_plane = 0 ;
;
	.dbg	line, "quarto.c", 1493
	sta     _q_plane
;
; q_dot = 0 ;
;
	.dbg	line, "quarto.c", 1494
	sta     _q_dot
;
; }
;
	.dbg	line, "quarto.c", 1495
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bitCalc (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bitCalc: near

	.dbg	func, "bitCalc", "00", extern, "_bitCalc"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1497
	jsr     pusha
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b10000000 ){ q_black++ ;}
;
	.dbg	line, "quarto.c", 1498
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$80
	beq     L0002
	inc     _q_black
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b01000000 ){ q_high++ ;}
;
	.dbg	line, "quarto.c", 1499
L0002:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$40
	beq     L0003
	inc     _q_high
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00100000 ){ q_square++ ;}
;
	.dbg	line, "quarto.c", 1500
L0003:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$20
	beq     L0004
	inc     _q_square
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00010000 ){ q_plane++ ;}
;
	.dbg	line, "quarto.c", 1501
L0004:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$10
	beq     L0005
	inc     _q_plane
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00001000 ){ q_white++ ;}
;
	.dbg	line, "quarto.c", 1502
L0005:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$08
	beq     L0006
	inc     _q_white
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00000100 ){ q_low++ ;}
;
	.dbg	line, "quarto.c", 1503
L0006:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$04
	beq     L0007
	inc     _q_low
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00000010 ){ q_circle++ ;}
;
	.dbg	line, "quarto.c", 1504
L0007:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$02
	beq     L0008
	inc     _q_circle
;
; calc = stage_stat[x][y][_KOMA_TYPE] ; if( calc & 0b00000001 ){ q_dot++ ;}
;
	.dbg	line, "quarto.c", 1505
L0008:	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _calc
	and     #$01
	beq     L0009
	inc     _q_dot
;
; }
;
	.dbg	line, "quarto.c", 1506
L0009:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkQuarto: near

	.dbg	func, "checkQuarto", "00", extern, "_checkQuarto"

.segment	"CODE"

;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1509
	lda     #$00
	sta     _i
L0042:	lda     _i
	cmp     #$04
	bcs     L0046
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1510
	jsr     _initQuartoFlg
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1511
	lda     #$00
	sta     _j
L0043:	lda     _j
	cmp     #$04
	bcs     L0007
;
; bitCalc(i,j) ;
;
	.dbg	line, "quarto.c", 1512
	lda     _i
	jsr     pusha
	lda     _j
	jsr     _bitCalc
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1511
	inc     _j
	jmp     L0043
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1514
L0007:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L0004
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1515
	lda     #$00
	sta     _j
	tax
L0044:	lda     _j
	cmp     #$04
	bcs     L0045
;
; quarto_line[j][0] = i ;
;
	.dbg	line, "quarto.c", 1516
	asl     a
	bcc     L003A
	inx
	clc
L003A:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	lda     _i
	ldy     #$00
	sta     (ptr1),y
;
; quarto_line[j][1] = j ;
;
	.dbg	line, "quarto.c", 1517
	ldx     #$00
	lda     _j
	asl     a
	bcc     L003B
	inx
	clc
L003B:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	iny
	lda     _j
	sta     (ptr1),y
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1515
	ldx     #$00
	inc     _j
	jmp     L0044
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1519
L0045:	lda     #$01
	rts
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1509
L0004:	inc     _i
	jmp     L0042
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1522
L0046:	lda     #$00
	sta     _j
L0047:	lda     _j
	cmp     #$04
	bcs     L0011
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1523
	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1524
	lda     #$00
	sta     _i
L0048:	lda     _i
	cmp     #$04
	bcs     L0015
;
; bitCalc(i,j) ;
;
	.dbg	line, "quarto.c", 1525
	jsr     pusha
	lda     _j
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1524
	inc     _i
	jmp     L0048
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1539
L0015:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L0012
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1540
	lda     #$00
	sta     _i
	tax
L0049:	lda     _i
	cmp     #$04
	bcs     L004A
;
; quarto_line[i][0] = i ;
;
	.dbg	line, "quarto.c", 1541
	asl     a
	bcc     L003C
	inx
	clc
L003C:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	lda     _i
	ldy     #$00
	sta     (ptr1),y
;
; quarto_line[i][1] = j ;
;
	.dbg	line, "quarto.c", 1542
	ldx     #$00
	lda     _i
	asl     a
	bcc     L003D
	inx
	clc
L003D:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	iny
	lda     _j
	sta     (ptr1),y
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1540
	ldx     #$00
	inc     _i
	jmp     L0049
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1544
L004A:	lda     #$01
	rts
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1522
L0012:	inc     _j
	jmp     L0047
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1549
L0011:	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1550
	lda     #$00
	sta     _i
L004B:	lda     _i
	cmp     #$04
	bcs     L001F
;
; bitCalc(i,i) ;
;
	.dbg	line, "quarto.c", 1551
	jsr     pusha
	lda     _i
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1550
	inc     _i
	jmp     L004B
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1553
L001F:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L0022
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1554
	lda     #$00
	sta     _i
	tax
L004C:	lda     _i
	cmp     #$04
	bcs     L004D
;
; quarto_line[i][0] = i ;
;
	.dbg	line, "quarto.c", 1555
	asl     a
	bcc     L003E
	inx
	clc
L003E:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	lda     _i
	ldy     #$00
	sta     (ptr1),y
;
; quarto_line[i][1] = i ;
;
	.dbg	line, "quarto.c", 1556
	ldx     #$00
	lda     _i
	asl     a
	bcc     L003F
	inx
	clc
L003F:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	iny
	lda     _i
	sta     (ptr1),y
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1554
	ldx     #$00
	inc     _i
	jmp     L004C
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1558
L004D:	lda     #$01
	rts
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1562
L0022:	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1563
	lda     #$00
	sta     _i
L004E:	lda     _i
	cmp     #$04
	bcs     L0029
;
; bitCalc(i,3-i) ;
;
	.dbg	line, "quarto.c", 1564
	jsr     pusha
	lda     #$03
	sec
	sbc     _i
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1563
	inc     _i
	jmp     L004E
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1566
L0029:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L002C
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1567
	lda     #$00
	sta     _i
	tax
L004F:	lda     _i
	cmp     #$04
	bcs     L0050
;
; quarto_line[i][0] = i ;
;
	.dbg	line, "quarto.c", 1568
	asl     a
	bcc     L0040
	inx
	clc
L0040:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	lda     _i
	ldy     #$00
	sta     (ptr1),y
;
; quarto_line[i][1] = 3-i ;
;
	.dbg	line, "quarto.c", 1569
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0041
	inx
	clc
L0041:	adc     #<(_quarto_line)
	tay
	txa
	adc     #>(_quarto_line)
	tax
	tya
	clc
	adc     #$01
	bcc     L0031
	inx
L0031:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     #$03
	sec
	sbc     _i
	ldy     #$00
	sta     (ptr1),y
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1567
	inc     _i
	jmp     L004F
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1571
L0050:	lda     #$01
	rts
;
; return 0 ;
;
	.dbg	line, "quarto.c", 1574
L002C:	ldx     #$00
	txa
;
; }
;
	.dbg	line, "quarto.c", 1575
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ moveKoma (unsigned char src_x, unsigned char src_y, unsigned char dst_x, unsigned char dst_y, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveKoma: near

	.dbg	func, "moveKoma", "00", extern, "_moveKoma"
	.dbg	sym, "src_x", "00", auto, 5
	.dbg	sym, "src_y", "00", auto, 4
	.dbg	sym, "dst_x", "00", auto, 3
	.dbg	sym, "dst_y", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1578
	jsr     pushax
;
; koma_x[0] = src_x % 2 == 0 ? src_x : src_x-1 ;
;
	.dbg	line, "quarto.c", 1580
	ldy     #$05
	lda     (sp),y
	and     #$01
	bne     L0024
	lda     (sp),y
	jmp     L0025
L0024:	lda     (sp),y
	sec
	sbc     #$01
L0025:	sta     _koma_x
;
; koma_y[0] = src_y % 2 == 0 ? src_y : src_y-1 ;
;
	.dbg	line, "quarto.c", 1581
	dey
	lda     (sp),y
	and     #$01
	bne     L0027
	lda     (sp),y
	jmp     L0028
L0027:	lda     (sp),y
	sec
	sbc     #$01
L0028:	sta     _koma_y
;
; dst_x = dst_x % 2 == 0 ? dst_x : dst_x-1 ;
;
	.dbg	line, "quarto.c", 1582
	dey
	lda     (sp),y
	and     #$01
	bne     L002A
	lda     (sp),y
	jmp     L002C
L002A:	lda     (sp),y
	sec
	sbc     #$01
L002C:	sta     (sp),y
;
; dst_y = dst_y % 2 == 0 ? dst_y : dst_y-1 ;
;
	.dbg	line, "quarto.c", 1583
	dey
	lda     (sp),y
	and     #$01
	bne     L002E
	lda     (sp),y
	jmp     L0030
L002E:	lda     (sp),y
	sec
	sbc     #$01
L0030:	sta     (sp),y
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1586
L0031:	inc     _koma_frame
;
; if( koma_frame % 5 != 0 ){ continue ; }
;
	.dbg	line, "quarto.c", 1587
	lda     _koma_frame
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	cpx     #$00
	bne     L0031
	cmp     #$00
	bne     L0031
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1589
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, meta ) ;
;
	.dbg	line, "quarto.c", 1590
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _oam_meta_spr
	sta     _spr
;
; if( koma_y[0] > dst_y ){ koma_y[0]-=2; }
;
	.dbg	line, "quarto.c", 1592
	lda     _koma_y
	ldy     #$02
	cmp     (sp),y
	bcc     L0032
	beq     L0032
	lda     _koma_y
	sec
	sbc     #$02
	sta     _koma_y
;
; else if( koma_y[0] < dst_y ){ koma_y[0]+=2; }
;
	.dbg	line, "quarto.c", 1593
	jmp     L0035
L0032:	lda     _koma_y
	cmp     (sp),y
	bcs     L0033
	tya
	clc
	adc     _koma_y
	sta     _koma_y
;
; else if( koma_x[0] > dst_x ){ koma_x[0]-=2; }
;
	.dbg	line, "quarto.c", 1594
	jmp     L0035
L0033:	lda     _koma_x
	iny
	cmp     (sp),y
	bcc     L0034
	beq     L0034
	lda     _koma_x
	sec
	sbc     #$02
;
; else if( koma_x[0] < dst_x ){ koma_x[0]+=2; }
;
	.dbg	line, "quarto.c", 1595
	jmp     L0022
L0034:	lda     _koma_x
	cmp     (sp),y
	bcs     L0035
	lda     #$02
	clc
	adc     _koma_x
L0022:	sta     _koma_x
;
; if( koma_x[0] == dst_x && koma_y[0] == dst_y ){ 
;
	.dbg	line, "quarto.c", 1597
L0035:	lda     _koma_x
	ldy     #$03
	cmp     (sp),y
	jne     L0031
	lda     _koma_y
	dey
	cmp     (sp),y
	jne     L0031
;
; x = dst_x ;
;
	.dbg	line, "quarto.c", 1602
	iny
	lda     (sp),y
	sta     _x
;
; y = dst_y ;
;
	.dbg	line, "quarto.c", 1603
	dey
	lda     (sp),y
	sta     _y
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1604
	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1605
	jmp     incsp6

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printTimerInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printTimerInit: near

	.dbg	func, "printTimerInit", "00", extern, "_printTimerInit"

.segment	"CODE"

;
; put_update_debug(28,24, 3, "   " );
;
	.dbg	line, "quarto.c", 1624
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _put_update_debug
;
; put_update_debug(28,5,  3, "   " );
;
	.dbg	line, "quarto.c", 1625
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S0005)
	ldx     #>(S0005)
	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printTimer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printTimer: near

	.dbg	func, "printTimer", "00", extern, "_printTimer"

.segment	"CODE"

;
; printTimerInit() ;
;
	.dbg	line, "quarto.c", 1629
	jsr     _printTimerInit
;
; if( timerSetCount != 0 ){
;
	.dbg	line, "quarto.c", 1630
	lda     _timerSetCount
	beq     L0002
;
; put_update_debug(28,whichTurn!=0?24:5, 3, itoa(timer, &strbuf[0], 10 ) );
;
	.dbg	line, "quarto.c", 1631
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     _whichTurn
	beq     L0005
	lda     #$18
	jmp     L0006
L0005:	lda     #$05
L0006:	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	jsr     decsp4
	lda     _timer
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(_strbuf)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_strbuf)
	sta     (sp),y
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jmp     _put_update_debug
;
; }
;
	.dbg	line, "quarto.c", 1633
L0002:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ animeKomaTurnOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animeKomaTurnOff: near

	.dbg	func, "animeKomaTurnOff", "00", extern, "_animeKomaTurnOff"

.segment	"CODE"

;
; bank_bg(0);
;
	.dbg	line, "quarto.c", 1653
	lda     #$00
	jsr     _bank_bg
;
; pal_bg((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 1654
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L0003
	inx
	clc
L0003:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _pal_bg

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ animeKomaTurn (unsigned char speed)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animeKomaTurn: near

	.dbg	func, "animeKomaTurn", "00", extern, "_animeKomaTurn"
	.dbg	sym, "speed", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1658
	jsr     pusha
;
; if( frame % 4 == 0 ){
;
	.dbg	line, "quarto.c", 1665
	lda     _frame
	and     #$03
	bne     L000A
;
; bank_bg(0);
;
	.dbg	line, "quarto.c", 1666
	jsr     _bank_bg
;
; pal_bg((char*)bg_palettes2[0]);
;
	.dbg	line, "quarto.c", 1667
	lda     _bg_palettes2
	ldx     _bg_palettes2+1
	jsr     _pal_bg
;
; if( frame % 4 == 1 ){
;
	.dbg	line, "quarto.c", 1669
L000A:	lda     _frame
	and     #$03
	cmp     #$01
	bne     L000B
;
; bank_bg(1);
;
	.dbg	line, "quarto.c", 1670
	jsr     _bank_bg
;
; pal_bg((char*)bg_palettes2[1]);
;
	.dbg	line, "quarto.c", 1671
	lda     _bg_palettes2+2
	ldx     _bg_palettes2+2+1
	jsr     _pal_bg
;
; if( frame % 4 == 2 ){
;
	.dbg	line, "quarto.c", 1674
L000B:	lda     _frame
	and     #$03
	cmp     #$02
	bne     L000C
;
; pal_bg((char*)bg_palettes2[2]);
;
	.dbg	line, "quarto.c", 1675
	lda     _bg_palettes2+4
	ldx     _bg_palettes2+4+1
	jsr     _pal_bg
;
; if( frame % 4 == 3 ){
;
	.dbg	line, "quarto.c", 1678
L000C:	lda     _frame
	and     #$03
	cmp     #$03
	bne     L0008
;
; pal_bg((char*)bg_palettes2[3]);
;
	.dbg	line, "quarto.c", 1679
	lda     _bg_palettes2+6
	ldx     _bg_palettes2+6+1
	jsr     _pal_bg
;
; delay(speed) ;
;
	.dbg	line, "quarto.c", 1682
L0008:	ldy     #$00
	lda     (sp),y
	jsr     _delay
;
; }
;
	.dbg	line, "quarto.c", 1687
	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initMsg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initMsg: near

	.dbg	func, "initMsg", "00", extern, "_initMsg"

.segment	"CODE"

;
; initBar() ;
;
	.dbg	line, "quarto.c", 1690
	jsr     _initBar
;
; put_update_debug(1,24, 14, (const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1692
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
	jsr     _put_update_debug
;
; put_update_debug(1,5, 14, (const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1693
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printMsg (unsigned char action)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printMsg: near

	.dbg	func, "printMsg", "00", extern, "_printMsg"
	.dbg	sym, "action", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1696
	jsr     pusha
;
; if( action == 0 ){
;
	.dbg	line, "quarto.c", 1697
	ldy     #$00
	lda     (sp),y
	bne     L000E
;
; put_update_debug(1,24, 14, whichTurn!=0?"P1:SELECT NEXT":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1698
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L0003
	lda     #<(S0006)
	ldx     #>(S0006)
	jmp     L0004
L0003:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L0004:	jsr     _put_update_debug
;
; put_update_debug(1,5, 14, whichTurn==0?"P2:SELECT NEXT":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1699
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	bne     L0005
	lda     #<(S0007)
	ldx     #>(S0007)
	jmp     L0006
L0005:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L0006:	jsr     _put_update_debug
;
; }else if( action == 1 ){
;
	.dbg	line, "quarto.c", 1701
	jmp     L0008
L000E:	lda     (sp),y
	cmp     #$01
	bne     L0008
;
; put_update_debug(1,24, 14, whichTurn!=0?"P1:PLAYING    ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1702
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L0009
	lda     #<(S0008)
	ldx     #>(S0008)
	jmp     L000A
L0009:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L000A:	jsr     _put_update_debug
;
; put_update_debug(1,5, 14, whichTurn==0?"P2:PLAYING    ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1703
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	bne     L000B
	lda     #<(S0009)
	ldx     #>(S0009)
	jmp     L000C
L000B:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L000C:	jsr     _put_update_debug
;
; printTimer() ;
;
	.dbg	line, "quarto.c", 1704
	jsr     _printTimer
;
; autoPrintBar();
;
	.dbg	line, "quarto.c", 1712
L0008:	jsr     _autoPrintBar
;
; }
;
	.dbg	line, "quarto.c", 1715
	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initLife (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initLife: near

	.dbg	func, "initLife", "00", extern, "_initLife"

.segment	"CODE"

;
; put_update_debug(25,23, 3, "   " );
;
	.dbg	line, "quarto.c", 1718
	jsr     decsp3
	lda     #$19
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     _put_update_debug
;
; put_update_debug(25,6, 3,  "   " );
;
	.dbg	line, "quarto.c", 1719
	jsr     decsp3
	lda     #$19
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     #<(S000B)
	ldx     #>(S000B)
	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printLife (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printLife: near

	.dbg	func, "printLife", "00", extern, "_printLife"

.segment	"CODE"

;
; put_update_debug(25,23, 3, err[1] == 0 ? "   ": err[1] == 1 ?"X  ": err[1] == 2 ?"XX ": "XXX" );
;
	.dbg	line, "quarto.c", 1723
	jsr     decsp3
	lda     #$19
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _err+1
	bne     L000E
	lda     #<(S000C)
	ldx     #>(S000C)
	jmp     L0007
L000E:	lda     _err+1
	cmp     #$01
	bne     L000F
	lda     #<(S000D)
	ldx     #>(S000D)
	jmp     L0007
L000F:	lda     _err+1
	cmp     #$02
	bne     L0006
	lda     #<(S000E)
	ldx     #>(S000E)
	jmp     L0007
L0006:	lda     #<(S000F)
	ldx     #>(S000F)
L0007:	jsr     _put_update_debug
;
; put_update_debug(25,6, 3, err[0] == 0 ? "   ": err[0] == 1 ?"X  ": err[0] == 2 ?"XX ": "XXX" );
;
	.dbg	line, "quarto.c", 1724
	jsr     decsp3
	lda     #$19
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _err
	bne     L0010
	lda     #<(S0010)
	ldx     #>(S0010)
	jmp     L000D
L0010:	lda     _err
	cmp     #$01
	bne     L0011
	lda     #<(S0011)
	ldx     #>(S0011)
	jmp     L000D
L0011:	lda     _err
	cmp     #$02
	bne     L000C
	lda     #<(S0012)
	ldx     #>(S0012)
	jmp     L000D
L000C:	lda     #<(S0013)
	ldx     #>(S0013)
L000D:	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loseAnime (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loseAnime: near

	.dbg	func, "loseAnime", "00", extern, "_loseAnime"

.segment	"CODE"

;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1728
	jsr     _oam_clear
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 1729
	jsr     _ppu_off
;
; delay(60) ;
;
	.dbg	line, "quarto.c", 1730
	lda     #$3C
	jsr     _delay
;
; bank_bg(1);
;
	.dbg	line, "quarto.c", 1732
	lda     #$01
	jsr     _bank_bg
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1733
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)jeesus);
;
	.dbg	line, "quarto.c", 1734
	lda     #<(_jeesus)
	ldx     #>(_jeesus)
	jsr     _vram_unrle
;
; pal_bg(palette_jeesus);
;
	.dbg	line, "quarto.c", 1735
	lda     #<(_palette_jeesus)
	ldx     #>(_palette_jeesus)
	jsr     _pal_bg
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 1736
	jsr     _ppu_on_all
;
; music_play(3) ;
;
	.dbg	line, "quarto.c", 1738
	lda     #$03
	jsr     _music_play
;
; delay(90);
;
	.dbg	line, "quarto.c", 1739
	lda     #$5A
	jsr     _delay
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 1740
	jsr     _music_stop
;
; bank_bg(0);
;
	.dbg	line, "quarto.c", 1741
	lda     #$00
	jsr     _bank_bg
;
; reset() ;
;
	.dbg	line, "quarto.c", 1743
	jmp     _reset

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procSayQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procSayQuarto: near

	.dbg	func, "procSayQuarto", "00", extern, "_procSayQuarto"

.segment	"CODE"

;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1747
	jsr     _oam_clear
;
; initMsg() ;
;
	.dbg	line, "quarto.c", 1748
	jsr     _initMsg
;
; initLife() ;
;
	.dbg	line, "quarto.c", 1749
	jsr     _initLife
;
; printTimerInit() ;
;
	.dbg	line, "quarto.c", 1750
	jsr     _printTimerInit
;
; music_play(2) ;
;
	.dbg	line, "quarto.c", 1752
	lda     #$02
	jsr     _music_play
;
; for( i=0 ; i< 20; i++ ){
;
	.dbg	line, "quarto.c", 1753
	lda     #$00
	sta     _i
L0006:	lda     _i
	cmp     #$14
	bcs     L0003
;
; animeKomaTurn(2) ;
;
	.dbg	line, "quarto.c", 1754
	lda     #$02
	jsr     _animeKomaTurn
;
; frame++ ;
;
	.dbg	line, "quarto.c", 1755
	inc     _frame
;
; for( i=0 ; i< 20; i++ ){
;
	.dbg	line, "quarto.c", 1753
	inc     _i
	jmp     L0006
;
; animeKomaTurnOff() ;
;
	.dbg	line, "quarto.c", 1757
L0003:	jsr     _animeKomaTurnOff
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1758
	lda     #$14
	jsr     _delay
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 1759
	jmp     _music_stop

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ timerSet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_timerSet: near

	.dbg	func, "timerSet", "00", extern, "_timerSet"

.segment	"CODE"

;
; if( frame % 50 == 0 && autoChoose!=1 && timerSetCount != 0 ){
;
	.dbg	line, "quarto.c", 1763
	lda     _frame
	jsr     pusha0
	lda     #$32
	jsr     tosumoda0
	cpx     #$00
	bne     L0008
	cmp     #$00
	bne     L0008
	lda     _autoChoose
	cmp     #$01
	beq     L0008
	lda     _timerSetCount
	bne     L0009
L0008:	rts
;
; timer--;
;
	.dbg	line, "quarto.c", 1764
L0009:	dec     _timer
;
; printTimer() ;
;
	.dbg	line, "quarto.c", 1765
	jsr     _printTimer
;
; if( timer == 0 ){
;
	.dbg	line, "quarto.c", 1766
	lda     _timer
	bne     L000A
;
; autoChoose=1;
;
	.dbg	line, "quarto.c", 1767
	lda     #$01
	sta     _autoChoose
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 1768
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; timer = timerSetCount ;
;
	.dbg	line, "quarto.c", 1771
	lda     _timerSetCount
	sta     _timer
;
; frame=0 ;
;
	.dbg	line, "quarto.c", 1773
L000A:	lda     #$00
	sta     _frame
;
; }
;
	.dbg	line, "quarto.c", 1775
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ eventChooseButtonA (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eventChooseButtonA: near

	.dbg	func, "eventChooseButtonA", "00", extern, "_eventChooseButtonA"

.segment	"CODE"

;
; koma_exist[selBW][ChooseKoma] = 0 ;
;
	.dbg	line, "quarto.c", 1778
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     #$00
	sta     (ptr1),y
;
; putStockKoma((ChooseKoma*4),selBW==0?0:26, selBW==0?0x00:0xFF,  (unsigned char*)koma_list[0][0][ChooseKoma]) ;
;
	.dbg	line, "quarto.c", 1779
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	beq     L0013
	lda     #$1A
L0013:	dey
	sta     (sp),y
	lda     _selBW
	beq     L0015
	lda     #$FF
L0015:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0010
	inx
	clc
L0010:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1781
	jsr     _oam_clear
;
; x = ChooseKoma*32 ;
;
	.dbg	line, "quarto.c", 1783
	lda     _ChooseKoma
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _x
;
; y = 10+selBW*180 ;
;
	.dbg	line, "quarto.c", 1784
	lda     _selBW
	jsr     pusha0
	lda     #$B4
	jsr     tosumula0
	clc
	adc     #$0A
	sta     _y
;
; moveKoma( x, y, 24, whichTurn==0?60:146, (unsigned char*)koma_list[0][selBW==0?1:0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 1785
	jsr     decsp4
	lda     _x
	ldy     #$03
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     _whichTurn
	bne     L0016
	lda     #$3C
	jmp     L0017
L0016:	lda     #$92
L0017:	dey
	sta     (sp),y
	ldx     #$00
	lda     _selBW
	bne     L0018
	lda     #$01
	jmp     L000A
L0018:	txa
L000A:	jsr     aslax4
	clc
	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _moveKoma
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1787
	jsr     _ppu_wait_frame
;
; sfx_play(5,1);
;
	.dbg	line, "quarto.c", 1789
	lda     #$05
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; whichTurn = whichTurn == 0? 1:0 ;
;
	.dbg	line, "quarto.c", 1791
	lda     _whichTurn
	bne     L0019
	lda     #$01
	jmp     L001A
L0019:	lda     #$00
L001A:	sta     _whichTurn
;
; timer = timerSetCount ;
;
	.dbg	line, "quarto.c", 1792
	lda     _timerSetCount
	sta     _timer
;
; printMsg(1);
;
	.dbg	line, "quarto.c", 1794
	lda     #$01
	jmp     _printMsg

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procChooseKoma (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procChooseKoma: near

	.dbg	func, "procChooseKoma", "00", extern, "_procChooseKoma"

.segment	"CODE"

;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 1798
	lda     #$00
	jsr     _printMsg
;
; printLife() ;
;
	.dbg	line, "quarto.c", 1799
	jsr     _printLife
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1807
L0002:	jsr     _printCursor
;
; timerSet() ;
;
	.dbg	line, "quarto.c", 1808
	jsr     _timerSet
;
; pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ;
;
	.dbg	line, "quarto.c", 1811
	lda     _whichTurn
	bne     L005F
	lda     _p1only
	cmp     #$01
	bne     L0060
L005F:	lda     #$00
	jmp     L0061
L0060:	lda     #$01
L0061:	jsr     _pad_poll
	sta     _pad
;
; if( isVsCPU != 0 && whichTurn==0 ){
;
	.dbg	line, "quarto.c", 1812
	lda     _isVsCPU
	beq     L0065
	lda     _whichTurn
	bne     L0065
;
; pad=0 ;
;
	.dbg	line, "quarto.c", 1813
	sta     _pad
;
; autoChoose = 1 ;
;
	.dbg	line, "quarto.c", 1814
	lda     #$01
	sta     _autoChoose
;
; if(pad&PAD_LEFT){
;
	.dbg	line, "quarto.c", 1817
L0065:	lda     _pad
	and     #$02
	beq     L006D
;
; ChooseKoma = ChooseKoma <= 0 ? 7 : --ChooseKoma ;
;
	.dbg	line, "quarto.c", 1819
	lda     _ChooseKoma
	bne     L0066
	lda     #$07
	jmp     L0067
L0066:	dec     _ChooseKoma
	lda     _ChooseKoma
L0067:	sta     _ChooseKoma
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1820
	jsr     _printCursor
;
; for( ;pad&PAD_LEFT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1821
L0010:	lda     _pad
	and     #$02
	beq     L006D
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1822
	jsr     _ppu_wait_frame
;
; frame++ ;
;
	.dbg	line, "quarto.c", 1823
	inc     _frame
;
; timerSet() ;
;
	.dbg	line, "quarto.c", 1824
	jsr     _timerSet
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1825
	jsr     _printCursor
;
; if( autoChoose==1){break ;}
;
	.dbg	line, "quarto.c", 1826
	lda     _autoChoose
	cmp     #$01
	beq     L006D
;
; for( ;pad&PAD_LEFT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1821
	lda     _whichTurn
	bne     L006A
	lda     _p1only
	cmp     #$01
	bne     L006B
L006A:	lda     #$00
	jmp     L006C
L006B:	lda     #$01
L006C:	jsr     _pad_poll
	sta     _pad
	jmp     L0010
;
; if(pad&PAD_RIGHT){
;
	.dbg	line, "quarto.c", 1846
L006D:	lda     _pad
	and     #$01
	beq     L0075
;
; ChooseKoma = ChooseKoma >= 7 ? 0 : ++ChooseKoma ;
;
	.dbg	line, "quarto.c", 1848
	lda     _ChooseKoma
	cmp     #$07
	bcc     L006E
	lda     #$00
	jmp     L006F
L006E:	inc     _ChooseKoma
	lda     _ChooseKoma
L006F:	sta     _ChooseKoma
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1849
	jsr     _printCursor
;
; for( ;pad&PAD_RIGHT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1850
L001C:	lda     _pad
	and     #$01
	beq     L0075
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1851
	jsr     _ppu_wait_frame
;
; frame++ ;
;
	.dbg	line, "quarto.c", 1852
	inc     _frame
;
; timerSet() ;
;
	.dbg	line, "quarto.c", 1853
	jsr     _timerSet
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1854
	jsr     _printCursor
;
; if( autoChoose==1){break ;}
;
	.dbg	line, "quarto.c", 1855
	lda     _autoChoose
	cmp     #$01
	beq     L0075
;
; for( ;pad&PAD_RIGHT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1850
	lda     _whichTurn
	bne     L0072
	lda     _p1only
	cmp     #$01
	bne     L0073
L0072:	lda     #$00
	jmp     L0074
L0073:	lda     #$01
L0074:	jsr     _pad_poll
	sta     _pad
	jmp     L001C
;
; if(pad&PAD_UP){
;
	.dbg	line, "quarto.c", 1874
L0075:	lda     _pad
	and     #$08
	beq     L0076
;
; selBW = 0 ;
;
	.dbg	line, "quarto.c", 1875
	lda     #$00
	sta     _selBW
;
; if(pad&PAD_DOWN){
;
	.dbg	line, "quarto.c", 1878
L0076:	lda     _pad
	and     #$04
	beq     L0077
;
; selBW = 1 ;
;
	.dbg	line, "quarto.c", 1879
	lda     #$01
	sta     _selBW
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 1883
L0077:	lda     _pad
	and     #$80
	beq     L007D
;
; if( koma_exist[selBW][ChooseKoma] == 0 ){
;
	.dbg	line, "quarto.c", 1884
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     (ptr1),y
	bne     L0028
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 1885
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1887
L0029:	lda     _pad
	and     #$80
	jeq     L0002
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1888
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1887
	lda     _whichTurn
	bne     L007A
	lda     _p1only
	cmp     #$01
	bne     L007B
L007A:	lda     #$00
	jmp     L007C
L007B:	lda     #$01
L007C:	jsr     _pad_poll
	sta     _pad
	jmp     L0029
;
; eventChooseButtonA() ;
;
	.dbg	line, "quarto.c", 1893
L0028:	jmp     _eventChooseButtonA
;
; if(pad&PAD_SELECT){
;
	.dbg	line, "quarto.c", 1898
L007D:	lda     _pad
	and     #$20
	beq     L0085
;
; bgpl++ ;
;
	.dbg	line, "quarto.c", 1899
	inc     _bgpl
;
; bgpl = bgpl > 3 ? 0 : bgpl ;
;
	.dbg	line, "quarto.c", 1900
	lda     _bgpl
	cmp     #$04
	bcc     L007E
	lda     #$00
	jmp     L007F
L007E:	lda     _bgpl
L007F:	sta     _bgpl
;
; pal_spr((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 1903
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L005B
	inx
	clc
L005B:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; pal_bg((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 1904
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L005C
	inx
	clc
L005C:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; for( ; pad&PAD_SELECT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1906
L0034:	lda     _pad
	and     #$20
	beq     L0085
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1907
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_SELECT ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1906
	lda     _whichTurn
	bne     L0082
	lda     _p1only
	cmp     #$01
	bne     L0083
L0082:	lda     #$00
	jmp     L0084
L0083:	lda     #$01
L0084:	jsr     _pad_poll
	sta     _pad
	jmp     L0034
;
; if(pad&PAD_START){
;
	.dbg	line, "quarto.c", 1912
L0085:	lda     _pad
	and     #$10
	beq     L008B
;
; procSayQuarto() ;
;
	.dbg	line, "quarto.c", 1913
	jsr     _procSayQuarto
;
; if( checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1915
	jsr     _checkQuarto
	cmp     #$01
	bne     L003D
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 1916
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 1917
	rts
;
; sfx_play(3,1);
;
	.dbg	line, "quarto.c", 1919
L003D:	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; music_play(game_music) ;
;
	.dbg	line, "quarto.c", 1920
	lda     _game_music
	jsr     _music_play
;
; err[whichTurn]++ ;
;
	.dbg	line, "quarto.c", 1921
	lda     #<(_err)
	ldx     #>(_err)
	clc
	adc     _whichTurn
	bcc     L003F
	inx
L003F:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if( err[whichTurn] == 3 ){
;
	.dbg	line, "quarto.c", 1922
	ldy     _whichTurn
	lda     _err,y
	cmp     #$03
	bne     L0040
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 1923
	jsr     _loseAnime
;
; printLife() ;
;
	.dbg	line, "quarto.c", 1927
L0040:	jsr     _printLife
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 1928
	lda     #$00
	jsr     _printMsg
;
; for( ; pad&PAD_START ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1929
L0042:	lda     _pad
	and     #$10
	jeq     L0002
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1930
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_START ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 1929
	lda     _whichTurn
	bne     L0088
	lda     _p1only
	cmp     #$01
	bne     L0089
L0088:	lda     #$00
	jmp     L008A
L0089:	lda     #$01
L008A:	jsr     _pad_poll
	sta     _pad
	jmp     L0042
;
; if( autoChoose==1){
;
	.dbg	line, "quarto.c", 1934
L008B:	lda     _autoChoose
	cmp     #$01
	jne     L004A
;
; if( koma_exist[selBW][ChooseKoma] == 0 ){
;
	.dbg	line, "quarto.c", 1936
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     (ptr1),y
	bne     L0055
;
; isForceFin = 1 ;
;
	.dbg	line, "quarto.c", 1937
	lda     #$01
	sta     _isForceFin
;
; for( i=0; i<2; i++){
;
	.dbg	line, "quarto.c", 1938
	lda     #$00
	sta     _i
L008C:	lda     _i
	cmp     #$02
	bcs     L0090
;
; for( j=0; j<8; j++){
;
	.dbg	line, "quarto.c", 1939
	lda     #$00
	sta     _j
L008D:	lda     _j
	cmp     #$08
	bcs     L008F
;
; if( koma_exist[i][j] == 1 ){
;
	.dbg	line, "quarto.c", 1940
	ldx     #$00
	lda     _i
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _j
	lda     (ptr1),y
	cmp     #$01
	bne     L008E
;
; selBW=i;
;
	.dbg	line, "quarto.c", 1941
	lda     _i
	sta     _selBW
;
; ChooseKoma=j;
;
	.dbg	line, "quarto.c", 1942
	lda     _j
	sta     _ChooseKoma
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1943
	jsr     _printCursor
;
; isForceFin=0 ;
;
	.dbg	line, "quarto.c", 1944
	lda     #$00
	sta     _isForceFin
;
; for( j=0; j<8; j++){
;
	.dbg	line, "quarto.c", 1939
L008E:	inc     _j
	jmp     L008D
;
; for( i=0; i<2; i++){
;
	.dbg	line, "quarto.c", 1938
L008F:	inc     _i
	jmp     L008C
;
; if( isForceFin == 1 ){
;
	.dbg	line, "quarto.c", 1951
L0090:	lda     _isForceFin
	cmp     #$01
	bne     L0055
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 1952
	jmp     _loseAnime
;
; eventChooseButtonA() ;
;
	.dbg	line, "quarto.c", 1957
L0055:	jmp     _eventChooseButtonA
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1962
L004A:	jsr     _ppu_wait_frame
;
; frame++;
;
	.dbg	line, "quarto.c", 1963
	inc     _frame
;
; while(1)
;
	.dbg	line, "quarto.c", 1805
	jmp     L0002

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ preQuartoCheck (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_preQuartoCheck: near

	.dbg	func, "preQuartoCheck", "00", extern, "_preQuartoCheck"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1967
	jsr     pusha
;
; tmp3 = 0 ;
;
	.dbg	line, "quarto.c", 1968
	lda     #$00
	sta     _tmp3
;
; stage_stat[x][y][_KOMA_TYPE] = selBW==0 ? koma_type[1+ChooseKoma] : koma_type[1+ChooseKoma+8] ;
;
	.dbg	line, "quarto.c", 1969
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     sreg
	sta     sreg
	txa
	adc     sreg+1
	sta     sreg+1
	ldx     #$00
	lda     _selBW
	bne     L0010
	lda     _ChooseKoma
	clc
	adc     #$01
	jmp     L0017
L0010:	lda     _ChooseKoma
	clc
	adc     #$01
	bcc     L000F
	inx
	clc
L000F:	adc     #$08
L0017:	bcc     L0006
	inx
L0006:	sta     ptr1
	txa
	clc
	adc     #>(_koma_type)
	sta     ptr1+1
	ldy     #<(_koma_type)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; stage_stat[x][y][_CHOOSE_KOMA] = ChooseKoma ;
;
	.dbg	line, "quarto.c", 1970
	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     _ChooseKoma
	sta     (ptr1),y
;
; stage_stat[x][y][_SEL_BW] = selBW ;
;
	.dbg	line, "quarto.c", 1971
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$02
	lda     _selBW
	sta     (ptr1),y
;
; if( checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1972
	jsr     _checkQuarto
	cmp     #$01
;
; }else{
;
	.dbg	line, "quarto.c", 1974
	beq     L000E
;
; tmp3 = 0 ;
;
	.dbg	line, "quarto.c", 1975
	lda     #$00
L000E:	sta     _tmp3
;
; stage_stat[x][y][_KOMA_TYPE] = 0 ;
;
	.dbg	line, "quarto.c", 1977
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; stage_stat[x][y][_CHOOSE_KOMA] = 0 ;
;
	.dbg	line, "quarto.c", 1978
	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     #$00
	sta     (ptr1),y
;
; stage_stat[x][y][_SEL_BW] = 0 ;
;
	.dbg	line, "quarto.c", 1979
	lda     (sp),y
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$02
	lda     #$00
	sta     (ptr1),y
;
; return tmp3 ;
;
	.dbg	line, "quarto.c", 1980
	tax
	lda     _tmp3
;
; }
;
	.dbg	line, "quarto.c", 1981
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkReach (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkReach: near

	.dbg	func, "checkReach", "00", extern, "_checkReach"

.segment	"CODE"

;
; for( k = 0; k < 4; k++ ){
;
	.dbg	line, "quarto.c", 1985
	lda     #$00
	sta     _k
L0016:	lda     _k
	cmp     #$04
	jcs     L001B
;
; tmp = 0 ; // X軸3連チェック用.
;
	.dbg	line, "quarto.c", 1986
	lda     #$00
	sta     _tmp
;
; tmp2 = 0 ; // Y軸3連チェック用.
;
	.dbg	line, "quarto.c", 1987
	sta     _tmp2
;
; for( l = 0; l < 4; l++ ){
;
	.dbg	line, "quarto.c", 1988
	sta     _l
L0017:	lda     _l
	cmp     #$04
	jcs     L001A
;
; if( stage_stat[k][l][_KOMA_TYPE] != 0 ){
;
	.dbg	line, "quarto.c", 1990
	lda     _k
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _l
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	beq     L0018
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 1991
	inc     _tmp
;
; if( tmp >= 3 ){
;
	.dbg	line, "quarto.c", 1992
	lda     _tmp
	cmp     #$03
	bcc     L0018
;
; reach = 1 ;
;
	.dbg	line, "quarto.c", 1993
	lda     #$01
	sta     _reach
;
; if( stage_stat[l][k][_KOMA_TYPE] != 0 ){
;
	.dbg	line, "quarto.c", 1997
L0018:	lda     _l
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	beq     L0019
;
; tmp2++ ;
;
	.dbg	line, "quarto.c", 1998
	inc     _tmp2
;
; if( tmp2 >= 3 ){
;
	.dbg	line, "quarto.c", 1999
	lda     _tmp2
	cmp     #$03
	bcc     L0019
;
; reach = 1 ;
;
	.dbg	line, "quarto.c", 2000
	lda     #$01
	sta     _reach
;
; for( l = 0; l < 4; l++ ){
;
	.dbg	line, "quarto.c", 1988
L0019:	inc     _l
	jmp     L0017
;
; for( k = 0; k < 4; k++ ){
;
	.dbg	line, "quarto.c", 1985
L001A:	inc     _k
	jmp     L0016
;
; tmp = 0 ;
;
	.dbg	line, "quarto.c", 2006
L001B:	lda     #$00
	sta     _tmp
;
; tmp2 = 0 ;
;
	.dbg	line, "quarto.c", 2007
	sta     _tmp2
;
; for( k = 0; k < 4; k++ ){
;
	.dbg	line, "quarto.c", 2008
	sta     _k
	tax
L001C:	lda     _k
	cmp     #$04
	bcc     L001F
;
; }
;
	.dbg	line, "quarto.c", 2025
	rts
;
; if( stage_stat[k][k][_KOMA_TYPE] != 0 ){
;
	.dbg	line, "quarto.c", 2010
L001F:	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _k
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	beq     L001D
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 2011
	inc     _tmp
;
; if( tmp >= 3 ){
;
	.dbg	line, "quarto.c", 2012
	lda     _tmp
	cmp     #$03
	bcc     L001D
;
; reach = 1 ;
;
	.dbg	line, "quarto.c", 2013
	lda     #$01
	sta     _reach
;
; if( stage_stat[k][3-k][_KOMA_TYPE] != 0 ){
;
	.dbg	line, "quarto.c", 2017
L001D:	lda     _k
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	lda     #$03
	sec
	sbc     _k
	pha
	lda     #$00
	sbc     #$00
	tax
	pla
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	beq     L001E
;
; tmp2++ ;
;
	.dbg	line, "quarto.c", 2018
	inc     _tmp2
;
; if( tmp2 >= 3 ){
;
	.dbg	line, "quarto.c", 2019
	lda     _tmp2
	cmp     #$03
	bcc     L001E
;
; reach = 1 ;
;
	.dbg	line, "quarto.c", 2020
	lda     #$01
	sta     _reach
;
; for( k = 0; k < 4; k++ ){
;
	.dbg	line, "quarto.c", 2008
L001E:	inc     _k
	jmp     L001C

	.dbg	line
.endproc

; ---------------------------------------------------------------
; int __near__ eventMoveButtonA (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eventMoveButtonA: near

	.dbg	func, "eventMoveButtonA", "00", extern, "_eventMoveButtonA"

.segment	"CODE"

;
; putKoma( x/8, y/8, selBW==0?0xAA:0x55, (unsigned char*)koma_list[0][0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 2028
	jsr     decsp3
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	ldy     #$02
	sta     (sp),y
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     _selBW
	bne     L0013
	lda     #$AA
	jmp     L0014
L0013:	lda     #$55
L0014:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0011
	inx
	clc
L0011:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putKoma
;
; stage_stat[x_index][y_index][_KOMA_TYPE] = selBW==0 ? koma_type[1+ChooseKoma] : koma_type[1+ChooseKoma+8] ;
;
	.dbg	line, "quarto.c", 2033
	lda     _x_index
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _y_index
	jsr     mulax3
	clc
	adc     sreg
	sta     sreg
	txa
	adc     sreg+1
	sta     sreg+1
	ldx     #$00
	lda     _selBW
	bne     L0015
	lda     _ChooseKoma
	clc
	adc     #$01
	jmp     L001E
L0015:	lda     _ChooseKoma
	clc
	adc     #$01
	bcc     L0012
	inx
	clc
L0012:	adc     #$08
L001E:	bcc     L0008
	inx
L0008:	sta     ptr1
	txa
	clc
	adc     #>(_koma_type)
	sta     ptr1+1
	ldy     #<(_koma_type)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; stage_stat[x_index][y_index][_CHOOSE_KOMA] = ChooseKoma ;
;
	.dbg	line, "quarto.c", 2034
	lda     _x_index
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _y_index
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$01
	lda     _ChooseKoma
	sta     (ptr1),y
;
; stage_stat[x_index][y_index][_SEL_BW] = selBW ;
;
	.dbg	line, "quarto.c", 2035
	lda     _x_index
	jsr     pusha0
	lda     #$0C
	jsr     tosmula0
	clc
	adc     #<(_stage_stat)
	sta     sreg
	txa
	adc     #>(_stage_stat)
	sta     sreg+1
	ldx     #$00
	lda     _y_index
	jsr     mulax3
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	ldy     #$02
	lda     _selBW
	sta     (ptr1),y
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2036
	jsr     _oam_clear
;
; sfx_play(4,1);
;
	.dbg	line, "quarto.c", 2041
	lda     #$04
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 2044
	lda     #$00
	jsr     _printMsg
;
; checkReach() ;
;
	.dbg	line, "quarto.c", 2046
	jsr     _checkReach
;
; if( reach == 1 && game_music != 4 ){
;
	.dbg	line, "quarto.c", 2047
	ldx     #$00
	lda     _reach
	cmp     #$01
	bne     L0016
	lda     _game_music
	cmp     #$04
	bne     L0017
L0016:	txa
	rts
;
; game_music = 4 ;
;
	.dbg	line, "quarto.c", 2048
L0017:	lda     #$04
	sta     _game_music
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 2049
	jsr     _music_stop
;
; delay(30) ;
;
	.dbg	line, "quarto.c", 2051
	lda     #$1E
	jsr     _delay
;
; music_play(game_music) ;
;
	.dbg	line, "quarto.c", 2052
	lda     _game_music
	jmp     _music_play

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ autoSetXY (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_autoSetXY: near

	.dbg	func, "autoSetXY", "00", extern, "_autoSetXY"

.segment	"CODE"

;
; m = 0 ;
;
	.dbg	line, "quarto.c", 2058
	lda     #$00
	sta     _m
;
; n = 0 ;
;
	.dbg	line, "quarto.c", 2059
	sta     _n
;
; for( k=0; k<4; k++){
;
	.dbg	line, "quarto.c", 2061
	sta     _k
L001A:	lda     _k
	cmp     #$04
	jcs     L001F
;
; o = rand_box1[k] ;
;
	.dbg	line, "quarto.c", 2062
	ldy     _k
	lda     _rand_box1,y
	sta     _o
;
; for( l=0; l<4; l++){
;
	.dbg	line, "quarto.c", 2063
	lda     #$00
	sta     _l
L001B:	lda     _l
	cmp     #$04
	jcs     L001E
;
; p = rand_box2[l] ;
;
	.dbg	line, "quarto.c", 2064
	ldy     _l
	lda     _rand_box2,y
	sta     _p
;
; x = (o*32)-(p*32)+115+16 ;
;
	.dbg	line, "quarto.c", 2066
	ldx     #$00
	lda     _o
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     pushax
	ldx     #$00
	lda     _p
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     tossubax
	clc
	adc     #$73
	clc
	adc     #$10
	sta     _x
;
; y = (p*16)+(o*16)+71-16 ;
;
	.dbg	line, "quarto.c", 2067
	ldx     #$00
	lda     _p
	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _o
	jsr     shlax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	clc
	adc     #$47
	sec
	sbc     #$10
	sta     _y
;
; if( checkPutPos(x/8, y/8) == 1 ){
;
	.dbg	line, "quarto.c", 2071
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jsr     _checkPutPos
	cmp     #$01
;
; continue ;
;
	.dbg	line, "quarto.c", 2072
	beq     L001D
;
; m = x ;
;
	.dbg	line, "quarto.c", 2074
	lda     _x
	sta     _m
;
; n = y ;
;
	.dbg	line, "quarto.c", 2075
	lda     _y
	sta     _n
;
; if( isVsCPU == 1 && preQuartoCheck(o, p) == 0 ){
;
	.dbg	line, "quarto.c", 2077
	lda     _isVsCPU
	cmp     #$01
	bne     L0011
	lda     _o
	jsr     pusha
	lda     _p
	jsr     _preQuartoCheck
	cmp     #$00
	beq     L001D
	rts
;
; return ;
;
	.dbg	line, "quarto.c", 2080
L0011:	rts
;
; for( l=0; l<4; l++){
;
	.dbg	line, "quarto.c", 2063
L001D:	inc     _l
	jmp     L001B
;
; for( k=0; k<4; k++){
;
	.dbg	line, "quarto.c", 2061
L001E:	inc     _k
	jmp     L001A
;
; if( m == 0 && n == 0 ){
;
	.dbg	line, "quarto.c", 2084
L001F:	lda     _m
	bne     L0022
	lda     _n
	bne     L0022
;
; isForceFin = 1 ;
;
	.dbg	line, "quarto.c", 2085
	lda     #$01
	sta     _isForceFin
;
; }else{
;
	.dbg	line, "quarto.c", 2087
	rts
;
; x = m ;
;
	.dbg	line, "quarto.c", 2089
L0022:	lda     _m
	sta     _x
;
; y = n ;
;
	.dbg	line, "quarto.c", 2090
	lda     _n
	sta     _y
;
; checkPutPos(x/8, y/8) ;
;
	.dbg	line, "quarto.c", 2091
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jmp     _checkPutPos

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procMoveKoma (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procMoveKoma: near

	.dbg	func, "procMoveKoma", "00", extern, "_procMoveKoma"

.segment	"CODE"

;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2097
L0002:	lda     _pad
	and     #$80
	beq     L006A
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 2098
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2097
	lda     _whichTurn
	bne     L0066
	lda     _p1only
	cmp     #$01
	bne     L0067
L0066:	lda     #$00
	jmp     L0068
L0067:	lda     #$01
L0068:	jsr     _pad_poll
	sta     _pad
	jmp     L0002
;
; autoChoose=0;
;
	.dbg	line, "quarto.c", 2104
L006A:	sta     _autoChoose
;
; timerSet() ;
;
	.dbg	line, "quarto.c", 2107
L000A:	jsr     _timerSet
;
; pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ;
;
	.dbg	line, "quarto.c", 2111
	lda     _whichTurn
	bne     L006D
	lda     _p1only
	cmp     #$01
	bne     L006E
L006D:	lda     #$00
	jmp     L006F
L006E:	lda     #$01
L006F:	jsr     _pad_poll
	sta     _pad
;
; if( isVsCPU != 0 && whichTurn==0 ){
;
	.dbg	line, "quarto.c", 2112
	lda     _isVsCPU
	beq     L0073
	lda     _whichTurn
	bne     L0073
;
; pad=0  ;
;
	.dbg	line, "quarto.c", 2113
	sta     _pad
;
; autoChoose = 1 ;
;
	.dbg	line, "quarto.c", 2114
	lda     #$01
	sta     _autoChoose
;
; if(pad&PAD_LEFT){
;
	.dbg	line, "quarto.c", 2117
L0073:	lda     _pad
	and     #$02
	beq     L0077
;
; if( x > 4 ){
;
	.dbg	line, "quarto.c", 2118
	lda     _x
	cmp     #$05
	bcc     L0077
;
; x-= pad&PAD_B ? 4 : 2 ;
;
	.dbg	line, "quarto.c", 2119
	lda     _pad
	and     #$40
	beq     L0074
	lda     #$04
	jmp     L0076
L0074:	lda     #$02
L0076:	eor     #$FF
	sec
	adc     _x
	sta     _x
;
; if(pad&PAD_RIGHT){
;
	.dbg	line, "quarto.c", 2122
L0077:	lda     _pad
	and     #$01
	beq     L007B
;
; if( x < 232){
;
	.dbg	line, "quarto.c", 2123
	lda     _x
	cmp     #$E8
	bcs     L007B
;
; x+= pad&PAD_B ? 4 : 2 ;
;
	.dbg	line, "quarto.c", 2124
	lda     _pad
	and     #$40
	beq     L0078
	lda     #$04
	jmp     L007A
L0078:	lda     #$02
L007A:	clc
	adc     _x
	sta     _x
;
; if(pad&PAD_UP){
;
	.dbg	line, "quarto.c", 2127
L007B:	lda     _pad
	and     #$08
	beq     L007F
;
; if( y > 4 ){
;
	.dbg	line, "quarto.c", 2128
	lda     _y
	cmp     #$05
	bcc     L007F
;
; y-= pad&PAD_B ? 2 : 1 ;
;
	.dbg	line, "quarto.c", 2129
	lda     _pad
	and     #$40
	beq     L007C
	lda     #$02
	jmp     L007E
L007C:	lda     #$01
L007E:	eor     #$FF
	sec
	adc     _y
	sta     _y
;
; if(pad&PAD_DOWN){
;
	.dbg	line, "quarto.c", 2133
L007F:	lda     _pad
	and     #$04
	beq     L0083
;
; if( y < 212){
;
	.dbg	line, "quarto.c", 2134
	lda     _y
	cmp     #$D4
	bcs     L0083
;
; y+= pad&PAD_B ? 2 : 1 ;
;
	.dbg	line, "quarto.c", 2135
	lda     _pad
	and     #$40
	beq     L0080
	lda     #$02
	jmp     L0082
L0080:	lda     #$01
L0082:	clc
	adc     _y
	sta     _y
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 2138
L0083:	lda     _pad
	and     #$80
	beq     L0089
;
; if( checkPutPos(x/8, y/8) == 1 ){
;
	.dbg	line, "quarto.c", 2139
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jsr     _checkPutPos
	cmp     #$01
	bne     L0026
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 2140
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2142
L0027:	lda     _pad
	and     #$80
	beq     L0089
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 2143
	jsr     _ppu_wait_frame
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2144
	inc     _frame
;
; for( ; pad&PAD_A ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2142
	lda     _whichTurn
	bne     L0086
	lda     _p1only
	cmp     #$01
	bne     L0087
L0086:	lda     #$00
	jmp     L0088
L0087:	lda     #$01
L0088:	jsr     _pad_poll
	sta     _pad
	jmp     L0027
;
; eventMoveButtonA();
;
	.dbg	line, "quarto.c", 2148
L0026:	jmp     _eventMoveButtonA
;
; if(pad&PAD_SELECT){
;
	.dbg	line, "quarto.c", 2154
L0089:	lda     _pad
	and     #$20
	jeq     L0090
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2155
	jsr     _oam_clear
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 2162
	jsr     _printCursor
;
; koma_exist[selBW][ChooseKoma] = 1 ;
;
	.dbg	line, "quarto.c", 2164
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     #$01
	sta     (ptr1),y
;
; putStockKoma((ChooseKoma*4),selBW==0?0:26, selBW==0?0xAA:0x55, (unsigned char*)koma_list[0][0][ChooseKoma]) ;
;
	.dbg	line, "quarto.c", 2165
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	beq     L008B
	lda     #$1A
L008B:	dey
	sta     (sp),y
	lda     _selBW
	bne     L008C
	lda     #$AA
	jmp     L008D
L008C:	lda     #$55
L008D:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0060
	inx
	clc
L0060:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; whichTurn = whichTurn == 0? 1:0 ;
;
	.dbg	line, "quarto.c", 2166
	lda     _whichTurn
	bne     L008E
	lda     #$01
	jmp     L008F
L008E:	lda     #$00
L008F:	sta     _whichTurn
;
; timer = timerSetCount ;
;
	.dbg	line, "quarto.c", 2167
	lda     _timerSetCount
	sta     _timer
;
; sfx_play(6,0);
;
	.dbg	line, "quarto.c", 2169
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 2172
	lda     #$00
	jmp     _printMsg
;
; if(pad&PAD_START){
;
	.dbg	line, "quarto.c", 2176
L0090:	lda     _pad
	and     #$10
	beq     L0096
;
; procSayQuarto() ;
;
	.dbg	line, "quarto.c", 2177
	jsr     _procSayQuarto
;
; if( checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 2179
	jsr     _checkQuarto
	cmp     #$01
	bne     L0038
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 2180
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 2181
	rts
;
; sfx_play(3,1);
;
	.dbg	line, "quarto.c", 2183
L0038:	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; music_play(game_music) ;
;
	.dbg	line, "quarto.c", 2184
	lda     _game_music
	jsr     _music_play
;
; err[whichTurn]++ ;
;
	.dbg	line, "quarto.c", 2185
	lda     #<(_err)
	ldx     #>(_err)
	clc
	adc     _whichTurn
	bcc     L003A
	inx
L003A:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if( err[whichTurn] == 3 ){
;
	.dbg	line, "quarto.c", 2186
	ldy     _whichTurn
	lda     _err,y
	cmp     #$03
	bne     L003B
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 2187
	jsr     _loseAnime
;
; printLife() ;
;
	.dbg	line, "quarto.c", 2190
L003B:	jsr     _printLife
;
; printMsg(1) ;
;
	.dbg	line, "quarto.c", 2191
	lda     #$01
	jsr     _printMsg
;
; for( ; pad&PAD_START ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2192
L003D:	lda     _pad
	and     #$10
	jeq     L000A
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 2193
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_START ;pad=pad_poll((whichTurn!=0 || p1only==1)?0:1) ){
;
	.dbg	line, "quarto.c", 2192
	lda     _whichTurn
	bne     L0093
	lda     _p1only
	cmp     #$01
	bne     L0094
L0093:	lda     #$00
	jmp     L0095
L0094:	lda     #$01
L0095:	jsr     _pad_poll
	sta     _pad
	jmp     L003D
;
; if( autoChoose==1){
;
	.dbg	line, "quarto.c", 2197
L0096:	lda     _autoChoose
	cmp     #$01
	jne     L0045
;
; if( isVsCPU == 1 && checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 2198
	lda     _isVsCPU
	cmp     #$01
	bne     L0098
	jsr     _checkQuarto
	cmp     #$01
	bne     L0098
;
; procSayQuarto() ;
;
	.dbg	line, "quarto.c", 2199
	jsr     _procSayQuarto
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 2200
	lda     #$01
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 2201
	rts
;
; tmp = x;
;
	.dbg	line, "quarto.c", 2205
L0098:	lda     _x
	sta     _tmp
;
; tmp2 = y ;
;
	.dbg	line, "quarto.c", 2206
	lda     _y
	sta     _tmp2
;
; seedRandBox() ;
;
	.dbg	line, "quarto.c", 2209
	jsr     _seedRandBox
;
; autoSetXY();
;
	.dbg	line, "quarto.c", 2210
	jsr     _autoSetXY
;
; if( isForceFin == 1 ){
;
	.dbg	line, "quarto.c", 2211
	lda     _isForceFin
	cmp     #$01
	bne     L004A
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 2212
	jmp     _loseAnime
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2215
L004A:	jsr     _oam_clear
;
; moveKoma( tmp, tmp2, x-9, y-12, (unsigned char*)koma_list[0][selBW==0?1:0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 2216
	jsr     decsp4
	lda     _tmp
	ldy     #$03
	sta     (sp),y
	lda     _tmp2
	dey
	sta     (sp),y
	lda     _x
	sec
	sbc     #$09
	dey
	sta     (sp),y
	lda     _y
	sec
	sbc     #$0C
	dey
	sta     (sp),y
	ldx     #$00
	lda     _selBW
	bne     L0099
	lda     #$01
	jmp     L004E
L0099:	txa
L004E:	jsr     aslax4
	clc
	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0061
	inx
	clc
L0061:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _moveKoma
;
; eventMoveButtonA() ;
;
	.dbg	line, "quarto.c", 2218
	jsr     _eventMoveButtonA
;
; if( isVsCPU == 1 && checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 2219
	lda     _isVsCPU
	cmp     #$01
	bne     L004F
	jsr     _checkQuarto
	cmp     #$01
	bne     L004F
;
; procSayQuarto() ;
;
	.dbg	line, "quarto.c", 2220
	jsr     _procSayQuarto
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 2221
	lda     #$01
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 2222
	rts
;
; return ;
;
	.dbg	line, "quarto.c", 2225
L004F:	rts
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 2229
L0045:	jsr     _ppu_wait_frame
;
; frame++;
;
	.dbg	line, "quarto.c", 2230
	inc     _frame
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2232
	jsr     _oam_clear
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 2233
	lda     #$00
	sta     _spr
;
; if( checkPutPos(x/8, y/8) != 1 ){
;
	.dbg	line, "quarto.c", 2234
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jsr     _checkPutPos
	cmp     #$01
	beq     L0053
;
; spr = oam_meta_spr( set_posx*8+8, set_posy*8+(frame%8)+10, spr, selBW==0?meta_pos1: meta_pos2 ) ;
;
	.dbg	line, "quarto.c", 2235
	jsr     decsp3
	lda     _set_posx
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _set_posy
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _frame
	and     #$07
	clc
	adc     ptr1
	bcc     L0062
	clc
L0062:	adc     #$0A
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _selBW
	bne     L0056
	lda     #<(_meta_pos1)
	ldx     #>(_meta_pos1)
	jmp     L0057
L0056:	lda     #<(_meta_pos2)
	ldx     #>(_meta_pos2)
L0057:	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( x, y, spr, koma_list[koma_exist[selBW][ChooseKoma]][selBW==0?1:0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 2237
L0053:	jsr     decsp3
	lda     _x
	ldy     #$02
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_koma_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_koma_list)
	sta     ptr1+1
	ldx     #$00
	lda     _selBW
	bne     L009B
	lda     #$01
	jmp     L0059
L009B:	txa
L0059:	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0063
	inx
	clc
L0063:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _spr
;
; while(1)
;
	.dbg	line, "quarto.c", 2105
	jmp     L000A

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procCheckQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procCheckQuarto: near

	.dbg	func, "procCheckQuarto", "00", extern, "_procCheckQuarto"

.segment	"CODE"

;
; if( quarto != 0 ){
;
	.dbg	line, "quarto.c", 2242
	lda     _quarto
	bne     L0034
;
; }
;
	.dbg	line, "quarto.c", 2311
	rts
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 2243
L0034:	jsr     _music_stop
;
; initLife() ;
;
	.dbg	line, "quarto.c", 2244
	jsr     _initLife
;
; initMsg() ;
;
	.dbg	line, "quarto.c", 2245
	jsr     _initMsg
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2246
	jsr     _oam_clear
;
; delay(40) ;
;
	.dbg	line, "quarto.c", 2247
	lda     #$28
	jsr     _delay
;
; bgFlash(8) ;
;
	.dbg	line, "quarto.c", 2248
	lda     #$08
	jsr     _bgFlash
;
; delay(40) ;
;
	.dbg	line, "quarto.c", 2249
	lda     #$28
	jsr     _delay
;
; music_play(0) ;
;
	.dbg	line, "quarto.c", 2250
	lda     #$00
	jsr     _music_play
;
; tmp = rand8() ;
;
	.dbg	line, "quarto.c", 2255
	jsr     _rand8
	sta     _tmp
;
; tmp2 = rand8() ;
;
	.dbg	line, "quarto.c", 2256
	jsr     _rand8
	sta     _tmp2
;
; tmp3 = rand8() ;
;
	.dbg	line, "quarto.c", 2257
	jsr     _rand8
	sta     _tmp3
;
; tmp4 = rand8() ;
;
	.dbg	line, "quarto.c", 2258
	jsr     _rand8
	sta     _tmp4
;
; x-=4 ;
;
	.dbg	line, "quarto.c", 2260
L0029:	lda     _x
	sec
	sbc     #$04
	sta     _x
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 2261
	lda     #$00
	sta     _spr
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 2268
	sta     _i
L002A:	lda     _i
	cmp     #$04
	jcs     L002B
;
; k = (quarto_line[i][0]*32)-(quarto_line[i][1]*32)+115+14 ;
;
	.dbg	line, "quarto.c", 2269
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0023
	inx
L0023:	sta     ptr1
	txa
	clc
	adc     #>(_quarto_line)
	sta     ptr1+1
	ldy     #<(_quarto_line)
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0027
	inx
	clc
L0027:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     tossubax
	clc
	adc     #$73
	clc
	adc     #$0E
	sta     _k
;
; l = (quarto_line[i][1]*16)+(quarto_line[i][0]*16)+71-32 ;
;
	.dbg	line, "quarto.c", 2270
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0028
	inx
	clc
L0028:	adc     #<(_quarto_line)
	sta     ptr1
	txa
	adc     #>(_quarto_line)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0026
	inx
L0026:	sta     ptr1
	txa
	clc
	adc     #>(_quarto_line)
	sta     ptr1+1
	ldy     #<(_quarto_line)
	ldx     #$00
	lda     (ptr1),y
	jsr     shlax4
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	pla
	clc
	adc     #$47
	sec
	sbc     #$20
	sta     _l
;
; spr = oam_meta_spr( k, l+frame%5, spr, meta_pos2) ;
;
	.dbg	line, "quarto.c", 2271
	jsr     decsp3
	lda     _k
	ldy     #$02
	sta     (sp),y
	lda     _l
	jsr     pusha0
	lda     _frame
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	jsr     tosaddax
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_pos2)
	ldx     #>(_meta_pos2)
	jsr     _oam_meta_spr
	sta     _spr
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 2268
	inc     _i
	jmp     L002A
;
; if( frame & 2 ){
;
	.dbg	line, "quarto.c", 2274
L002B:	lda     _frame
	and     #$02
	beq     L002E
;
; spr = oam_meta_spr( 10 , whichTurn!=0?180:40, spr, whichTurn!=0?meta_p1win:meta_p2win);
;
	.dbg	line, "quarto.c", 2275
	jsr     decsp3
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	lda     _whichTurn
	beq     L002C
	lda     #$B4
	jmp     L002D
L002C:	lda     #$28
L002D:	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L0013
	lda     #<(_meta_p1win)
	ldx     #>(_meta_p1win)
	jmp     L0014
L0013:	lda     #<(_meta_p2win)
	ldx     #>(_meta_p2win)
L0014:	jsr     _oam_meta_spr
	sta     _spr
;
; }else{ 
;
	.dbg	line, "quarto.c", 2276
	jmp     L0015
;
; oam_hide_rest(spr) ; 
;
	.dbg	line, "quarto.c", 2277
L002E:	lda     _spr
	jsr     _oam_hide_rest
;
; cycleSprColor() ;
;
	.dbg	line, "quarto.c", 2280
L0015:	jsr     _cycleSprColor
;
; animeKomaTurn(4) ;
;
	.dbg	line, "quarto.c", 2283
	lda     #$04
	jsr     _animeKomaTurn
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2284
	inc     _frame
;
; pad=pad_poll(0);
;
	.dbg	line, "quarto.c", 2286
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if( pad&PAD_START ){
;
	.dbg	line, "quarto.c", 2287
	and     #$10
	jeq     L0029
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2288
	jsr     _oam_clear
;
; for( i=0 ; i< 5; i++ ){
;
	.dbg	line, "quarto.c", 2290
	lda     #$00
	sta     _i
L002F:	lda     _i
	cmp     #$05
	bcs     L0030
;
; animeKomaTurn(4) ;
;
	.dbg	line, "quarto.c", 2291
	lda     #$04
	jsr     _animeKomaTurn
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2292
	inc     _frame
;
; for( i=0 ; i< 5; i++ ){
;
	.dbg	line, "quarto.c", 2290
	inc     _i
	jmp     L002F
;
; music_play(2) ;
;
	.dbg	line, "quarto.c", 2294
L0030:	lda     #$02
	jsr     _music_play
;
; for( i=0 ; i< 10; i++ ){
;
	.dbg	line, "quarto.c", 2295
	lda     #$00
	sta     _i
L0031:	lda     _i
	cmp     #$0A
	bcs     L0032
;
; animeKomaTurn(2) ;
;
	.dbg	line, "quarto.c", 2296
	lda     #$02
	jsr     _animeKomaTurn
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2297
	inc     _frame
;
; for( i=0 ; i< 10; i++ ){
;
	.dbg	line, "quarto.c", 2295
	inc     _i
	jmp     L0031
;
; for( i=0 ; i< 25; i++ ){
;
	.dbg	line, "quarto.c", 2299
L0032:	lda     #$00
	sta     _i
L0033:	lda     _i
	cmp     #$19
	bcs     L0020
;
; animeKomaTurn(1) ;
;
	.dbg	line, "quarto.c", 2300
	lda     #$01
	jsr     _animeKomaTurn
;
; scroll(0,i*10) ;
;
	.dbg	line, "quarto.c", 2301
	jsr     push0
	lda     _i
	jsr     mulax10
	jsr     _scroll
;
; frame++ ;
;
	.dbg	line, "quarto.c", 2302
	inc     _frame
;
; for( i=0 ; i< 25; i++ ){
;
	.dbg	line, "quarto.c", 2299
	inc     _i
	jmp     L0033
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 2304
L0020:	jsr     _music_stop
;
; animeKomaTurnOff() ;
;
	.dbg	line, "quarto.c", 2305
	jsr     _animeKomaTurnOff
;
; reset() ;
;
	.dbg	line, "quarto.c", 2306
	jsr     _reset
;
; continue ;
;
	.dbg	line, "quarto.c", 2308
	jmp     L0029

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initVal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initVal: near

	.dbg	func, "initVal", "00", extern, "_initVal"

.segment	"CODE"

;
; p1only=1;
;
	.dbg	line, "quarto.c", 2315
	lda     #$01
	sta     _p1only
;
; isVsCPU=1;
;
	.dbg	line, "quarto.c", 2316
	sta     _isVsCPU
;
; isForceFin = 0 ;
;
	.dbg	line, "quarto.c", 2317
	lda     #$00
	sta     _isForceFin
;
; timerSetCount = 60 ;
;
	.dbg	line, "quarto.c", 2318
	lda     #$3C
	sta     _timerSetCount
;
; quarto = 0 ;
;
	.dbg	line, "quarto.c", 2319
	lda     #$00
	sta     _quarto
;
; bgpl = 0;
;
	.dbg	line, "quarto.c", 2320
	sta     _bgpl
;
; ChooseKoma = 0;
;
	.dbg	line, "quarto.c", 2321
	sta     _ChooseKoma
;
; whichTurn = 1;
;
	.dbg	line, "quarto.c", 2322
	lda     #$01
	sta     _whichTurn
;
; selBW = 0;
;
	.dbg	line, "quarto.c", 2323
	lda     #$00
	sta     _selBW
;
; koma_pos[0]=3;
;
	.dbg	line, "quarto.c", 2324
	lda     #$03
	sta     _koma_pos
;
; koma_pos[1]=1;
;
	.dbg	line, "quarto.c", 2325
	lda     #$01
	sta     _koma_pos+1
;
; x=0;
;
	.dbg	line, "quarto.c", 2326
	lda     #$00
	sta     _x
;
; y=0;
;
	.dbg	line, "quarto.c", 2327
	sta     _y
;
; koma_x[0] = 72 ;
;
	.dbg	line, "quarto.c", 2328
	lda     #$48
	sta     _koma_x
;
; koma_y[0] = 122 ;
;
	.dbg	line, "quarto.c", 2329
	lda     #$7A
	sta     _koma_y
;
; koma_x[1] = 152 ;
;
	.dbg	line, "quarto.c", 2330
	lda     #$98
	sta     _koma_x+1
;
; koma_y[1] = 122 ;
;
	.dbg	line, "quarto.c", 2331
	lda     #$7A
	sta     _koma_y+1
;
; timer = 0 ;
;
	.dbg	line, "quarto.c", 2333
	lda     #$00
	sta     _timer
;
; game_music = 1; // 1:game1, 4:game2
;
	.dbg	line, "quarto.c", 2335
	lda     #$01
	sta     _game_music
;
; reach = 0 ;
;
	.dbg	line, "quarto.c", 2336
	lda     #$00
	sta     _reach
;
; tmp = 0 ; //collision flag
;
	.dbg	line, "quarto.c", 2340
	sta     _tmp
;
; frame = 0 ; //frame counter
;
	.dbg	line, "quarto.c", 2341
	sta     _frame
;
; for( i=0; i < 40; i++ ){
;
	.dbg	line, "quarto.c", 2343
	sta     _i
L0007:	lda     _i
	cmp     #$28
	bcs     L0008
;
; attr_stat[i] = 0x55 ;
;
	.dbg	line, "quarto.c", 2344
	ldy     _i
	lda     #$55
	sta     _attr_stat,y
;
; for( i=0; i < 40; i++ ){
;
	.dbg	line, "quarto.c", 2343
	inc     _i
	jmp     L0007
;
; err[0]=0;
;
	.dbg	line, "quarto.c", 2346
L0008:	lda     #$00
	sta     _err
;
; err[1]=0;
;
	.dbg	line, "quarto.c", 2347
	sta     _err+1
;
; }
;
	.dbg	line, "quarto.c", 2350
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; initVal() ;
;
	.dbg	line, "quarto.c", 2520
	jsr     _initVal
;
; pal_spr((char*)palette2);
;
	.dbg	line, "quarto.c", 2523
	lda     #<(_palette2)
	ldx     #>(_palette2)
	jsr     _pal_spr
;
; pal_bg((char*)open_palette1);//set background palette from an array
;
	.dbg	line, "quarto.c", 2524
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 2526
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)open_name);
;
	.dbg	line, "quarto.c", 2527
	lda     #<(_open_name)
	ldx     #>(_open_name)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 2528
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 0x0180);
;
	.dbg	line, "quarto.c", 2529
	lda     #$00
	jsr     pusha
	ldx     #$01
	lda     #$80
	jsr     _vram_fill
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 2530
	lda     #$00
	sta     _spr
;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 2532
	jsr     _pal_bright
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 2533
	jsr     _ppu_on_all
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 2534
	lda     #$14
	jsr     _delay
;
; bgUp() ;
;
	.dbg	line, "quarto.c", 2536
	jsr     _bgUp
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 2537
	lda     #$14
	jsr     _delay
;
; tmp = 0 ;
;
	.dbg	line, "quarto.c", 2538
	lda     #$00
	sta     _tmp
;
; if(frame%20==0){ move_next(); };
;
	.dbg	line, "quarto.c", 2542
L0017:	lda     _frame
	jsr     pusha0
	lda     #$14
	jsr     tosumoda0
	cpx     #$00
	bne     L0005
	cmp     #$00
	bne     L0005
	jsr     _move_next
;
; frame++;
;
	.dbg	line, "quarto.c", 2544
L0005:	inc     _frame
;
; if( checkForceBreak() ){ break ; }
;
	.dbg	line, "quarto.c", 2546
	jsr     _checkForceBreak
	tax
	beq     L0017
;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 2551
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_SELECT ){
;
	.dbg	line, "quarto.c", 2552
	and     #$20
	beq     L0011
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 2554
	jsr     _ppu_off
;
; bank_bg(1);
;
	.dbg	line, "quarto.c", 2555
	lda     #$01
	jsr     _bank_bg
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 2556
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 2557
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)qr);
;
	.dbg	line, "quarto.c", 2558
	lda     #<(_qr)
	ldx     #>(_qr)
	jsr     _vram_unrle
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 2559
	jsr     _ppu_on_all
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 2562
L0009:	lda     _pad
	and     #$20
	beq     L0019
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 2563
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 2562
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0009
;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 2569
L0010:	lda     #$00
L0019:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_SELECT ){
;
	.dbg	line, "quarto.c", 2570
	and     #$20
	beq     L0019
;
; bank_bg(0);
;
	.dbg	line, "quarto.c", 2571
	lda     #$00
	jsr     _bank_bg
;
; reset() ;
;
	.dbg	line, "quarto.c", 2572
	jsr     _reset
;
; while(1){
;
	.dbg	line, "quarto.c", 2568
	jmp     L0010
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 2577
L0011:	jsr     _ppu_off
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 2578
	lda     #$0A
	jsr     _delay
;
; music_play(2) ;
;
	.dbg	line, "quarto.c", 2580
	lda     #$02
	jsr     _music_play
;
; delay(60) ;
;
	.dbg	line, "quarto.c", 2581
	lda     #$3C
	jsr     _delay
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 2582
	jsr     _music_stop
;
; reset() ;
;
	.dbg	line, "quarto.c", 2595
L0014:	jsr     _reset
;
; while(1){
;
	.dbg	line, "quarto.c", 2594
	jmp     L0014

	.dbg	line
.endproc

