;
; File generated by cc65 v 2.19 - Git fcda94f
;
	.fopt		compiler,"cc65 v 2.19 - Git fcda94f"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "quarto.c", 45623, 1631687569
	.dbg		file, "lib/neslib.h", 8684, 1631687569
	.dbg		file, "resource/test2_blank.h", 258, 1631687569
	.dbg		file, "resource/open_name.h", 1815, 1631687569
	.dbg		file, "resource/qr.h", 685, 1631687569
	.forceimport	__STARTUP__
	.dbg		sym, "pal_bg", "00", extern, "_pal_bg"
	.dbg		sym, "pal_spr", "00", extern, "_pal_spr"
	.dbg		sym, "pal_bright", "00", extern, "_pal_bright"
	.dbg		sym, "ppu_wait_frame", "00", extern, "_ppu_wait_frame"
	.dbg		sym, "ppu_off", "00", extern, "_ppu_off"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "oam_clear", "00", extern, "_oam_clear"
	.dbg		sym, "oam_meta_spr", "00", extern, "_oam_meta_spr"
	.dbg		sym, "music_play", "00", extern, "_music_play"
	.dbg		sym, "music_stop", "00", extern, "_music_stop"
	.dbg		sym, "sfx_play", "00", extern, "_sfx_play"
	.dbg		sym, "pad_poll", "00", extern, "_pad_poll"
	.dbg		sym, "bank_bg", "00", extern, "_bank_bg"
	.dbg		sym, "rand8", "00", extern, "_rand8"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "vram_adr", "00", extern, "_vram_adr"
	.dbg		sym, "vram_fill", "00", extern, "_vram_fill"
	.dbg		sym, "vram_unrle", "00", extern, "_vram_unrle"
	.dbg		sym, "memfill", "00", extern, "_memfill"
	.dbg		sym, "delay", "00", extern, "_delay"
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memfill
	.import		_delay
	.export		_test2_blank
	.export		_open_name
	.export		_qr
	.export		_reset
	.export		_attr_pos
	.export		_stage_anime_index
	.export		_msgBlank
	.export		_stage_pos
	.export		_open_palette1
	.export		_open_palette2
	.export		_open_palette3
	.export		_open_palette4
	.export		_palette1
	.export		_palette2
	.export		_palette3
	.export		_palette4
	.export		_bg_palettes
	.export		_meta_quarto
	.export		_meta_pos1
	.export		_meta_pos2
	.export		_cursor
	.export		_cursor2
	.export		_koma_1
	.export		_koma_2
	.export		_koma_3
	.export		_koma_4
	.export		_koma_5
	.export		_koma_6
	.export		_koma_7
	.export		_koma_8
	.export		_koma_1_P2
	.export		_koma_2_P2
	.export		_koma_3_P2
	.export		_koma_4_P2
	.export		_koma_5_P2
	.export		_koma_6_P2
	.export		_koma_7_P2
	.export		_koma_8_P2
	.export		_OFF_koma_1
	.export		_OFF_koma_2
	.export		_OFF_koma_3
	.export		_OFF_koma_4
	.export		_OFF_koma_5
	.export		_OFF_koma_6
	.export		_OFF_koma_7
	.export		_OFF_koma_8
	.export		_koma_type
	.export		_koma_list
	.export		_put_update_debug
	.export		_update_init
	.export		_upProc
	.export		_setStageAdr
	.export		_up_stage
	.export		_cycleColor
	.export		_cycleSprColor
	.export		_checkForceBreak
	.export		_bgFlash
	.export		_bgDown
	.export		_bgUp
	.export		_move_next
	.export		_getStagePos
	.export		_getAttrPos
	.export		_putStageKomaColor
	.export		_putKomaColor
	.export		_checkPutPos
	.export		_putStockKoma
	.export		_initBar
	.export		_putKoma
	.export		_printCursor
	.export		_checkLineQuarto
	.export		_initQuartoFlg
	.export		_bitCalc
	.export		_checkQuarto
	.export		_moveKoma
	.export		_printMsg
	.export		_printLife
	.export		_loseAnime
	.export		_procChooseKoma
	.export		_procMooveKoma
	.export		_procCheckQuarto
	.export		_initVal
	.export		_voiceQuarto
	.export		_main

.segment	"DATA"

_anime:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.res	12,$00
_bg_palettes:
	.addr	_palette1
	.addr	_palette2
	.addr	_palette3
	.addr	_palette4
_koma_list:
	.addr	_koma_1
	.addr	_koma_2
	.addr	_koma_3
	.addr	_koma_4
	.addr	_koma_5
	.addr	_koma_6
	.addr	_koma_7
	.addr	_koma_8
	.addr	_koma_1_P2
	.addr	_koma_2_P2
	.addr	_koma_3_P2
	.addr	_koma_4_P2
	.addr	_koma_5_P2
	.addr	_koma_6_P2
	.addr	_koma_7_P2
	.addr	_koma_8_P2
	.res	16,$00

.segment	"RODATA"

_test2_blank:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$C6
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$AA
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$95
	.byte	$65
	.byte	$55
	.byte	$01
	.byte	$21
	.byte	$F5
	.byte	$55
	.byte	$F5
	.byte	$F5
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$05
	.byte	$0F
	.byte	$0F
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$00
_open_name:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$21
	.byte	$40
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$40
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$02
	.byte	$50
	.byte	$30
	.byte	$2C
	.byte	$35
	.byte	$33
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$02
	.byte	$15
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$02
	.byte	$15
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$02
	.byte	$ED
	.byte	$40
	.byte	$10
	.byte	$5F
	.byte	$AF
	.byte	$FF
	.byte	$3B
	.byte	$4A
	.byte	$9A
	.byte	$04
	.byte	$00
	.byte	$55
	.byte	$AA
	.byte	$EE
	.byte	$A3
	.byte	$44
	.byte	$55
	.byte	$01
	.byte	$00
	.byte	$55
	.byte	$AB
	.byte	$EE
	.byte	$AA
	.byte	$A8
	.byte	$69
	.byte	$61
	.byte	$D0
	.byte	$FF
	.byte	$03
	.byte	$40
	.byte	$55
	.byte	$44
	.byte	$59
	.byte	$55
	.byte	$DD
	.byte	$FF
	.byte	$B0
	.byte	$54
	.byte	$55
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$11
	.byte	$AA
	.byte	$66
	.byte	$55
	.byte	$56
	.byte	$55
	.byte	$02
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$05
	.byte	$02
	.byte	$00
_qr:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$70
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$02
	.byte	$18
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$E8
	.byte	$E9
	.byte	$00
	.byte	$02
	.byte	$FE
	.byte	$00
	.byte	$02
	.byte	$91
	.byte	$40
	.byte	$10
	.byte	$5F
	.byte	$AF
	.byte	$FF
	.byte	$3B
	.byte	$4A
	.byte	$9A
	.byte	$04
	.byte	$55
	.byte	$55
	.byte	$9A
	.byte	$EE
	.byte	$A3
	.byte	$44
	.byte	$55
	.byte	$01
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$5B
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$D1
	.byte	$77
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$44
	.byte	$59
	.byte	$55
	.byte	$DD
	.byte	$F7
	.byte	$F5
	.byte	$05
	.byte	$45
	.byte	$65
	.byte	$55
	.byte	$55
	.byte	$11
	.byte	$11
	.byte	$A2
	.byte	$60
	.byte	$55
	.byte	$56
	.byte	$55
	.byte	$5F
	.byte	$51
	.byte	$54
	.byte	$58
	.byte	$5A
	.byte	$55
	.byte	$02
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$08
	.byte	$0A
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$00
_attr_pos:
	.byte	$CB
	.byte	$CC
	.byte	$D3
	.byte	$D4
	.byte	$D2
	.byte	$D3
	.byte	$D2
	.byte	$D3
	.byte	$D1
	.byte	$D2
	.byte	$D9
	.byte	$DA
	.byte	$D8
	.byte	$D9
	.byte	$D8
	.byte	$D9
	.byte	$D4
	.byte	$D5
	.byte	$D4
	.byte	$D5
	.byte	$D3
	.byte	$D4
	.byte	$DB
	.byte	$DC
	.byte	$DA
	.byte	$DB
	.byte	$DA
	.byte	$DB
	.byte	$D9
	.byte	$DA
	.byte	$E1
	.byte	$E2
	.byte	$D5
	.byte	$D6
	.byte	$DD
	.byte	$DE
	.byte	$DC
	.byte	$DD
	.byte	$DC
	.byte	$DD
	.byte	$DB
	.byte	$DC
	.byte	$E3
	.byte	$E4
	.byte	$E2
	.byte	$E3
	.byte	$E2
	.byte	$E3
	.byte	$DE
	.byte	$DF
	.byte	$DE
	.byte	$DF
	.byte	$DD
	.byte	$DE
	.byte	$E5
	.byte	$E6
	.byte	$E4
	.byte	$E5
	.byte	$E4
	.byte	$E5
	.byte	$E3
	.byte	$E4
	.byte	$EB
	.byte	$EC
	.res	12,$00
	.res	48,$00
_stage_anime_index:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.res	30,$00
_msgBlank:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
_stage_pos:
	.byte	$01
	.byte	$0E
	.byte	$01
	.byte	$2E
	.byte	$01
	.byte	$4E
	.byte	$01
	.byte	$4A
	.byte	$01
	.byte	$6A
	.byte	$01
	.byte	$8A
	.byte	$01
	.byte	$86
	.byte	$01
	.byte	$A6
	.byte	$01
	.byte	$C6
	.byte	$01
	.byte	$C2
	.byte	$01
	.byte	$E2
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$52
	.byte	$01
	.byte	$72
	.byte	$01
	.byte	$92
	.byte	$01
	.byte	$8E
	.byte	$01
	.byte	$AE
	.byte	$01
	.byte	$CE
	.byte	$01
	.byte	$CA
	.byte	$01
	.byte	$EA
	.byte	$02
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$02
	.byte	$26
	.byte	$02
	.byte	$46
	.byte	$01
	.byte	$96
	.byte	$01
	.byte	$B6
	.byte	$01
	.byte	$D6
	.byte	$01
	.byte	$D2
	.byte	$01
	.byte	$F2
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$0E
	.byte	$02
	.byte	$2E
	.byte	$02
	.byte	$4E
	.byte	$02
	.byte	$4A
	.byte	$02
	.byte	$6A
	.byte	$02
	.byte	$8A
	.byte	$01
	.byte	$DA
	.byte	$01
	.byte	$FA
	.byte	$02
	.byte	$1A
	.byte	$02
	.byte	$16
	.byte	$02
	.byte	$36
	.byte	$02
	.byte	$56
	.byte	$02
	.byte	$52
	.byte	$02
	.byte	$72
	.byte	$02
	.byte	$92
	.byte	$02
	.byte	$8E
	.byte	$02
	.byte	$AE
	.byte	$02
	.byte	$CE
	.res	18,$00
	.res	72,$00
_open_palette1:
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
_open_palette2:
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
_open_palette3:
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
_open_palette4:
	.byte	$0F
	.byte	$0A
	.byte	$3A
	.byte	$3A
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$05
	.byte	$25
	.byte	$35
	.byte	$0F
	.byte	$0C
	.byte	$2C
	.byte	$3C
_palette1:
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$31
	.byte	$0F
	.byte	$0C
	.byte	$30
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$0F
	.byte	$0F
_palette2:
	.byte	$0F
	.byte	$1C
	.byte	$3C
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$05
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0C
	.byte	$0F
	.byte	$15
	.byte	$35
	.byte	$0F
_palette3:
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$0C
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
_palette4:
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$26
	.byte	$30
	.byte	$07
	.byte	$0B
	.byte	$17
	.byte	$30
	.byte	$37
	.byte	$0B
	.byte	$0B
	.byte	$0B
	.byte	$0B
_meta_quarto:
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$21
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$32
	.byte	$01
	.byte	$20
	.byte	$00
	.byte	$34
	.byte	$01
	.byte	$28
	.byte	$00
	.byte	$2F
	.byte	$01
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$80
_meta_pos1:
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$01
	.byte	$80
_meta_pos2:
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$02
	.byte	$80
_cursor:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$01
	.byte	$80
_cursor2:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$81
	.byte	$80
_koma_1:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_3:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_4:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$01
	.byte	$80
_koma_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$01
	.byte	$80
_koma_1_P2:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_2_P2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_3_P2:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_4_P2:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_5_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_6_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$02
	.byte	$80
_koma_7_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_koma_8_P2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$02
	.byte	$80
_OFF_koma_1:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_2:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$87
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A1
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$88
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A2
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_3:
	.byte	$00
	.byte	$00
	.byte	$83
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_4:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$A4
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$8B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B0
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$91
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B1
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$88
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B2
	.byte	$00
	.byte	$80
_OFF_koma_7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_OFF_koma_8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$B3
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$B4
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$8B
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$B5
	.byte	$00
	.byte	$80
_koma_type:
	.byte	$00
	.byte	$F0
	.byte	$E1
	.byte	$D2
	.byte	$C3
	.byte	$B4
	.byte	$A5
	.byte	$96
	.byte	$87
	.byte	$78
	.byte	$69
	.byte	$5A
	.byte	$4B
	.byte	$3C
	.byte	$2D
	.byte	$1E
	.byte	$0F
S000B:
	.byte	$50,$32,$3A,$57,$49,$4E,$21,$20,$20,$20,$20,$20,$20,$20,$00
S000A:
	.byte	$50,$31,$3A,$57,$49,$4E,$21,$20,$20,$20,$20,$20,$20,$20,$00
S0009:
	.byte	$50,$32,$3A,$50,$4C,$41,$59,$49,$4E,$47,$20,$20,$20,$20,$00
S0008:
	.byte	$50,$31,$3A,$50,$4C,$41,$59,$49,$4E,$47,$20,$20,$20,$20,$00
S0006:
	.byte	$50,$31,$3A,$53,$45,$4C,$45,$43,$54,$20,$4E,$45,$58,$54,$00
S0007:
	.byte	$50,$32,$3A,$53,$45,$4C,$45,$43,$54,$20,$4E,$45,$58,$54,$00
S0004:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
S0002:
	.byte	$50,$52,$45,$53,$53,$20,$42,$55,$54,$54,$4F,$4E,$21,$00
S0005	:=	S0004+0
S0003:
	.byte	$30,$30,$36,$20,$2A,$20,$32,$30,$32,$31,$00
S000D:
	.byte	$58,$20,$20,$00
S000E:
	.byte	$58,$58,$20,$00
S000F:
	.byte	$58,$58,$58,$00
S0010	:=	S000B+11
S0011	:=	S000D+0
S0012	:=	S000E+0
S0013	:=	S000F+0
S000C	:=	S000B+11

.segment	"BSS"

_quarto:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_x_index:
	.res	1,$00
_y_index:
	.res	1,$00
_timer:
	.res	1,$00
_setCount:
	.res	1,$00
_set_posh:
	.res	1,$00
_set_posl:
	.res	1,$00
_whichTurn:
	.res	1,$00
_selBW:
	.res	1,$00
_pad:
	.res	1,$00
_spr:
	.res	1,$00
_calc:
	.res	1,$00
_tmp:
	.res	1,$00
_tmp2:
	.res	1,$00
_tmp3:
	.res	1,$00
_tmp4:
	.res	1,$00
_frame:
	.res	1,$00
_koma_frame:
	.res	1,$00
_q_black:
	.res	1,$00
_q_white:
	.res	1,$00
_q_high:
	.res	1,$00
_q_low:
	.res	1,$00
_q_square:
	.res	1,$00
_q_circle:
	.res	1,$00
_q_plane:
	.res	1,$00
_q_dot:
	.res	1,$00
_err:
	.res	2,$00
_set_posx:
	.res	1,$00
_set_posy:
	.res	1,$00
_moving:
	.res	1,$00
_koma_pos:
	.res	2,$00
_koma_x:
	.res	2,$00
_koma_y:
	.res	2,$00
_ChooseKoma:
	.res	1,$00
_koma_exist:
	.res	16,$00
_bgpl:
	.res	1,$00
_attr_stat:
	.res	40,$00
_stage_stat:
	.res	16,$00
_update_list:
	.res	23,$00
_update_koma:
	.res	25,$00
_update_koma_color:
	.res	5,$00
_update_debug:
	.res	36,$00
_dbgcnt:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

	.dbg	func, "reset", "00", extern, "_reset"

.segment	"CODE"

;
; initVal() ;
;
	.dbg	line, "quarto.c", 1862
	jsr     _initVal
;
; pal_spr((char*)bg_palettes[bgpl]);//set background palette from an array
;
	.dbg	line, "quarto.c", 1864
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L0013
	inx
	clc
L0013:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; pal_bg((char*)bg_palettes[bgpl]);//set background palette from an array
;
	.dbg	line, "quarto.c", 1865
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L0014
	inx
	clc
L0014:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1867
	jsr     _oam_clear
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 1868
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1869
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)test2_blank); 
;
	.dbg	line, "quarto.c", 1870
	lda     #<(_test2_blank)
	ldx     #>(_test2_blank)
	jsr     _vram_unrle
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 1871
	jsr     _ppu_on_all
;
; music_stop();
;
	.dbg	line, "quarto.c", 1873
	jsr     _music_stop
;
; delay(30) ;
;
	.dbg	line, "quarto.c", 1876
	lda     #$1E
	jsr     _delay
;
; voiceQuarto() ;
;
	.dbg	line, "quarto.c", 1878
	jsr     _voiceQuarto
;
; update_init() ;
;
	.dbg	line, "quarto.c", 1896
	jsr     _update_init
;
; for( tmp=0; tmp < 16; tmp++ ){
;
	.dbg	line, "quarto.c", 1897
	lda     #$00
	sta     _tmp
L0017:	lda     _tmp
	cmp     #$10
	bcs     L0018
;
; up_stage(stage_anime_index[tmp][0], stage_anime_index[tmp][1] );
;
	.dbg	line, "quarto.c", 1898
	ldx     #$00
	lda     _tmp
	asl     a
	bcc     L0011
	inx
L0011:	sta     ptr1
	txa
	clc
	adc     #>(_stage_anime_index)
	sta     ptr1+1
	ldy     #<(_stage_anime_index)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _tmp
	asl     a
	bcc     L0015
	inx
	clc
L0015:	adc     #<(_stage_anime_index)
	sta     ptr1
	txa
	adc     #>(_stage_anime_index)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _up_stage
;
; for( tmp=0; tmp < 16; tmp++ ){
;
	.dbg	line, "quarto.c", 1897
	inc     _tmp
	jmp     L0017
;
; delay(15) ;
;
	.dbg	line, "quarto.c", 1901
L0018:	lda     #$0F
	jsr     _delay
;
; for( x = 0; x < 8; x++ ){
;
	.dbg	line, "quarto.c", 1902
	lda     #$00
	sta     _x
L0019:	lda     _x
	cmp     #$08
	jcs     L0008
;
; sfx_play(2,0);
;
	.dbg	line, "quarto.c", 1903
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; putStockKoma((x*4),0,0xAA, (unsigned char*)koma_list[0][0][x]) ;
;
	.dbg	line, "quarto.c", 1905
	jsr     decsp3
	lda     _x
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$AA
	dey
	sta     (sp),y
	ldx     #$00
	lda     _x
	asl     a
	bcc     L0016
	inx
	clc
L0016:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; sfx_play(2,1);
;
	.dbg	line, "quarto.c", 1906
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; putStockKoma(28-(x*4),26,0x55, (unsigned char*)koma_list[0][1][7-x]) ;
;
	.dbg	line, "quarto.c", 1908
	jsr     decsp3
	lda     #$1C
	jsr     pusha0
	lda     _x
	jsr     shlax2
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	lda     #$1A
	dey
	sta     (sp),y
	lda     #$55
	dey
	sta     (sp),y
	lda     #$07
	sec
	sbc     _x
	pha
	tya
	sbc     #$00
	sta     tmp1
	pla
	asl     a
	rol     tmp1
	clc
	adc     #<(_koma_list+16)
	sta     ptr1
	lda     tmp1
	adc     #>(_koma_list+16)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; for( x = 0; x < 8; x++ ){
;
	.dbg	line, "quarto.c", 1902
	inc     _x
	jmp     L0019
;
; memfill( stage_stat, 0x00, 16 );
;
	.dbg	line, "quarto.c", 1913
L0008:	jsr     decsp3
	lda     #<(_stage_stat)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_stage_stat)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$10
	jsr     _memfill
;
; memfill( koma_exist, 0x01, 16 );
;
	.dbg	line, "quarto.c", 1914
	jsr     decsp3
	lda     #<(_koma_exist)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_koma_exist)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     #$10
	jsr     _memfill
;
; music_play(1);
;
	.dbg	line, "quarto.c", 1921
	lda     #$01
	jsr     _music_play
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 1924
	lda     #$0A
	jsr     _delay
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 1931
L000B:	lda     #$0A
	jsr     _delay
;
; procChooseKoma() ;
;
	.dbg	line, "quarto.c", 1933
	jsr     _procChooseKoma
;
; procCheckQuarto() ;
;
	.dbg	line, "quarto.c", 1934
	jsr     _procCheckQuarto
;
; procMooveKoma() ;
;
	.dbg	line, "quarto.c", 1936
	jsr     _procMooveKoma
;
; procCheckQuarto() ;
;
	.dbg	line, "quarto.c", 1937
	jsr     _procCheckQuarto
;
; while(1)
;
	.dbg	line, "quarto.c", 1929
	jmp     L000B

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ put_update_debug (unsigned char x, unsigned char y, unsigned char len, const char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_update_debug: near

	.dbg	func, "put_update_debug", "00", extern, "_put_update_debug"
	.dbg	sym, "x", "00", auto, 4
	.dbg	sym, "y", "00", auto, 3
	.dbg	sym, "len", "00", auto, 2
	.dbg	sym, "str", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 777
	jsr     pushax
;
; update_debug[0]=MSB(NTADR_A(x,y))|NT_UPD_HORZ;//set the address
;
	.dbg	line, "quarto.c", 779
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	lda     tmp1
	ora     #$20
	tax
	txa
	cpx     #$80
	ora     #$40
	sta     _update_debug
;
; update_debug[1]=LSB(NTADR_A(x,y));
;
	.dbg	line, "quarto.c", 780
	dey
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	sta     _update_debug+1
	lda     tmp1
	ora     #$20
;
; update_debug[2]=len;//update sequence is 4 tiles wide
;
	.dbg	line, "quarto.c", 781
	ldy     #$02
	lda     (sp),y
	sta     _update_debug+2
;
; update_debug[3+len]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 782
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$03
	bcc     L000B
	inx
	clc
L000B:	adc     #<(_update_debug)
	sta     ptr1
	txa
	adc     #>(_update_debug)
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; set_vram_update(update_debug);
;
	.dbg	line, "quarto.c", 783
	lda     #<(_update_debug)
	ldx     #>(_update_debug)
	jsr     _set_vram_update
;
; for( dbgcnt = 0;dbgcnt<len;dbgcnt++)
;
	.dbg	line, "quarto.c", 785
	lda     #$00
	sta     _dbgcnt
L000D:	lda     _dbgcnt
	ldy     #$02
	cmp     (sp),y
	bcs     L0005
;
; if(!*str) break;
;
	.dbg	line, "quarto.c", 787
	dey
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	beq     L0005
;
; update_debug[3+dbgcnt]=(*str++)-0x20 ;//fill row buffer with random tiles
;
	.dbg	line, "quarto.c", 788
	ldx     #$00
	lda     _dbgcnt
	clc
	adc     #$03
	bcc     L000C
	inx
	clc
L000C:	adc     #<(_update_debug)
	sta     sreg
	txa
	adc     #>(_update_debug)
	sta     sreg+1
	iny
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$20
	sta     (sreg),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
;
; for( dbgcnt = 0;dbgcnt<len;dbgcnt++)
;
	.dbg	line, "quarto.c", 785
	inc     _dbgcnt
	jmp     L000D
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 790
L0005:	jsr     _ppu_wait_frame
;
; set_vram_update(0);
;
	.dbg	line, "quarto.c", 791
	ldx     #$00
	txa
	jsr     _set_vram_update
;
; }
;
	.dbg	line, "quarto.c", 792
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ update_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_init: near

	.dbg	func, "update_init", "00", extern, "_update_init"

.segment	"CODE"

;
; update_list[0]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 796
	lda     #$60
	sta     _update_list
;
; update_list[1]=0x00;
;
	.dbg	line, "quarto.c", 797
	lda     #$00
	sta     _update_list+1
;
; update_list[2]=3;
;
	.dbg	line, "quarto.c", 798
	lda     #$03
	sta     _update_list+2
;
; update_list[(6)]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 800
	lda     #$60
	sta     _update_list+6
;
; update_list[(6)+1]=0x00;
;
	.dbg	line, "quarto.c", 801
	lda     #$00
	sta     _update_list+7
;
; update_list[(6)+2]=5;
;
	.dbg	line, "quarto.c", 802
	lda     #$05
	sta     _update_list+8
;
; update_list[(6+8)]=0x20|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 804
	lda     #$60
	sta     _update_list+14
;
; update_list[(6+8)+1]=0x00;
;
	.dbg	line, "quarto.c", 805
	lda     #$00
	sta     _update_list+15
;
; update_list[(6+8)+2]=5;
;
	.dbg	line, "quarto.c", 806
	lda     #$05
	sta     _update_list+16
;
; update_list[(6+8+8)]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 808
	lda     #$FF
	sta     _update_list+22
;
; set_vram_update(update_list);
;
	.dbg	line, "quarto.c", 809
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jmp     _set_vram_update

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ upProc (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upProc: near

	.dbg	func, "upProc", "00", extern, "_upProc"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 828
	jsr     pusha
;
; for( i = 0; i < 5; i++ ){
;
	.dbg	line, "quarto.c", 829
	lda     #$00
	sta     _i
L0068:	lda     _i
	cmp     #$05
	jcs     L0082
;
; if( anime[x][y] == 0 ){
;
	.dbg	line, "quarto.c", 830
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	bne     L0006
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 832
	tax
	lda     _i
	beq     L006C
	cmp     #$04
	beq     L006C
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 833
	clc
	adc     #$03
	bcc     L000B
	inx
L000B:	sec
	sbc     #$01
	bcs     L000C
	dex
L000C:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE5+i) ;
;
	.dbg	line, "quarto.c", 835
	tax
L006C:	lda     _i
	clc
	adc     #$06
	bcc     L0054
	inx
	clc
L0054:	adc     #$03
	bcc     L0055
	inx
	clc
L0055:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF5+i) ;
;
	.dbg	line, "quarto.c", 836
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0056
	inx
	clc
L0056:	adc     #$03
	bcc     L0057
	inx
	clc
L0057:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F5
;
; }else if( anime[x][y] == 1 ){
;
	.dbg	line, "quarto.c", 837
	jmp     L0087
L0006:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$01
	bne     L0014
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 838
	ldx     #$00
	lda     _i
	beq     L0070
	cmp     #$04
	beq     L0070
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 839
	clc
	adc     #$03
	bcc     L0019
	inx
L0019:	sec
	sbc     #$01
	bcs     L001A
	dex
L001A:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE5+i) ;
;
	.dbg	line, "quarto.c", 841
	tax
L0070:	lda     _i
	clc
	adc     #$06
	bcc     L0058
	inx
	clc
L0058:	adc     #$03
	bcc     L0059
	inx
	clc
L0059:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF5+i) ;
;
	.dbg	line, "quarto.c", 842
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L005A
	inx
	clc
L005A:	adc     #$03
	bcc     L005B
	inx
	clc
L005B:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F5
;
; }else if( anime[x][y] == 2 ){
;
	.dbg	line, "quarto.c", 843
	jmp     L0087
L0014:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$02
	bne     L0022
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 844
	ldx     #$00
	lda     _i
	beq     L0074
	cmp     #$04
	beq     L0074
;
; update_list[i+3-1] = 0 ; 
;
	.dbg	line, "quarto.c", 845
	clc
	adc     #$03
	bcc     L0027
	inx
L0027:	sec
	sbc     #$01
	bcs     L0028
	dex
L0028:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
;
; update_list[i+(6)+3] = (unsigned char)(0xE0+i) ;
;
	.dbg	line, "quarto.c", 847
	tax
L0074:	lda     _i
	clc
	adc     #$06
	bcc     L005C
	inx
	clc
L005C:	adc     #$03
	bcc     L005D
	inx
	clc
L005D:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$E0
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xF0+i) ;
;
	.dbg	line, "quarto.c", 848
	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L005E
	inx
	clc
L005E:	adc     #$03
	bcc     L005F
	inx
	clc
L005F:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$F0
;
; }else if( anime[x][y] == 3 ){
;
	.dbg	line, "quarto.c", 849
	jmp     L0087
L0022:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$03
	jne     L0030
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 850
	lda     _i
	beq     L0078
	cmp     #$04
	beq     L0078
;
; update_list[i+3-1] = (unsigned char)(0xC5+i) ;
;
	.dbg	line, "quarto.c", 851
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0035
	inx
L0035:	sec
	sbc     #$01
	bcs     L0036
	dex
L0036:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C5
	ldy     #$00
	sta     (ptr1),y
;
; if( i == 0 || i == 4 ){
;
	.dbg	line, "quarto.c", 853
L0078:	lda     _i
	beq     L0079
	cmp     #$04
	bne     L0084
;
; update_list[i+(6)+3] = (unsigned char)(0xC5+i) ;
;
	.dbg	line, "quarto.c", 854
L0079:	ldx     #$00
	lda     _i
	clc
	adc     #$06
	bcc     L0060
	inx
	clc
L0060:	adc     #$03
	bcc     L0061
	inx
	clc
L0061:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C5
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xD5+i) ;
;
	.dbg	line, "quarto.c", 856
L0084:	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0062
	inx
	clc
L0062:	adc     #$03
	bcc     L0063
	inx
	clc
L0063:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D5
;
; }else if( anime[x][y] == 4 ){
;
	.dbg	line, "quarto.c", 857
	jmp     L0086
L0030:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$04
	jne     L0001
;
; if( i != 0 && i != 4 ){
;
	.dbg	line, "quarto.c", 858
	lda     _i
	beq     L007E
	cmp     #$04
	beq     L007E
;
; update_list[i+3-1] = (unsigned char)(0xC0+i) ;
;
	.dbg	line, "quarto.c", 859
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L0047
	inx
L0047:	sec
	sbc     #$01
	bcs     L0048
	dex
L0048:	clc
	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C0
	ldy     #$00
	sta     (ptr1),y
;
; if( i == 0 || i == 4 ){
;
	.dbg	line, "quarto.c", 861
L007E:	lda     _i
	beq     L007F
	cmp     #$04
	bne     L0085
;
; update_list[i+(6)+3] = (unsigned char)(0xC0+i) ;
;
	.dbg	line, "quarto.c", 862
L007F:	ldx     #$00
	lda     _i
	clc
	adc     #$06
	bcc     L0064
	inx
	clc
L0064:	adc     #$03
	bcc     L0065
	inx
	clc
L0065:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$C0
	ldy     #$00
	sta     (ptr1),y
;
; update_list[i+(6+8)+3] = (unsigned char)(0xD0+i) ;
;
	.dbg	line, "quarto.c", 864
L0085:	ldx     #$00
	lda     _i
	clc
	adc     #$0E
	bcc     L0066
	inx
	clc
L0066:	adc     #$03
	bcc     L0067
	inx
	clc
L0067:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D0
L0086:	ldy     #$00
L0087:	sta     (ptr1),y
;
; for( i = 0; i < 5; i++ ){
;
	.dbg	line, "quarto.c", 829
	inc     _i
	jmp     L0068
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 869
L0082:	lda     #$01
	jsr     _delay
;
; }
;
	.dbg	line, "quarto.c", 870
L0001:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ setStageAdr (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setStageAdr: near

	.dbg	func, "setStageAdr", "00", extern, "_setStageAdr"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 872
	jsr     pusha
;
; update_list[0]=0x20+stage_pos[x][y][0]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 873
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	ldy     #$00
	lda     (sp),y
	jsr     mulax6
	clc
	adc     sreg
	sta     ptr1
	txa
	adc     sreg+1
	sta     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list
;
; update_list[1]=stage_pos[x][y][1]+1;
;
	.dbg	line, "quarto.c", 874
	iny
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$01
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     _update_list+1
;
; update_list[(6)]=0x20+stage_pos[x][y][2]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 875
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$02
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list+6
;
; update_list[(6)+1]=stage_pos[x][y][3];
;
	.dbg	line, "quarto.c", 876
	dey
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$03
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_list+7
;
; update_list[(6+8)]=0x20+stage_pos[x][y][4]|NT_UPD_HORZ;//horizontal update sequence, dummy address
;
	.dbg	line, "quarto.c", 877
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$04
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$20
	ora     #$40
	sta     _update_list+14
;
; update_list[(6+8)+1]=stage_pos[x][y][5];
;
	.dbg	line, "quarto.c", 878
	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$18
	jsr     tosmula0
	clc
	adc     #<(_stage_pos)
	sta     sreg
	txa
	adc     #>(_stage_pos)
	sta     sreg+1
	ldx     #$00
	lda     (sp,x)
	jsr     mulax6
	clc
	adc     sreg
	pha
	txa
	adc     sreg+1
	tax
	pla
	ldy     #$05
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_list+15
;
; }
;
	.dbg	line, "quarto.c", 879
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ up_stage (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_up_stage: near

	.dbg	func, "up_stage", "00", extern, "_up_stage"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 881
	jsr     pusha
;
; setStageAdr(x,y);
;
	.dbg	line, "quarto.c", 882
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _setStageAdr
;
; sfx_play(5,0);
;
	.dbg	line, "quarto.c", 891
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( anime[x][y] = 0 ; anime[x][y] < 5; anime[x][y]++ ){
;
	.dbg	line, "quarto.c", 893
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0006
	inx
L0006:	sta     ptr1
	stx     ptr1+1
	tya
	sta     (ptr1),y
L0002:	iny
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	cmp     #$05
	bcs     L0003
;
; upProc(x,y) ;
;
	.dbg	line, "quarto.c", 937
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _upProc
;
; for( anime[x][y] = 0 ; anime[x][y] < 5; anime[x][y]++ ){
;
	.dbg	line, "quarto.c", 893
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_anime)
	sta     ptr1
	txa
	adc     #>(_anime)
	sta     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0007
	inx
L0007:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
	jmp     L0002
;
; }
;
	.dbg	line, "quarto.c", 939
L0003:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ cycleColor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cycleColor: near

	.dbg	func, "cycleColor", "00", extern, "_cycleColor"

.segment	"CODE"

;
; if(frame%4==0){ pal_bg((char*)open_palette4);}
;
	.dbg	line, "quarto.c", 953
	lda     _frame
	and     #$03
	bne     L000A
	lda     #<(_open_palette4)
	ldx     #>(_open_palette4)
	jsr     _pal_bg
;
; if(frame%4==1){ pal_bg((char*)open_palette3);}
;
	.dbg	line, "quarto.c", 954
L000A:	lda     _frame
	and     #$03
	cmp     #$01
	bne     L000B
	lda     #<(_open_palette3)
	ldx     #>(_open_palette3)
	jsr     _pal_bg
;
; if(frame%4==2){ pal_bg((char*)open_palette2);}
;
	.dbg	line, "quarto.c", 955
L000B:	lda     _frame
	and     #$03
	cmp     #$02
	bne     L000C
	lda     #<(_open_palette2)
	ldx     #>(_open_palette2)
	jsr     _pal_bg
;
; if(frame%4==3){ pal_bg((char*)open_palette1);}
;
	.dbg	line, "quarto.c", 956
L000C:	lda     _frame
	and     #$03
	cmp     #$03
	bne     L0008
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jmp     _pal_bg
;
; }
;
	.dbg	line, "quarto.c", 957
L0008:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ cycleSprColor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cycleSprColor: near

	.dbg	func, "cycleSprColor", "00", extern, "_cycleSprColor"

.segment	"CODE"

;
; if(frame%4==0){ pal_spr((char*)open_palette4);}
;
	.dbg	line, "quarto.c", 960
	lda     _frame
	and     #$03
	bne     L000A
	lda     #<(_open_palette4)
	ldx     #>(_open_palette4)
	jsr     _pal_spr
;
; if(frame%4==1){ pal_spr((char*)open_palette3);}
;
	.dbg	line, "quarto.c", 961
L000A:	lda     _frame
	and     #$03
	cmp     #$01
	bne     L000B
	lda     #<(_open_palette3)
	ldx     #>(_open_palette3)
	jsr     _pal_spr
;
; if(frame%4==2){ pal_spr((char*)open_palette2);}
;
	.dbg	line, "quarto.c", 962
L000B:	lda     _frame
	and     #$03
	cmp     #$02
	bne     L000C
	lda     #<(_open_palette2)
	ldx     #>(_open_palette2)
	jsr     _pal_spr
;
; if(frame%4==3){ pal_spr((char*)open_palette1);}
;
	.dbg	line, "quarto.c", 963
L000C:	lda     _frame
	and     #$03
	cmp     #$03
	bne     L0008
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jmp     _pal_spr
;
; }
;
	.dbg	line, "quarto.c", 964
L0008:	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkForceBreak (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkForceBreak: near

	.dbg	func, "checkForceBreak", "00", extern, "_checkForceBreak"

.segment	"CODE"

;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 967
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_START || pad&PAD_SELECT || pad&PAD_A || pad&PAD_B ){
;
	.dbg	line, "quarto.c", 968
	and     #$10
	bne     L0005
	lda     _pad
	and     #$20
	bne     L0005
	lda     _pad
	and     #$80
	bne     L0005
	lda     _pad
	and     #$40
	bne     L0005
	tax
	rts
;
; return 1 ;
;
	.dbg	line, "quarto.c", 969
L0005:	ldx     #$00
	lda     #$01
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgFlash (unsigned char action)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgFlash: near

	.dbg	func, "bgFlash", "00", extern, "_bgFlash"
	.dbg	sym, "action", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 983
	jsr     pusha
;
; pal_bright(action);
;
	.dbg	line, "quarto.c", 984
	ldy     #$00
	lda     (sp),y
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 985
	lda     #$06
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 986
	lda     #$04
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 987
	lda     #$06
	jsr     _delay
;
; pal_bright(action);
;
	.dbg	line, "quarto.c", 988
	ldy     #$00
	lda     (sp),y
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 989
	lda     #$06
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 990
	lda     #$04
	jsr     _pal_bright
;
; }
;
	.dbg	line, "quarto.c", 991
	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgDown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgDown: near

	.dbg	func, "bgDown", "00", extern, "_bgDown"

.segment	"CODE"

;
; pal_bright(3);
;
	.dbg	line, "quarto.c", 994
	lda     #$03
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 995
	lda     #$06
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "quarto.c", 996
	lda     #$02
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 997
	lda     #$06
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "quarto.c", 998
	lda     #$01
	jsr     _pal_bright
;
; delay(6) ;
;
	.dbg	line, "quarto.c", 999
	lda     #$06
	jsr     _delay
;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 1000
	lda     #$00
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bgUp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bgUp: near

	.dbg	func, "bgUp", "00", extern, "_bgUp"

.segment	"CODE"

;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 1004
	lda     #$00
	jsr     _pal_bright
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 1005
	lda     #$0A
	jsr     _delay
;
; pal_bright(1);
;
	.dbg	line, "quarto.c", 1006
	lda     #$01
	jsr     _pal_bright
;
; delay(4) ;
;
	.dbg	line, "quarto.c", 1007
	lda     #$04
	jsr     _delay
;
; pal_bright(2);
;
	.dbg	line, "quarto.c", 1008
	lda     #$02
	jsr     _pal_bright
;
; delay(4) ;
;
	.dbg	line, "quarto.c", 1009
	lda     #$04
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1010
	lda     #$04
	jmp     _pal_bright

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ move_next (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_next: near

	.dbg	func, "move_next", "00", extern, "_move_next"

.segment	"CODE"

;
; for( i = 0; i < 2; i++ ){
;
	.dbg	line, "quarto.c", 1016
	lda     #$00
	sta     _i
L0056:	lda     _i
	cmp     #$02
	bcc     L0065
;
; }
;
	.dbg	line, "quarto.c", 1115
	rts
;
; koma_frame = 0 ;
;
	.dbg	line, "quarto.c", 1017
L0065:	lda     #$00
	sta     _koma_frame
;
; if( koma_frame % 10 == 0 ){ frame++ ; }
;
	.dbg	line, "quarto.c", 1020
L0057:	lda     _koma_frame
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L0009
	cmp     #$00
	bne     L0009
	inc     _frame
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1022
L0009:	lda     #$01
	jsr     _delay
;
; cycleColor() ;
;
	.dbg	line, "quarto.c", 1023
	jsr     _cycleColor
;
; if( koma_frame == 0 ){
;
	.dbg	line, "quarto.c", 1025
	lda     _koma_frame
	jne     L000F
;
; if( tmp < 10 ){ 
;
	.dbg	line, "quarto.c", 1027
	lda     _tmp
	cmp     #$0A
	bcs     L0058
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1028
	lda     #$01
	jsr     _delay
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 1029
	inc     _tmp
;
; continue ;
;
	.dbg	line, "quarto.c", 1030
	jmp     L0057
;
; if( tmp == 10 ){
;
	.dbg	line, "quarto.c", 1032
L0058:	lda     _tmp
	cmp     #$0A
	jne     L0059
;
; tmp++ ;
;
	.dbg	line, "quarto.c", 1033
	inc     _tmp
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1034
	lda     #$14
	jsr     _delay
;
; bgFlash(0) ;
;
	.dbg	line, "quarto.c", 1036
	lda     #$00
	jsr     _bgFlash
;
; bgDown() ;
;
	.dbg	line, "quarto.c", 1037
	jsr     _bgDown
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 1039
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1040
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)open_name);
;
	.dbg	line, "quarto.c", 1041
	lda     #<(_open_name)
	ldx     #>(_open_name)
	jsr     _vram_unrle
;
; ppu_on_all() ;
;
	.dbg	line, "quarto.c", 1042
	jsr     _ppu_on_all
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1044
	lda     #$14
	jsr     _delay
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1045
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1046
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1047
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; bgUp() ;
;
	.dbg	line, "quarto.c", 1049
	jsr     _bgUp
;
; put_update_debug(10,25, 13, "PRESS BUTTON!" );
;
	.dbg	line, "quarto.c", 1051
	jsr     decsp3
	lda     #$0A
	ldy     #$02
	sta     (sp),y
	lda     #$19
	dey
	sta     (sp),y
	lda     #$0D
	dey
	sta     (sp),y
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _put_update_debug
;
; put_update_debug(11,27, 10, "006 * 2021" );
;
	.dbg	line, "quarto.c", 1052
	jsr     decsp3
	lda     #$0B
	ldy     #$02
	sta     (sp),y
	lda     #$1B
	dey
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _put_update_debug
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1053
	lda     #$14
	jsr     _delay
;
; pal_bright(4);
;
	.dbg	line, "quarto.c", 1054
	lda     #$04
	jsr     _pal_bright
;
; music_play(0);
;
	.dbg	line, "quarto.c", 1055
	lda     #$00
	jsr     _music_play
;
; for( j = 0; j < 14; j++ ){
;
	.dbg	line, "quarto.c", 1058
L0059:	lda     #$00
	sta     _j
L005A:	lda     _j
	cmp     #$0E
	jcs     L000F
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1059
	lda     #$01
	jsr     _delay
;
; koma_y[i]-- ;
;
	.dbg	line, "quarto.c", 1060
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L0012
	inx
L0012:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1061
	sty     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1062
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1063
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; cycleColor() ;
;
	.dbg	line, "quarto.c", 1064
	jsr     _cycleColor
;
; if( koma_frame % 10 == 0 ){ frame++ ; }
;
	.dbg	line, "quarto.c", 1065
	lda     _koma_frame
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	cpx     #$00
	bne     L0013
	cmp     #$00
	bne     L0013
	inc     _frame
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1066
L0013:	inc     _koma_frame
;
; if( checkForceBreak() ){ return ; }
;
	.dbg	line, "quarto.c", 1067
	jsr     _checkForceBreak
	tax
	beq     L0066
;
; }
;
	.dbg	line, "quarto.c", 1115
	rts
;
; for( j = 0; j < 14; j++ ){
;
	.dbg	line, "quarto.c", 1058
L0066:	inc     _j
	jmp     L005A
;
; if( checkForceBreak() ){ return ; }
;
	.dbg	line, "quarto.c", 1072
L000F:	jsr     _checkForceBreak
	tax
	beq     L0067
;
; }
;
	.dbg	line, "quarto.c", 1115
	rts
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1073
L0067:	inc     _koma_frame
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1075
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, koma_list[0][0][0] ) ;
;
	.dbg	line, "quarto.c", 1077
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list
	ldx     _koma_list+1
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( koma_x[1], koma_y[1], spr, koma_list[0][1][0] ) ;
;
	.dbg	line, "quarto.c", 1078
	jsr     decsp3
	lda     _koma_x+1
	ldy     #$02
	sta     (sp),y
	lda     _koma_y+1
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _koma_list+16
	ldx     _koma_list+16+1
	jsr     _oam_meta_spr
	sta     _spr
;
; if( koma_pos[i] == 0 ){
;
	.dbg	line, "quarto.c", 1081
	ldy     _i
	lda     _koma_pos,y
	bne     L0017
;
; if( koma_x[i] != 152 ){ koma_x[i]+=2; }
;
	.dbg	line, "quarto.c", 1082
	ldy     _i
	lda     _koma_x,y
	cmp     #$98
	beq     L0019
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L001B
	inx
L001B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 122 ){ koma_y[i]+=1; }
;
	.dbg	line, "quarto.c", 1083
L0019:	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	beq     L001C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L001E
	inx
L001E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 152 && koma_y[i] == 122 ){ 
;
	.dbg	line, "quarto.c", 1084
L001C:	ldy     _i
	lda     _koma_x,y
	cmp     #$98
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	jne     L0057
;
; koma_pos[i] = 1 ;
;
	.dbg	line, "quarto.c", 1085
	ldy     _i
	lda     #$01
;
; break ;
;
	.dbg	line, "quarto.c", 1086
	jmp     L0064
;
; else if( koma_pos[i] == 1 ){
;
	.dbg	line, "quarto.c", 1089
L0017:	ldy     _i
	lda     _koma_pos,y
	cmp     #$01
	bne     L0027
;
; if( koma_x[i] != 112 ){ koma_x[i]-=2; }
;
	.dbg	line, "quarto.c", 1090
	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	beq     L0029
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L002B
	inx
L002B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 144 ){ koma_y[i]+=1; }
;
	.dbg	line, "quarto.c", 1091
L0029:	ldy     _i
	lda     _koma_y,y
	cmp     #$90
	beq     L002C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L002E
	inx
L002E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 112 && koma_y[i] == 144  ){
;
	.dbg	line, "quarto.c", 1092
L002C:	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$90
	jne     L0057
;
; koma_pos[i] = 2 ;
;
	.dbg	line, "quarto.c", 1093
	ldy     _i
	lda     #$02
;
; break ;
;
	.dbg	line, "quarto.c", 1094
	jmp     L0064
;
; else if( koma_pos[i] == 2 ){
;
	.dbg	line, "quarto.c", 1097
L0027:	ldy     _i
	lda     _koma_pos,y
	cmp     #$02
	bne     L0037
;
; if( koma_x[i] != 72 ){ koma_x[i]-=2; }
;
	.dbg	line, "quarto.c", 1098
	ldy     _i
	lda     _koma_x,y
	cmp     #$48
	beq     L0039
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L003B
	inx
L003B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 122 ){ koma_y[i]-=1; }
;
	.dbg	line, "quarto.c", 1099
L0039:	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	beq     L003C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L003E
	inx
L003E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 72 && koma_y[i] == 122 ){
;
	.dbg	line, "quarto.c", 1100
L003C:	ldy     _i
	lda     _koma_x,y
	cmp     #$48
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$7A
	jne     L0057
;
; koma_pos[i] = 3 ;
;
	.dbg	line, "quarto.c", 1101
	ldy     _i
	lda     #$03
;
; break ;
;
	.dbg	line, "quarto.c", 1102
	jmp     L0064
;
; else if( koma_pos[i] == 3 ){
;
	.dbg	line, "quarto.c", 1105
L0037:	ldy     _i
	lda     _koma_pos,y
	cmp     #$03
	jne     L0057
;
; if( koma_x[i] != 112 ){ koma_x[i]+=2; }
;
	.dbg	line, "quarto.c", 1106
	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	beq     L0049
	lda     #<(_koma_x)
	ldx     #>(_koma_x)
	clc
	adc     _i
	bcc     L004B
	inx
L004B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	sta     (ptr1),y
;
; if( koma_y[i] != 96 ){ koma_y[i]-=1; }
;
	.dbg	line, "quarto.c", 1107
L0049:	ldy     _i
	lda     _koma_y,y
	cmp     #$60
	beq     L004C
	lda     #<(_koma_y)
	ldx     #>(_koma_y)
	clc
	adc     _i
	bcc     L004E
	inx
L004E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if( koma_x[i] == 112 && koma_y[i] == 96 ){
;
	.dbg	line, "quarto.c", 1108
L004C:	ldy     _i
	lda     _koma_x,y
	cmp     #$70
	jne     L0057
	ldy     _i
	lda     _koma_y,y
	cmp     #$60
	jne     L0057
;
; koma_pos[i] = 0 ;
;
	.dbg	line, "quarto.c", 1109
	ldy     _i
	lda     #$00
L0064:	sta     _koma_pos,y
;
; for( i = 0; i < 2; i++ ){
;
	.dbg	line, "quarto.c", 1016
	inc     _i
	jmp     L0056

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ getStagePos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getStagePos: near

	.dbg	func, "getStagePos", "00", extern, "_getStagePos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1119
	jsr     pusha
;
; j = 0 ;
;
	.dbg	line, "quarto.c", 1121
	lda     #$00
	sta     _j
;
; if(posx >= 2 && posx <= 5){
;
	.dbg	line, "quarto.c", 1123
	ldy     #$01
	lda     (sp),y
	cmp     #$02
	bcc     L006B
	cmp     #$06
	bcs     L006B
;
; if( posy >= 10 && posy <= 12 ){ posx = 3 ;posy = 12 ; j++; x_index=0 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1124
	dey
	lda     (sp),y
	cmp     #$0A
	bcc     L0006
	cmp     #$0D
	bcs     L0006
	lda     #$03
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 6 && posx <= 9){
;
	.dbg	line, "quarto.c", 1126
L0006:	iny
L006B:	lda     (sp),y
	cmp     #$06
	bcc     L0078
	cmp     #$0A
	bcs     L0078
;
; if( posy >= 8 && posy <= 10 ){ posx = 7 ;posy = 10 ; j++; x_index=0 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1127
	dey
	lda     (sp),y
	cmp     #$08
	bcc     L0073
	cmp     #$0B
	bcs     L0073
	lda     #$07
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$02
	sta     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 7 ;posy = 14 ; j++; x_index=1 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1128
L0073:	lda     (sp),y
	cmp     #$0C
	bcc     L0012
	cmp     #$0F
	bcs     L0012
	lda     #$07
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 10 && posx <= 13){
;
	.dbg	line, "quarto.c", 1130
L0012:	iny
L0078:	lda     (sp),y
	cmp     #$0A
	bcc     L008A
	cmp     #$0E
	bcs     L008A
;
; if( posy >= 6 && posy <= 8 ){ posx = 11 ;posy = 8 ; j++; x_index=0 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1131
	dey
	lda     (sp),y
	cmp     #$06
	bcc     L0080
	cmp     #$09
	bcs     L0080
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	inc     _j
	sty     _x_index
	lda     #$01
	sta     _y_index
;
; if( posy >= 10 && posy <= 12 ){ posx = 11 ;posy = 12 ; j++; x_index=1 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1132
L0080:	lda     (sp),y
	cmp     #$0A
	bcc     L0085
	cmp     #$0D
	bcs     L0085
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	lda     #$02
	sta     _y_index
;
; if( posy >= 14 && posy <= 16 ){ posx = 11 ;posy = 16 ; j++; x_index=2 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1133
L0085:	lda     (sp),y
	cmp     #$0E
	bcc     L0022
	cmp     #$11
	bcs     L0022
	lda     #$0B
	iny
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	lda     #$03
	sta     _y_index
;
; if(posx >= 14 && posx <= 17){
;
	.dbg	line, "quarto.c", 1135
L0022:	iny
L008A:	lda     (sp),y
	cmp     #$0E
	jcc     L00A1
	cmp     #$12
	bcs     L00A1
;
; if( posy >= 4 && posy <= 7 ){ posx = 15 ;posy = 6 ; j++; x_index=0 ; y_index=0 ; }
;
	.dbg	line, "quarto.c", 1136
	dey
	lda     (sp),y
	cmp     #$04
	bcc     L0092
	cmp     #$08
	bcs     L0092
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	inc     _j
	tya
	sta     _x_index
	sta     _y_index
;
; if( posy >= 8 && posy <= 10 ){ posx = 15 ;posy = 10 ; j++; x_index=1 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1137
L0092:	lda     (sp),y
	cmp     #$08
	bcc     L0097
	cmp     #$0B
	bcs     L0097
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	sta     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 15 ;posy = 14 ; j++; x_index=2 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1138
L0097:	lda     (sp),y
	cmp     #$0C
	bcc     L009C
	cmp     #$0F
	bcs     L009C
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	sta     _y_index
;
; if( posy >= 16 && posy <= 18 ){ posx = 15 ;posy = 18 ; j++; x_index=3 ; y_index=3 ;}
;
	.dbg	line, "quarto.c", 1139
L009C:	lda     (sp),y
	cmp     #$10
	bcc     L0036
	cmp     #$13
	bcs     L0036
	lda     #$0F
	iny
	sta     (sp),y
	lda     #$12
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	sta     _y_index
;
; if(posx >= 18 && posx <= 21){
;
	.dbg	line, "quarto.c", 1141
L0036:	iny
L00A1:	lda     (sp),y
	cmp     #$12
	bcc     L00B3
	cmp     #$16
	bcs     L00B3
;
; if( posy >= 6 && posy <= 8 ){ posx = 19 ;posy = 8 ; j++; x_index=1 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1142
	dey
	lda     (sp),y
	cmp     #$06
	bcc     L00A9
	cmp     #$09
	bcs     L00A9
	lda     #$13
	iny
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	inc     _j
	lda     #$01
	sta     _x_index
	sty     _y_index
;
; if( posy >= 10 && posy <= 12 ){ posx = 19 ;posy = 12 ; j++; x_index=2 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1143
L00A9:	lda     (sp),y
	cmp     #$0A
	bcc     L00AE
	cmp     #$0D
	bcs     L00AE
	lda     #$13
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	lda     #$01
	sta     _y_index
;
; if( posy >= 14 && posy <= 16 ){ posx = 19 ;posy = 16 ; j++; x_index=3 ; y_index=2 ;}
;
	.dbg	line, "quarto.c", 1144
L00AE:	lda     (sp),y
	cmp     #$0E
	bcc     L0046
	cmp     #$11
	bcs     L0046
	lda     #$13
	iny
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	lda     #$02
	sta     _y_index
;
; if(posx >= 22 && posx <= 25){
;
	.dbg	line, "quarto.c", 1146
L0046:	iny
L00B3:	lda     (sp),y
	cmp     #$16
	bcc     L00C0
	cmp     #$1A
	bcs     L00C0
;
; if( posy >= 8 && posy <= 10 ){ posx = 23 ;posy = 10 ; j++; x_index=2 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1147
	dey
	lda     (sp),y
	cmp     #$08
	bcc     L00BB
	cmp     #$0B
	bcs     L00BB
	lda     #$17
	iny
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	inc     _j
	lda     #$02
	sta     _x_index
	sty     _y_index
;
; if( posy >= 12 && posy <= 14 ){ posx = 23 ;posy = 14 ; j++; x_index=3 ; y_index=1 ;}
;
	.dbg	line, "quarto.c", 1148
L00BB:	lda     (sp),y
	cmp     #$0C
	bcc     L0052
	cmp     #$0F
	bcs     L0052
	lda     #$17
	iny
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	lda     #$01
	sta     _y_index
;
; if(posx >= 26 && posx <= 29){
;
	.dbg	line, "quarto.c", 1150
L0052:	iny
L00C0:	lda     (sp),y
	cmp     #$1A
	bcc     L005A
	cmp     #$1E
	bcs     L005A
;
; if( posy >= 10 && posy <= 12 ){ posx = 27 ;posy = 12 ; j++;x_index=3 ; y_index=0 ;}
;
	.dbg	line, "quarto.c", 1151
	dey
	lda     (sp),y
	cmp     #$0A
	bcc     L00C8
	cmp     #$0D
	bcs     L00C8
	lda     #$1B
	iny
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	inc     _j
	lda     #$03
	sta     _x_index
	sty     _y_index
;
; if( posy < 8 ){
;
	.dbg	line, "quarto.c", 1154
L005A:	ldy     #$00
L00C8:	lda     (sp),y
	cmp     #$08
	bcs     L00CA
;
; set_posh = 0x20 ;
;
	.dbg	line, "quarto.c", 1155
	lda     #$20
	sta     _set_posh
;
; set_posl = 0x00 + (0x20*posy) + posx ;
;
	.dbg	line, "quarto.c", 1156
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	bcc     L0063
;
; }else{
;
	.dbg	line, "quarto.c", 1157
	jmp     L0063
;
; set_posh = 0x20 + posy / 8 ;
;
	.dbg	line, "quarto.c", 1158
L00CA:	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
	sta     _set_posh
;
; set_posl = 0x00 + (0x20*(posy%8)) + posx ;
;
	.dbg	line, "quarto.c", 1159
	lda     (sp),y
	ldx     #$00
	and     #$07
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
L0063:	sta     _set_posl
;
; set_posx = posx ;
;
	.dbg	line, "quarto.c", 1161
	lda     (sp),y
	sta     _set_posx
;
; set_posy = posy ;
;
	.dbg	line, "quarto.c", 1162
	dey
	lda     (sp),y
	sta     _set_posy
;
; }
;
	.dbg	line, "quarto.c", 1164
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ getAttrPos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getAttrPos: near

	.dbg	func, "getAttrPos", "00", extern, "_getAttrPos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1166
	jsr     pusha
;
; set_posh = 0x23 ;
;
	.dbg	line, "quarto.c", 1167
	lda     #$23
	sta     _set_posh
;
; set_posl = 0xC0 + (0x08*(posy/4)) + posx/4 ;
;
	.dbg	line, "quarto.c", 1168
	ldy     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$C0
	sta     ptr1
	iny
	lda     (sp),y
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _set_posl
;
; }
;
	.dbg	line, "quarto.c", 1170
	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putStageKomaColor (unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putStageKomaColor: near

	.dbg	func, "putStageKomaColor", "00", extern, "_putStageKomaColor"
	.dbg	sym, "color", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1173
	jsr     pusha
;
; update_koma_color[0]=0x23|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1175
	lda     #$63
	sta     _update_koma_color
;
; update_koma_color[1]=0x00;
;
	.dbg	line, "quarto.c", 1176
	lda     #$00
	sta     _update_koma_color+1
;
; update_koma_color[2]=1;
;
	.dbg	line, "quarto.c", 1177
	lda     #$01
	sta     _update_koma_color+2
;
; update_koma_color[4]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1178
	lda     #$FF
	sta     _update_koma_color+4
;
; set_vram_update(update_koma_color);
;
	.dbg	line, "quarto.c", 1179
	lda     #<(_update_koma_color)
	ldx     #>(_update_koma_color)
	jsr     _set_vram_update
;
; for( i=0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1181
	lda     #$00
	sta     _i
L0037:	lda     _i
	cmp     #$04
	jcs     L0003
;
; update_koma_color[0]=0x23|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1182
	lda     #$63
	sta     _update_koma_color
;
; update_koma_color[1]=attr_pos[x_index][y_index][i];
;
	.dbg	line, "quarto.c", 1183
	ldx     #$00
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _update_koma_color+1
;
; if( (x_index - y_index) % 2 == 0 ){
;
	.dbg	line, "quarto.c", 1184
	lda     _x_index
	jsr     pusha0
	lda     _y_index
	jsr     tossuba0
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	cpx     #$00
	jne     L0006
	cmp     #$00
	jne     L0051
;
; if( i == 0 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b01000000:0b10000000 ; tmp3 = 0b00111111 ;}
;
	.dbg	line, "quarto.c", 1185
	lda     _i
	bne     L003A
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0009
	dex
L0009:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0038
	lda     #$40
	jmp     L0039
L0038:	lda     #$80
L0039:	sta     _tmp2
	lda     #$3F
	sta     _tmp3
;
; if( i == 1 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00010000:0b00100000 ; tmp3 = 0b11001111 ;}
;
	.dbg	line, "quarto.c", 1186
	ldx     #$00
L003A:	lda     _i
	cmp     #$01
	bne     L003D
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L000D
	dex
L000D:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L003B
	lda     #$10
	jmp     L003C
L003B:	lda     #$20
L003C:	sta     _tmp2
	lda     #$CF
	sta     _tmp3
;
; if( i == 2 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000100:0b00001000 ; tmp3 = 0b11110011 ;}
;
	.dbg	line, "quarto.c", 1187
	ldx     #$00
L003D:	lda     _i
	cmp     #$02
	bne     L0040
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0011
	dex
L0011:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L003E
	lda     #$04
	jmp     L003F
L003E:	lda     #$08
L003F:	sta     _tmp2
	lda     #$F3
	sta     _tmp3
;
; if( i == 3 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000001:0b00000010 ; tmp3 = 0b11111100 ;}
;
	.dbg	line, "quarto.c", 1188
	ldx     #$00
L0040:	lda     _i
	cmp     #$03
	jne     L004F
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0015
	dex
L0015:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0041
	lda     #$01
	jmp     L0042
L0041:	lda     #$02
L0042:	sta     _tmp2
	lda     #$FC
;
; }else{
;
	.dbg	line, "quarto.c", 1194
	jmp     L007A
;
; if( i == 0 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000100:0b00001000 ; tmp3 = 0b11110011 ;}
;
	.dbg	line, "quarto.c", 1195
L0006:	ldx     #$00
L0051:	lda     _i
	bne     L0046
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L001B
	dex
L001B:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0044
	lda     #$04
	jmp     L0045
L0044:	lda     #$08
L0045:	sta     _tmp2
	lda     #$F3
	sta     _tmp3
;
; if( i == 1 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00000001:0b00000010 ; tmp3 = 0b11111100 ;}
;
	.dbg	line, "quarto.c", 1196
	ldx     #$00
L0046:	lda     _i
	cmp     #$01
	bne     L0049
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L001F
	dex
L001F:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L0047
	lda     #$01
	jmp     L0048
L0047:	lda     #$02
L0048:	sta     _tmp2
	lda     #$FC
	sta     _tmp3
;
; if( i == 2 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b01000000:0b10000000 ; tmp3 = 0b00111111 ;}
;
	.dbg	line, "quarto.c", 1197
	ldx     #$00
L0049:	lda     _i
	cmp     #$02
	bne     L004C
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0023
	dex
L0023:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L004A
	lda     #$40
	jmp     L004B
L004A:	lda     #$80
L004B:	sta     _tmp2
	lda     #$3F
	sta     _tmp3
;
; if( i == 3 ){ tmp = attr_stat[attr_pos[x_index][y_index][i]-0xC8] ; tmp2 = color==0x55?0b00010000:0b00100000 ; tmp3 = 0b11001111 ;}
;
	.dbg	line, "quarto.c", 1198
	ldx     #$00
L004C:	lda     _i
	cmp     #$03
	bne     L004F
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L0027
	dex
L0027:	sta     ptr1
	txa
	clc
	adc     #>(_attr_stat)
	sta     ptr1+1
	ldy     #<(_attr_stat)
	lda     (ptr1),y
	sta     _tmp
	ldy     #$00
	lda     (sp),y
	cmp     #$55
	bne     L004D
	lda     #$10
	jmp     L004E
L004D:	lda     #$20
L004E:	sta     _tmp2
	lda     #$CF
L007A:	sta     _tmp3
;
; tmp = tmp & tmp3;
;
	.dbg	line, "quarto.c", 1199
	ldx     #$00
L004F:	lda     _tmp3
	and     _tmp
	sta     _tmp
;
; tmp = tmp | tmp2;
;
	.dbg	line, "quarto.c", 1200
	lda     _tmp2
	ora     _tmp
	sta     _tmp
;
; update_koma_color[3] = tmp ;
;
	.dbg	line, "quarto.c", 1201
	sta     _update_koma_color+3
;
; attr_stat[attr_pos[x_index][y_index][i]-0xC8] = tmp ;
;
	.dbg	line, "quarto.c", 1203
	lda     _x_index
	jsr     aslax4
	clc
	adc     #<(_attr_pos)
	sta     ptr1
	txa
	adc     #>(_attr_pos)
	sta     ptr1+1
	ldx     #$00
	lda     _y_index
	jsr     aslax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$C8
	bcs     L002A
	dex
L002A:	clc
	adc     #<(_attr_stat)
	sta     ptr1
	txa
	adc     #>(_attr_stat)
	sta     ptr1+1
	lda     _tmp
	ldy     #$00
	sta     (ptr1),y
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1205
	jsr     _ppu_wait_frame
;
; for( i=0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1181
	inc     _i
	jmp     L0037
;
; }
;
	.dbg	line, "quarto.c", 1207
L0003:	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putKomaColor (unsigned char posx, unsigned char posy, unsigned char color)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putKomaColor: near

	.dbg	func, "putKomaColor", "00", extern, "_putKomaColor"
	.dbg	sym, "posx", "00", auto, 2
	.dbg	sym, "posy", "00", auto, 1
	.dbg	sym, "color", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1210
	jsr     pusha
;
; getAttrPos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1211
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _getAttrPos
;
; update_koma_color[0]=set_posh|NT_UPD_HORZ;
;
	.dbg	line, "quarto.c", 1212
	lda     _set_posh
	ora     #$40
	sta     _update_koma_color
;
; update_koma_color[1]=set_posl;
;
	.dbg	line, "quarto.c", 1213
	lda     _set_posl
	sta     _update_koma_color+1
;
; update_koma_color[2]=1;
;
	.dbg	line, "quarto.c", 1214
	lda     #$01
	sta     _update_koma_color+2
;
; update_koma_color[4]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1215
	lda     #$FF
	sta     _update_koma_color+4
;
; set_vram_update(update_koma_color);
;
	.dbg	line, "quarto.c", 1216
	lda     #<(_update_koma_color)
	ldx     #>(_update_koma_color)
	jsr     _set_vram_update
;
; update_koma_color[3] = color;
;
	.dbg	line, "quarto.c", 1218
	ldy     #$00
	lda     (sp),y
	sta     _update_koma_color+3
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1220
	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1222
	jmp     incsp3

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkPutPos (unsigned char posx, unsigned char posy)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkPutPos: near

	.dbg	func, "checkPutPos", "00", extern, "_checkPutPos"
	.dbg	sym, "posx", "00", auto, 1
	.dbg	sym, "posy", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1224
	jsr     pusha
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1225
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _getStagePos
;
; if( j == 0 ){
;
	.dbg	line, "quarto.c", 1226
	ldx     #$00
	lda     _j
;
; return 1;
;
	.dbg	line, "quarto.c", 1227
	beq     L0007
;
; if( stage_stat[x_index][y_index] != 0 ){
;
	.dbg	line, "quarto.c", 1229
	lda     _x_index
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	ldy     _y_index
	ldx     #$00
	lda     (ptr1),y
	beq     L0001
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1230
L0007:	lda     #$01
;
; }
;
	.dbg	line, "quarto.c", 1233
L0001:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putStockKoma (unsigned char posx, unsigned char posy, unsigned char color, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putStockKoma: near

	.dbg	func, "putStockKoma", "00", extern, "_putStockKoma"
	.dbg	sym, "posx", "00", auto, 4
	.dbg	sym, "posy", "00", auto, 3
	.dbg	sym, "color", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1235
	jsr     pushax
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1236
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     _getStagePos
;
; update_koma[0]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1237
	lda     _set_posh
	ora     #$80
	sta     _update_koma
;
; update_koma[1]=set_posl;
;
	.dbg	line, "quarto.c", 1238
	lda     _set_posl
	sta     _update_koma+1
;
; update_koma[2]=4;
;
	.dbg	line, "quarto.c", 1239
	lda     #$04
	sta     _update_koma+2
;
; update_koma[7]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1240
	lda     _set_posh
	ora     #$80
	sta     _update_koma+7
;
; update_koma[8]=set_posl+1;
;
	.dbg	line, "quarto.c", 1241
	lda     _set_posl
	clc
	adc     #$01
	sta     _update_koma+8
;
; update_koma[9]=4;
;
	.dbg	line, "quarto.c", 1242
	lda     #$04
	sta     _update_koma+9
;
; update_koma[14]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1243
	lda     _set_posh
	ora     #$80
	sta     _update_koma+14
;
; update_koma[15]=set_posl+2;
;
	.dbg	line, "quarto.c", 1244
	lda     _set_posl
	clc
	adc     #$02
	sta     _update_koma+15
;
; update_koma[16]=4;
;
	.dbg	line, "quarto.c", 1245
	lda     #$04
	sta     _update_koma+16
;
; update_koma[(3+4)*3]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1246
	lda     #$FF
	sta     _update_koma+21
;
; set_vram_update(update_koma);
;
	.dbg	line, "quarto.c", 1247
	lda     #<(_update_koma)
	ldx     #>(_update_koma)
	jsr     _set_vram_update
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1249
	lda     #$00
	sta     _i
L0017:	lda     _i
	cmp     #$03
	bcs     L0005
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1250
	lda     #$00
	sta     _j
L0018:	lda     _j
	cmp     #$04
	bcs     L0019
;
; update_koma[7*i+j+3] = meta[4*(4*i+j)+2] ;
;
	.dbg	line, "quarto.c", 1251
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0014
	inx
	clc
L0014:	adc     #$03
	bcc     L0015
	inx
	clc
L0015:	adc     #<(_update_koma)
	sta     sreg
	txa
	adc     #>(_update_koma)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     shlax2
	clc
	adc     _j
	bcc     L0012
	inx
L0012:	jsr     aslax2
	clc
	adc     #$02
	bcc     L0016
	inx
	clc
L0016:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sreg),y
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1250
	inc     _j
	jmp     L0018
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1249
L0019:	inc     _i
	jmp     L0017
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1254
L0005:	jsr     _ppu_wait_frame
;
; if( posy == 26 ){
;
	.dbg	line, "quarto.c", 1257
	ldy     #$03
	lda     (sp),y
	cmp     #$1A
	bne     L000E
;
; tmp = color & 0b11110000 | 0b00000101 ;
;
	.dbg	line, "quarto.c", 1258
	dey
	lda     (sp),y
	and     #$F0
	ora     #$05
	sta     _tmp
;
; putKomaColor( posx, posy, tmp ) ;
;
	.dbg	line, "quarto.c", 1262
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     _tmp
	jsr     _putKomaColor
;
; putKomaColor( posx, posy+2, color ) ;
;
	.dbg	line, "quarto.c", 1263
	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	clc
	adc     #$02
;
; }else{
;
	.dbg	line, "quarto.c", 1264
	jmp     L001D
;
; putKomaColor( posx, posy, color) ;
;
	.dbg	line, "quarto.c", 1265
L000E:	jsr     decsp2
	ldy     #$06
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
L001D:	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _putKomaColor
;
; }
;
	.dbg	line, "quarto.c", 1267
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initBar: near

	.dbg	func, "initBar", "00", extern, "_initBar"

.segment	"CODE"

;
; put_update_debug(1,24, 13, "             " );
;
	.dbg	line, "quarto.c", 1292
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     #$0D
	dey
	sta     (sp),y
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _put_update_debug
;
; put_update_debug(1,5, 13, "             " );
;
	.dbg	line, "quarto.c", 1293
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	lda     #$0D
	dey
	sta     (sp),y
	lda     #<(S0005)
	ldx     #>(S0005)
	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ putKoma (unsigned char posx, unsigned char posy, unsigned char color, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putKoma: near

	.dbg	func, "putKoma", "00", extern, "_putKoma"
	.dbg	sym, "posx", "00", auto, 4
	.dbg	sym, "posy", "00", auto, 3
	.dbg	sym, "color", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1305
	jsr     pushax
;
; putStageKomaColor( color ) ;
;
	.dbg	line, "quarto.c", 1306
	ldy     #$02
	lda     (sp),y
	jsr     _putStageKomaColor
;
; getStagePos(posx, posy) ;
;
	.dbg	line, "quarto.c", 1308
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     _getStagePos
;
; update_koma[0]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1309
	lda     _set_posh
	ora     #$80
	sta     _update_koma
;
; update_koma[1]=set_posl;
;
	.dbg	line, "quarto.c", 1310
	lda     _set_posl
	sta     _update_koma+1
;
; update_koma[2]=4;
;
	.dbg	line, "quarto.c", 1311
	lda     #$04
	sta     _update_koma+2
;
; update_koma[7]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1312
	lda     _set_posh
	ora     #$80
	sta     _update_koma+7
;
; update_koma[8]=set_posl+1;
;
	.dbg	line, "quarto.c", 1313
	lda     _set_posl
	clc
	adc     #$01
	sta     _update_koma+8
;
; update_koma[9]=4;
;
	.dbg	line, "quarto.c", 1314
	lda     #$04
	sta     _update_koma+9
;
; update_koma[14]=set_posh|NT_UPD_VERT;
;
	.dbg	line, "quarto.c", 1315
	lda     _set_posh
	ora     #$80
	sta     _update_koma+14
;
; update_koma[15]=set_posl+2;
;
	.dbg	line, "quarto.c", 1316
	lda     _set_posl
	clc
	adc     #$02
	sta     _update_koma+15
;
; update_koma[16]=4;
;
	.dbg	line, "quarto.c", 1317
	lda     #$04
	sta     _update_koma+16
;
; update_koma[(3+4)*3]=NT_UPD_EOF;
;
	.dbg	line, "quarto.c", 1318
	lda     #$FF
	sta     _update_koma+21
;
; set_vram_update(update_koma);
;
	.dbg	line, "quarto.c", 1319
	lda     #<(_update_koma)
	ldx     #>(_update_koma)
	jsr     _set_vram_update
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1321
	lda     #$00
	sta     _i
L0040:	lda     _i
	cmp     #$03
	jcs     L0005
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1322
	lda     #$00
	sta     _j
L0041:	lda     _j
	cmp     #$04
	jcs     L0055
;
; update_koma[7*i+j+3] = meta[4*(4*i+j)+2] ;
;
	.dbg	line, "quarto.c", 1323
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0033
	inx
	clc
L0033:	adc     #$03
	bcc     L0034
	inx
	clc
L0034:	adc     #<(_update_koma)
	sta     sreg
	txa
	adc     #>(_update_koma)
	sta     sreg+1
	ldx     #$00
	lda     _i
	jsr     shlax2
	clc
	adc     _j
	bcc     L002C
	inx
L002C:	jsr     aslax2
	clc
	adc     #$02
	bcc     L0035
	inx
	clc
L0035:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sreg),y
;
; if( x_index != 0 && y_index != 0){
;
	.dbg	line, "quarto.c", 1326
	lda     _x_index
	jeq     L0054
	lda     _y_index
	jeq     L0054
;
; if( j == 0 ){
;
	.dbg	line, "quarto.c", 1327
	lda     _j
	jne     L0054
;
; if( ChooseKoma >= 4 && ChooseKoma <= 7 ){
;
	.dbg	line, "quarto.c", 1328
	lda     _ChooseKoma
	cmp     #$04
	bcc     L0048
	cmp     #$08
	bcs     L0048
;
; update_koma[7*i+j+3] = 0xD1+i ;
;
	.dbg	line, "quarto.c", 1330
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0036
	inx
	clc
L0036:	adc     #$03
	bcc     L0037
	inx
	clc
L0037:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	clc
	adc     #$D1
;
; }else{
;
	.dbg	line, "quarto.c", 1331
	jmp     L0059
;
; if( i == 1 ){ continue ; }
;
	.dbg	line, "quarto.c", 1333
L0048:	lda     _i
	cmp     #$01
	jeq     L0054
;
; if( ChooseKoma == 0 ){ update_koma[7*i+j+3] = i == 0 ? 0xAA : 0xAA+1 ;}
;
	.dbg	line, "quarto.c", 1334
	lda     _ChooseKoma
	bne     L004B
	tax
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L0038
	inx
	clc
L0038:	adc     #$03
	bcc     L0039
	inx
	clc
L0039:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L0049
	lda     #$AA
	jmp     L0056
L0049:	lda     #$AB
L0056:	sta     (ptr1),y
;
; if( ChooseKoma == 1 ){ update_koma[7*i+j+3] = i == 0 ? 0xBA : 0xBA+1 ;}
;
	.dbg	line, "quarto.c", 1335
L004B:	lda     _ChooseKoma
	cmp     #$01
	bne     L004E
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003A
	inx
	clc
L003A:	adc     #$03
	bcc     L003B
	inx
	clc
L003B:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L004C
	lda     #$BA
	jmp     L0057
L004C:	lda     #$BB
L0057:	sta     (ptr1),y
;
; if( ChooseKoma == 2 ){ update_koma[7*i+j+3] = i == 0 ? 0xAC : 0xAC+1 ;}
;
	.dbg	line, "quarto.c", 1336
L004E:	lda     _ChooseKoma
	cmp     #$02
	bne     L0051
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003C
	inx
	clc
L003C:	adc     #$03
	bcc     L003D
	inx
	clc
L003D:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L004F
	lda     #$AC
	jmp     L0058
L004F:	lda     #$AD
L0058:	sta     (ptr1),y
;
; if( ChooseKoma == 3 ){ update_koma[7*i+j+3] = i == 0 ? 0xBC : 0xBC+1 ;}
;
	.dbg	line, "quarto.c", 1337
L0051:	lda     _ChooseKoma
	cmp     #$03
	bne     L0054
	ldx     #$00
	lda     _i
	jsr     mulax7
	clc
	adc     _j
	bcc     L003E
	inx
	clc
L003E:	adc     #$03
	bcc     L003F
	inx
	clc
L003F:	adc     #<(_update_koma)
	sta     ptr1
	txa
	adc     #>(_update_koma)
	sta     ptr1+1
	lda     _i
	bne     L0052
	lda     #$BC
	jmp     L0059
L0052:	lda     #$BD
L0059:	sta     (ptr1),y
;
; for( j=0; j<4; j++ ){
;
	.dbg	line, "quarto.c", 1322
L0054:	inc     _j
	jmp     L0041
;
; for( i=0; i<3; i++ ){
;
	.dbg	line, "quarto.c", 1321
L0055:	inc     _i
	jmp     L0040
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1343
L0005:	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1344
	jmp     incsp5

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printCursor (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printCursor: near

	.dbg	func, "printCursor", "00", extern, "_printCursor"

.segment	"CODE"

;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1348
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( ChooseKoma*32+8, 30+(selBW*170), spr, selBW==0 ? cursor : cursor2  ) ;
;
	.dbg	line, "quarto.c", 1349
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	jsr     pusha0
	lda     #$AA
	jsr     tosumula0
	clc
	adc     #$1E
	ldy     #$01
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _selBW
	bne     L0004
	lda     #<(_cursor)
	ldx     #>(_cursor)
	jmp     L0005
L0004:	lda     #<(_cursor2)
	ldx     #>(_cursor2)
L0005:	jsr     _oam_meta_spr
	sta     _spr
;
; }
;
	.dbg	line, "quarto.c", 1350
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkLineQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkLineQuarto: near

	.dbg	func, "checkLineQuarto", "00", extern, "_checkLineQuarto"

.segment	"CODE"

;
; if ( q_black == 4 || q_white == 4 || q_high == 4 || q_low == 4 || 
;
	.dbg	line, "quarto.c", 1364
	lda     _q_black
	cmp     #$04
	beq     L0005
	lda     _q_white
	cmp     #$04
	beq     L0005
	lda     _q_high
	cmp     #$04
	beq     L0005
	lda     _q_low
	cmp     #$04
	beq     L0005
;
; q_square == 4 || q_circle == 4 || q_plane == 4 || q_dot == 4 ) {
;
	.dbg	line, "quarto.c", 1365
	lda     _q_square
	cmp     #$04
	beq     L0005
	lda     _q_circle
	cmp     #$04
	beq     L0005
	lda     _q_plane
	cmp     #$04
	beq     L0005
	lda     _q_dot
	cmp     #$04
	beq     L0005
	ldx     #$00
	txa
	rts
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1366
L0005:	ldx     #$00
	lda     #$01
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initQuartoFlg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initQuartoFlg: near

	.dbg	func, "initQuartoFlg", "00", extern, "_initQuartoFlg"

.segment	"CODE"

;
; q_black =0 ;
;
	.dbg	line, "quarto.c", 1372
	lda     #$00
	sta     _q_black
;
; q_white = 0 ;
;
	.dbg	line, "quarto.c", 1373
	sta     _q_white
;
; q_high = 0 ;
;
	.dbg	line, "quarto.c", 1374
	sta     _q_high
;
; q_low = 0 ;
;
	.dbg	line, "quarto.c", 1375
	sta     _q_low
;
; q_square = 0 ;
;
	.dbg	line, "quarto.c", 1376
	sta     _q_square
;
; q_circle = 0 ;
;
	.dbg	line, "quarto.c", 1377
	sta     _q_circle
;
; q_plane = 0 ;
;
	.dbg	line, "quarto.c", 1378
	sta     _q_plane
;
; q_dot = 0 ;
;
	.dbg	line, "quarto.c", 1379
	sta     _q_dot
;
; }
;
	.dbg	line, "quarto.c", 1380
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ bitCalc (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bitCalc: near

	.dbg	func, "bitCalc", "00", extern, "_bitCalc"
	.dbg	sym, "x", "00", auto, 1
	.dbg	sym, "y", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1382
	jsr     pusha
;
; calc = stage_stat[x][y] ; if( calc & 0b10000000 ){ q_black++ ;}
;
	.dbg	line, "quarto.c", 1383
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$80
	beq     L0002
	inc     _q_black
;
; calc = stage_stat[x][y] ; if( calc & 0b01000000 ){ q_high++ ;}
;
	.dbg	line, "quarto.c", 1384
L0002:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$40
	beq     L0003
	inc     _q_high
;
; calc = stage_stat[x][y] ; if( calc & 0b00100000 ){ q_square++ ;}
;
	.dbg	line, "quarto.c", 1385
L0003:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$20
	beq     L0004
	inc     _q_square
;
; calc = stage_stat[x][y] ; if( calc & 0b00010000 ){ q_plane++ ;}
;
	.dbg	line, "quarto.c", 1386
L0004:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$10
	beq     L0005
	inc     _q_plane
;
; calc = stage_stat[x][y] ; if( calc & 0b00001000 ){ q_white++ ;}
;
	.dbg	line, "quarto.c", 1387
L0005:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$08
	beq     L0006
	inc     _q_white
;
; calc = stage_stat[x][y] ; if( calc & 0b00000100 ){ q_low++ ;}
;
	.dbg	line, "quarto.c", 1388
L0006:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$04
	beq     L0007
	inc     _q_low
;
; calc = stage_stat[x][y] ; if( calc & 0b00000010 ){ q_circle++ ;}
;
	.dbg	line, "quarto.c", 1389
L0007:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$02
	beq     L0008
	inc     _q_circle
;
; calc = stage_stat[x][y] ; if( calc & 0b00000001 ){ q_dot++ ;}
;
	.dbg	line, "quarto.c", 1390
L0008:	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	sta     ptr1
	txa
	adc     #>(_stage_stat)
	sta     ptr1+1
	dey
	lda     (sp),y
	tay
	lda     (ptr1),y
	sta     _calc
	and     #$01
	beq     L0009
	inc     _q_dot
;
; }
;
	.dbg	line, "quarto.c", 1391
L0009:	jmp     incsp2

	.dbg	line
.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkQuarto: near

	.dbg	func, "checkQuarto", "00", extern, "_checkQuarto"

.segment	"CODE"

;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1394
	lda     #$00
	sta     _i
L001E:	lda     _i
	cmp     #$04
	bcs     L0020
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1395
	jsr     _initQuartoFlg
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1396
	lda     #$00
	sta     _j
L001F:	lda     _j
	cmp     #$04
	bcs     L0007
;
; bitCalc(i,j) ;
;
	.dbg	line, "quarto.c", 1397
	lda     _i
	jsr     pusha
	lda     _j
	jsr     _bitCalc
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1396
	inc     _j
	jmp     L001F
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1399
L0007:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L0004
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1400
	ldx     #$00
	rts
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1394
L0004:	inc     _i
	jmp     L001E
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1403
L0020:	lda     #$00
	sta     _j
L0021:	lda     _j
	cmp     #$04
	bcs     L000C
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1404
	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1405
	lda     #$00
	sta     _i
L0022:	lda     _i
	cmp     #$04
	bcs     L0010
;
; bitCalc(i,j) ;
;
	.dbg	line, "quarto.c", 1406
	jsr     pusha
	lda     _j
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1405
	inc     _i
	jmp     L0022
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1420
L0010:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L000D
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1421
	ldx     #$00
	rts
;
; for( j = 0; j < 4; j++ ){
;
	.dbg	line, "quarto.c", 1403
L000D:	inc     _j
	jmp     L0021
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1426
L000C:	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1427
	lda     #$00
	sta     _i
L0023:	lda     _i
	cmp     #$04
	bcs     L0015
;
; bitCalc(i,i) ;
;
	.dbg	line, "quarto.c", 1428
	jsr     pusha
	lda     _i
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1427
	inc     _i
	jmp     L0023
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1430
L0015:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L0018
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1431
	ldx     #$00
	rts
;
; initQuartoFlg() ;
;
	.dbg	line, "quarto.c", 1435
L0018:	jsr     _initQuartoFlg
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1436
	lda     #$00
	sta     _i
L0024:	lda     _i
	cmp     #$04
	bcs     L001A
;
; bitCalc(i,3-i) ;
;
	.dbg	line, "quarto.c", 1437
	jsr     pusha
	lda     #$03
	sec
	sbc     _i
	jsr     _bitCalc
;
; for( i = 0; i < 4; i++ ){
;
	.dbg	line, "quarto.c", 1436
	inc     _i
	jmp     L0024
;
; if( checkLineQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1439
L001A:	jsr     _checkLineQuarto
	cmp     #$01
	bne     L001D
;
; return 1 ;
;
	.dbg	line, "quarto.c", 1440
	ldx     #$00
	rts
;
; return 0 ;
;
	.dbg	line, "quarto.c", 1443
L001D:	ldx     #$00
	txa
;
; }
;
	.dbg	line, "quarto.c", 1444
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ moveKoma (unsigned char src_x, unsigned char src_y, unsigned char dst_x, unsigned char dst_y, unsigned char *meta)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveKoma: near

	.dbg	func, "moveKoma", "00", extern, "_moveKoma"
	.dbg	sym, "src_x", "00", auto, 5
	.dbg	sym, "src_y", "00", auto, 4
	.dbg	sym, "dst_x", "00", auto, 3
	.dbg	sym, "dst_y", "00", auto, 2
	.dbg	sym, "meta", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1447
	jsr     pushax
;
; koma_x[0] = src_x ;
;
	.dbg	line, "quarto.c", 1448
	ldy     #$05
	lda     (sp),y
	sta     _koma_x
;
; koma_y[0] = src_y ;
;
	.dbg	line, "quarto.c", 1449
	dey
	lda     (sp),y
	sta     _koma_y
;
; koma_frame++ ;
;
	.dbg	line, "quarto.c", 1452
L0013:	inc     _koma_frame
;
; if( koma_frame % 5 != 0 ){ continue ; }
;
	.dbg	line, "quarto.c", 1453
	lda     _koma_frame
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	cpx     #$00
	bne     L0013
	cmp     #$00
	bne     L0013
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1455
	sta     _spr
;
; spr = oam_meta_spr( koma_x[0], koma_y[0], spr, meta ) ;
;
	.dbg	line, "quarto.c", 1456
	jsr     decsp3
	lda     _koma_x
	ldy     #$02
	sta     (sp),y
	lda     _koma_y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _oam_meta_spr
	sta     _spr
;
; if( koma_y[0] > dst_y ){ koma_y[0]-=2; }
;
	.dbg	line, "quarto.c", 1458
	lda     _koma_y
	ldy     #$02
	cmp     (sp),y
	bcc     L0014
	beq     L0014
	lda     _koma_y
	sec
	sbc     #$02
	sta     _koma_y
;
; else if( koma_y[0] < dst_y ){ koma_y[0]+=2; }
;
	.dbg	line, "quarto.c", 1459
	jmp     L0017
L0014:	lda     _koma_y
	cmp     (sp),y
	bcs     L0015
	tya
	clc
	adc     _koma_y
	sta     _koma_y
;
; else if( koma_x[0] > dst_x ){ koma_x[0]-=2; }
;
	.dbg	line, "quarto.c", 1460
	jmp     L0017
L0015:	lda     _koma_x
	iny
	cmp     (sp),y
	bcc     L0016
	beq     L0016
	lda     _koma_x
	sec
	sbc     #$02
;
; else if( koma_x[0] < dst_x ){ koma_x[0]+=2; }
;
	.dbg	line, "quarto.c", 1461
	jmp     L0012
L0016:	lda     _koma_x
	cmp     (sp),y
	bcs     L0017
	lda     #$02
	clc
	adc     _koma_x
L0012:	sta     _koma_x
;
; if( koma_x[0] == dst_x && koma_y[0] == dst_y ){ 
;
	.dbg	line, "quarto.c", 1463
L0017:	lda     _koma_x
	ldy     #$03
	cmp     (sp),y
	jne     L0013
	lda     _koma_y
	dey
	cmp     (sp),y
	jne     L0013
;
; x = dst_x ;
;
	.dbg	line, "quarto.c", 1468
	iny
	lda     (sp),y
	sta     _x
;
; y = dst_y ;
;
	.dbg	line, "quarto.c", 1469
	dey
	lda     (sp),y
	sta     _y
;
; ppu_wait_frame();
;
	.dbg	line, "quarto.c", 1470
	jsr     _ppu_wait_frame
;
; }
;
	.dbg	line, "quarto.c", 1471
	jmp     incsp6

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printMsg (unsigned char action)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printMsg: near

	.dbg	func, "printMsg", "00", extern, "_printMsg"
	.dbg	sym, "action", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "quarto.c", 1495
	jsr     pusha
;
; if( action == 0 ){
;
	.dbg	line, "quarto.c", 1496
	ldy     #$00
	lda     (sp),y
	bne     L0014
;
; put_update_debug(1,23, 14, whichTurn!=0?"P1:SELECT NEXT":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1497
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L0003
	lda     #<(S0006)
	ldx     #>(S0006)
	jmp     L0004
L0003:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L0004:	jsr     _put_update_debug
;
; put_update_debug(1,6, 14, whichTurn==0?"P2:SELECT NEXT":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1498
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	jne     L0011
	lda     #<(S0007)
	ldx     #>(S0007)
	jmp     L0012
;
; }else if( action == 1 ){
;
	.dbg	line, "quarto.c", 1500
L0014:	lda     (sp),y
	cmp     #$01
	bne     L0016
;
; put_update_debug(1,23, 14, whichTurn==0?"P1:PLAYING    ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1501
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	bne     L0009
	lda     #<(S0008)
	ldx     #>(S0008)
	jmp     L000A
L0009:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L000A:	jsr     _put_update_debug
;
; put_update_debug(1,6, 14, whichTurn!=0?"P2:PLAYING    ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1502
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L0011
	lda     #<(S0009)
	ldx     #>(S0009)
	jmp     L0012
;
; }else if( action == 2 ){
;
	.dbg	line, "quarto.c", 1504
L0016:	lda     (sp),y
	cmp     #$02
	bne     L000E
;
; put_update_debug(1,23, 14, whichTurn!=0?"P1:WIN!       ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1505
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L000F
	lda     #<(S000A)
	ldx     #>(S000A)
	jmp     L0010
L000F:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L0010:	jsr     _put_update_debug
;
; put_update_debug(1,6, 14, whichTurn==0?"P2:WIN!       ":(const char*)msgBlank );
;
	.dbg	line, "quarto.c", 1506
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	lda     _whichTurn
	bne     L0011
	lda     #<(S000B)
	ldx     #>(S000B)
	jmp     L0012
L0011:	lda     #<(_msgBlank)
	ldx     #>(_msgBlank)
L0012:	jsr     _put_update_debug
;
; }
;
	.dbg	line, "quarto.c", 1509
L000E:	jmp     incsp1

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ printLife (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printLife: near

	.dbg	func, "printLife", "00", extern, "_printLife"

.segment	"CODE"

;
; put_update_debug(26,23, 3, err[1] == 0 ? "   ": err[1] == 1 ?"X  ": err[1] == 2 ?"XX ": "XXX" );
;
	.dbg	line, "quarto.c", 1512
	jsr     decsp3
	lda     #$1A
	ldy     #$02
	sta     (sp),y
	lda     #$17
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _err+1
	bne     L000E
	lda     #<(S000C)
	ldx     #>(S000C)
	jmp     L0007
L000E:	lda     _err+1
	cmp     #$01
	bne     L000F
	lda     #<(S000D)
	ldx     #>(S000D)
	jmp     L0007
L000F:	lda     _err+1
	cmp     #$02
	bne     L0006
	lda     #<(S000E)
	ldx     #>(S000E)
	jmp     L0007
L0006:	lda     #<(S000F)
	ldx     #>(S000F)
L0007:	jsr     _put_update_debug
;
; put_update_debug(26,6, 3, err[0] == 0 ? "   ": err[0] == 1 ?"X  ": err[0] == 2 ?"XX ": "XXX" );
;
	.dbg	line, "quarto.c", 1513
	jsr     decsp3
	lda     #$1A
	ldy     #$02
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _err
	bne     L0010
	lda     #<(S0010)
	ldx     #>(S0010)
	jmp     L000D
L0010:	lda     _err
	cmp     #$01
	bne     L0011
	lda     #<(S0011)
	ldx     #>(S0011)
	jmp     L000D
L0011:	lda     _err
	cmp     #$02
	bne     L000C
	lda     #<(S0012)
	ldx     #>(S0012)
	jmp     L000D
L000C:	lda     #<(S0013)
	ldx     #>(S0013)
L000D:	jmp     _put_update_debug

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ loseAnime (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loseAnime: near

	.dbg	func, "loseAnime", "00", extern, "_loseAnime"

.segment	"CODE"

;
; music_stop() ;
;
	.dbg	line, "quarto.c", 1517
	jsr     _music_stop
;
; delay(30);
;
	.dbg	line, "quarto.c", 1518
	lda     #$1E
	jsr     _delay
;
; reset() ;
;
	.dbg	line, "quarto.c", 1520
	jmp     _reset

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procChooseKoma (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procChooseKoma: near

	.dbg	func, "procChooseKoma", "00", extern, "_procChooseKoma"

.segment	"CODE"

;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1525
	jsr     _printCursor
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 1526
	lda     #$00
	jsr     _printMsg
;
; printLife() ;
;
	.dbg	line, "quarto.c", 1527
	jsr     _printLife
;
; pad=pad_poll(0) ;
;
	.dbg	line, "quarto.c", 1548
L0051:	lda     #$00
L0077:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_LEFT){
;
	.dbg	line, "quarto.c", 1549
	and     #$02
	beq     L005A
;
; ChooseKoma = ChooseKoma <= 0 ? 7 : --ChooseKoma ;
;
	.dbg	line, "quarto.c", 1550
	lda     _ChooseKoma
	bne     L0052
	lda     #$07
	jmp     L0053
L0052:	dec     _ChooseKoma
	lda     _ChooseKoma
L0053:	sta     _ChooseKoma
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1551
	jsr     _printCursor
;
; if( moving == 0 || moving == 2 ){
;
	.dbg	line, "quarto.c", 1552
	lda     _moving
	beq     L0078
	cmp     #$02
	bne     L0058
;
; for( i = 0; i < 25 &&  pad&PAD_LEFT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1554
	lda     #$00
L0078:	sta     _i
L000B:	lda     _i
	cmp     #$19
	bcs     L0059
	lda     _pad
	and     #$02
	beq     L0059
;
; i++ ;
;
	.dbg	line, "quarto.c", 1555
	inc     _i
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1556
	lda     #$01
	jsr     _delay
;
; for( i = 0; i < 25 &&  pad&PAD_LEFT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1554
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L000B
;
; delay(5) ;
;
	.dbg	line, "quarto.c", 1559
L0058:	lda     #$05
	jsr     _delay
;
; moving = 1 ;
;
	.dbg	line, "quarto.c", 1561
L0059:	lda     #$01
	sta     _moving
;
; if(pad&PAD_RIGHT){
;
	.dbg	line, "quarto.c", 1564
L005A:	lda     _pad
	and     #$01
	beq     L0065
;
; ChooseKoma = ChooseKoma >= 7 ? 0 : ++ChooseKoma ;
;
	.dbg	line, "quarto.c", 1565
	lda     _ChooseKoma
	cmp     #$07
	bcc     L005B
	lda     #$00
	jmp     L005C
L005B:	inc     _ChooseKoma
	lda     _ChooseKoma
L005C:	sta     _ChooseKoma
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1566
	jsr     _printCursor
;
; if( moving == 0 || moving == 1 ){
;
	.dbg	line, "quarto.c", 1567
	lda     _moving
	beq     L0079
	cmp     #$01
	bne     L0063
;
; for( i = 0; i < 25 && pad&PAD_RIGHT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1569
	lda     #$00
L0079:	sta     _i
L0019:	lda     _i
	cmp     #$19
	bcs     L0064
	lda     _pad
	and     #$01
	beq     L0064
;
; i++ ;
;
	.dbg	line, "quarto.c", 1570
	inc     _i
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1571
	lda     #$01
	jsr     _delay
;
; for( i = 0; i < 25 && pad&PAD_RIGHT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1569
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0019
;
; delay(5) ;
;
	.dbg	line, "quarto.c", 1574
L0063:	lda     #$05
	jsr     _delay
;
; moving = 2 ;
;
	.dbg	line, "quarto.c", 1576
L0064:	lda     #$02
	sta     _moving
;
; if(pad&PAD_UP){
;
	.dbg	line, "quarto.c", 1579
L0065:	lda     _pad
	and     #$08
	beq     L0066
;
; selBW = 0 ;
;
	.dbg	line, "quarto.c", 1580
	lda     #$00
	sta     _selBW
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1581
	jsr     _printCursor
;
; if(pad&PAD_DOWN){
;
	.dbg	line, "quarto.c", 1583
L0066:	lda     _pad
	and     #$04
	beq     L0067
;
; selBW = 1 ;
;
	.dbg	line, "quarto.c", 1584
	lda     #$01
	sta     _selBW
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1585
	jsr     _printCursor
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 1588
L0067:	lda     _pad
	and     #$80
	jeq     L0072
;
; if( koma_exist[selBW][ChooseKoma] == 0 ){
;
	.dbg	line, "quarto.c", 1589
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	ldx     #$00
	lda     (ptr1),y
	bne     L0068
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 1590
	lda     #$03
	jsr     pusha
	txa
	jsr     _sfx_play
;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1592
L0025:	lda     _pad
	and     #$80
	jeq     L0077
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1593
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1592
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0025
;
; koma_exist[selBW][ChooseKoma] = 0 ;
;
	.dbg	line, "quarto.c", 1598
L0068:	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     #$00
	sta     (ptr1),y
;
; putStockKoma((ChooseKoma*4),selBW==0?0:26, selBW==0?0x00:0xFF,  (unsigned char*)koma_list[0][0][ChooseKoma]) ;
;
	.dbg	line, "quarto.c", 1599
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	beq     L006A
	lda     #$1A
L006A:	dey
	sta     (sp),y
	lda     _selBW
	beq     L006C
	lda     #$FF
L006C:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L004D
	inx
	clc
L004D:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1601
	jsr     _oam_clear
;
; x = ChooseKoma*32 ;
;
	.dbg	line, "quarto.c", 1603
	lda     _ChooseKoma
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _x
;
; y = 10+selBW*180 ;
;
	.dbg	line, "quarto.c", 1604
	lda     _selBW
	jsr     pusha0
	lda     #$B4
	jsr     tosumula0
	clc
	adc     #$0A
	sta     _y
;
; moveKoma( x, y, 24, whichTurn!=0?60:146, (unsigned char*)koma_list[0][selBW==0?1:0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 1605
	jsr     decsp4
	lda     _x
	ldy     #$03
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     #$18
	dey
	sta     (sp),y
	lda     _whichTurn
	beq     L006D
	lda     #$3C
	jmp     L006E
L006D:	lda     #$92
L006E:	dey
	sta     (sp),y
	ldx     #$00
	lda     _selBW
	bne     L006F
	lda     #$01
	jmp     L0031
L006F:	txa
L0031:	jsr     aslax4
	clc
	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L004E
	inx
	clc
L004E:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _moveKoma
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1607
	jsr     _ppu_wait_frame
;
; sfx_play(5,1);
;
	.dbg	line, "quarto.c", 1609
	lda     #$05
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; printMsg(1);
;
	.dbg	line, "quarto.c", 1611
	lda     #$01
	jsr     _printMsg
;
; whichTurn = whichTurn == 0? 1:0 ;
;
	.dbg	line, "quarto.c", 1614
	lda     _whichTurn
	bne     L0070
	lda     #$01
	jmp     L0071
L0070:	lda     #$00
L0071:	sta     _whichTurn
;
; return ;
;
	.dbg	line, "quarto.c", 1616
	rts
;
; if(pad&PAD_SELECT){
;
	.dbg	line, "quarto.c", 1620
L0072:	lda     _pad
	and     #$20
	beq     L0075
;
; bgpl++ ;
;
	.dbg	line, "quarto.c", 1621
	inc     _bgpl
;
; bgpl = bgpl > 3 ? 0 : bgpl ;
;
	.dbg	line, "quarto.c", 1622
	lda     _bgpl
	cmp     #$04
	bcc     L0073
	lda     #$00
	jmp     L0074
L0073:	lda     _bgpl
L0074:	sta     _bgpl
;
; pal_spr((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 1625
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L004F
	inx
	clc
L004F:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; pal_bg((char*)bg_palettes[bgpl]);
;
	.dbg	line, "quarto.c", 1626
	ldx     #$00
	lda     _bgpl
	asl     a
	bcc     L0050
	inx
	clc
L0050:	adc     #<(_bg_palettes)
	sta     ptr1
	txa
	adc     #>(_bg_palettes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1628
L0037:	lda     _pad
	and     #$20
	beq     L0075
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1629
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1628
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0037
;
; if(pad&PAD_START){
;
	.dbg	line, "quarto.c", 1634
L0075:	lda     _pad
	and     #$10
	beq     L003B
;
; if( checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1635
	jsr     _checkQuarto
	cmp     #$01
	bne     L003C
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 1636
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 1637
	rts
;
; sfx_play(3,1);
;
	.dbg	line, "quarto.c", 1639
L003C:	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; err[whichTurn]++ ;
;
	.dbg	line, "quarto.c", 1640
	lda     #<(_err)
	ldx     #>(_err)
	clc
	adc     _whichTurn
	bcc     L003E
	inx
L003E:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; printLife() ;
;
	.dbg	line, "quarto.c", 1641
	jsr     _printLife
;
; if( err[whichTurn] == 3 ){
;
	.dbg	line, "quarto.c", 1642
	ldy     _whichTurn
	lda     _err,y
	cmp     #$03
	bne     L0076
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 1643
	jsr     _loseAnime
;
; for( ; pad&PAD_START ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1647
L0076:	lda     _pad
	and     #$10
	jeq     L0077
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1648
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_START ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1647
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0076
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1653
L003B:	jsr     _ppu_wait_frame
;
; frame++;
;
	.dbg	line, "quarto.c", 1654
	inc     _frame
;
; while(1)
;
	.dbg	line, "quarto.c", 1531
	jmp     L0051

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procMooveKoma (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procMooveKoma: near

	.dbg	func, "procMooveKoma", "00", extern, "_procMooveKoma"

.segment	"CODE"

;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1660
L0002:	lda     _pad
	and     #$80
	beq     L006A
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1661
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1660
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0002
;
; pad=pad_poll(0) ;
;
	.dbg	line, "quarto.c", 1683
L004B:	lda     #$00
L006A:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_LEFT){
;
	.dbg	line, "quarto.c", 1684
	and     #$02
	beq     L004F
;
; if( x > 4 ){
;
	.dbg	line, "quarto.c", 1685
	lda     _x
	cmp     #$05
	bcc     L004F
;
; x-= pad&PAD_B ? 4 : 2 ;
;
	.dbg	line, "quarto.c", 1686
	lda     _pad
	and     #$40
	beq     L004C
	lda     #$04
	jmp     L004E
L004C:	lda     #$02
L004E:	eor     #$FF
	sec
	adc     _x
	sta     _x
;
; if(pad&PAD_RIGHT){
;
	.dbg	line, "quarto.c", 1689
L004F:	lda     _pad
	and     #$01
	beq     L0053
;
; if( x < 232){
;
	.dbg	line, "quarto.c", 1690
	lda     _x
	cmp     #$E8
	bcs     L0053
;
; x+= pad&PAD_B ? 4 : 2 ;
;
	.dbg	line, "quarto.c", 1691
	lda     _pad
	and     #$40
	beq     L0050
	lda     #$04
	jmp     L0052
L0050:	lda     #$02
L0052:	clc
	adc     _x
	sta     _x
;
; if(pad&PAD_UP){
;
	.dbg	line, "quarto.c", 1694
L0053:	lda     _pad
	and     #$08
	beq     L0057
;
; if( y > 4 ){
;
	.dbg	line, "quarto.c", 1695
	lda     _y
	cmp     #$05
	bcc     L0057
;
; y-= pad&PAD_B ? 2 : 1 ;
;
	.dbg	line, "quarto.c", 1696
	lda     _pad
	and     #$40
	beq     L0054
	lda     #$02
	jmp     L0056
L0054:	lda     #$01
L0056:	eor     #$FF
	sec
	adc     _y
	sta     _y
;
; if(pad&PAD_DOWN){
;
	.dbg	line, "quarto.c", 1700
L0057:	lda     _pad
	and     #$04
	beq     L005B
;
; if( y < 212){
;
	.dbg	line, "quarto.c", 1701
	lda     _y
	cmp     #$D4
	bcs     L005B
;
; y+= pad&PAD_B ? 2 : 1 ;
;
	.dbg	line, "quarto.c", 1702
	lda     _pad
	and     #$40
	beq     L0058
	lda     #$02
	jmp     L005A
L0058:	lda     #$01
L005A:	clc
	adc     _y
	sta     _y
;
; if(pad&PAD_A){
;
	.dbg	line, "quarto.c", 1705
L005B:	lda     _pad
	and     #$80
	jeq     L005F
;
; if( checkPutPos(x/8, y/8) == 1 ){
;
	.dbg	line, "quarto.c", 1706
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jsr     _checkPutPos
	cmp     #$01
	bne     L001A
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 1707
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1709
L001B:	lda     _pad
	and     #$80
	jeq     L006A
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1710
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_A ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1709
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L001B
;
; putKoma( x/8, y/8, selBW==0?0xAA:0x55, (unsigned char*)koma_list[0][0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 1716
L001A:	jsr     decsp3
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	ldy     #$02
	sta     (sp),y
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	dey
	sta     (sp),y
	lda     _selBW
	bne     L005C
	lda     #$AA
	jmp     L005D
L005C:	lda     #$55
L005D:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0046
	inx
	clc
L0046:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putKoma
;
; stage_stat[x_index][y_index] = selBW==0 ? koma_type[1+ChooseKoma] : koma_type[1+ChooseKoma+8] ;
;
	.dbg	line, "quarto.c", 1721
	ldx     #$00
	lda     _x_index
	jsr     aslax2
	clc
	adc     #<(_stage_stat)
	tay
	txa
	adc     #>(_stage_stat)
	tax
	tya
	clc
	adc     _y_index
	bcc     L003E
	inx
L003E:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _selBW
	bne     L005E
	lda     _ChooseKoma
	clc
	adc     #$01
	jmp     L0070
L005E:	lda     _ChooseKoma
	clc
	adc     #$01
	bcc     L0047
	inx
	clc
L0047:	adc     #$08
L0070:	bcc     L0025
	inx
L0025:	sta     ptr1
	txa
	clc
	adc     #>(_koma_type)
	sta     ptr1+1
	ldy     #<(_koma_type)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1722
	jsr     _oam_clear
;
; sfx_play(7,1);
;
	.dbg	line, "quarto.c", 1727
	lda     #$07
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 1730
	lda     #$00
	jmp     _printMsg
;
; if(pad&PAD_SELECT){
;
	.dbg	line, "quarto.c", 1736
L005F:	lda     _pad
	and     #$20
	beq     L0066
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1737
	jsr     _oam_clear
;
; printCursor() ;
;
	.dbg	line, "quarto.c", 1744
	jsr     _printCursor
;
; koma_exist[selBW][ChooseKoma] = 1 ;
;
	.dbg	line, "quarto.c", 1746
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	lda     #$01
	sta     (ptr1),y
;
; putStockKoma((ChooseKoma*4),selBW==0?0:26, selBW==0?0xAA:0x55, (unsigned char*)koma_list[0][0][ChooseKoma]) ;
;
	.dbg	line, "quarto.c", 1747
	jsr     decsp3
	lda     _ChooseKoma
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	lda     _selBW
	beq     L0061
	lda     #$1A
L0061:	dey
	sta     (sp),y
	lda     _selBW
	bne     L0062
	lda     #$AA
	jmp     L0063
L0062:	lda     #$55
L0063:	dey
	sta     (sp),y
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L0048
	inx
	clc
L0048:	adc     #<(_koma_list)
	sta     ptr1
	txa
	adc     #>(_koma_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _putStockKoma
;
; whichTurn = whichTurn == 0? 1:0 ;
;
	.dbg	line, "quarto.c", 1748
	lda     _whichTurn
	bne     L0064
	lda     #$01
	jmp     L0065
L0064:	lda     #$00
L0065:	sta     _whichTurn
;
; printMsg(0) ;
;
	.dbg	line, "quarto.c", 1751
	lda     #$00
	jmp     _printMsg
;
; if(pad&PAD_START){
;
	.dbg	line, "quarto.c", 1755
L0066:	lda     _pad
	and     #$10
	beq     L002D
;
; if( checkQuarto() == 1 ){
;
	.dbg	line, "quarto.c", 1756
	jsr     _checkQuarto
	cmp     #$01
	bne     L002E
;
; quarto = 1 ;
;
	.dbg	line, "quarto.c", 1757
	sta     _quarto
;
; return ;
;
	.dbg	line, "quarto.c", 1758
	rts
;
; sfx_play(3,0);
;
	.dbg	line, "quarto.c", 1760
L002E:	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; err[whichTurn]++ ;
;
	.dbg	line, "quarto.c", 1761
	lda     #<(_err)
	ldx     #>(_err)
	clc
	adc     _whichTurn
	bcc     L0030
	inx
L0030:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; printLife() ;
;
	.dbg	line, "quarto.c", 1762
	jsr     _printLife
;
; if( err[whichTurn] == 3 ){
;
	.dbg	line, "quarto.c", 1763
	ldy     _whichTurn
	lda     _err,y
	cmp     #$03
	bne     L0067
;
; loseAnime() ;
;
	.dbg	line, "quarto.c", 1764
	jsr     _loseAnime
;
; for( ; pad&PAD_START ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1767
L0067:	lda     _pad
	and     #$10
	jeq     L006A
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1768
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_START ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1767
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0067
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1773
L002D:	jsr     _oam_clear
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1774
	lda     #$00
	sta     _spr
;
; if( checkPutPos(x/8, y/8) != 1 ){
;
	.dbg	line, "quarto.c", 1775
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha
	lda     _y
	lsr     a
	lsr     a
	lsr     a
	jsr     _checkPutPos
	cmp     #$01
	beq     L0037
;
; spr = oam_meta_spr( set_posx*8+8, set_posy*8+(frame%8)+10, spr, selBW==0?meta_pos1: meta_pos2 ) ;
;
	.dbg	line, "quarto.c", 1776
	jsr     decsp3
	lda     _set_posx
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
	ldy     #$02
	sta     (sp),y
	lda     _set_posy
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     _frame
	and     #$07
	clc
	adc     ptr1
	bcc     L0049
	clc
L0049:	adc     #$0A
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     _selBW
	bne     L003A
	lda     #<(_meta_pos1)
	ldx     #>(_meta_pos1)
	jmp     L003B
L003A:	lda     #<(_meta_pos2)
	ldx     #>(_meta_pos2)
L003B:	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( x, y, spr, koma_list[koma_exist[selBW][ChooseKoma]][selBW==0?1:0][ChooseKoma] ) ;
;
	.dbg	line, "quarto.c", 1778
L0037:	jsr     decsp3
	lda     _x
	ldy     #$02
	sta     (sp),y
	lda     _y
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldx     #$00
	lda     _selBW
	jsr     aslax3
	clc
	adc     #<(_koma_exist)
	sta     ptr1
	txa
	adc     #>(_koma_exist)
	sta     ptr1+1
	ldy     _ChooseKoma
	ldx     #$00
	lda     (ptr1),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_koma_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_koma_list)
	sta     ptr1+1
	ldx     #$00
	lda     _selBW
	bne     L0068
	lda     #$01
	jmp     L003D
L0068:	txa
L003D:	jsr     aslax4
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     _ChooseKoma
	asl     a
	bcc     L004A
	inx
	clc
L004A:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _spr
;
; ppu_wait_frame(); // wait for next TV frame
;
	.dbg	line, "quarto.c", 1780
	jsr     _ppu_wait_frame
;
; frame++;
;
	.dbg	line, "quarto.c", 1781
	inc     _frame
;
; while(1)
;
	.dbg	line, "quarto.c", 1666
	jmp     L004B

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ procCheckQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_procCheckQuarto: near

	.dbg	func, "procCheckQuarto", "00", extern, "_procCheckQuarto"

.segment	"CODE"

;
; if( quarto != 0 ){
;
	.dbg	line, "quarto.c", 1785
	lda     _quarto
	bne     L000C
;
; }
;
	.dbg	line, "quarto.c", 1818
	rts
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 1786
L000C:	jsr     _music_stop
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1787
	jsr     _oam_clear
;
; delay(40) ;
;
	.dbg	line, "quarto.c", 1788
	lda     #$28
	jsr     _delay
;
; bgFlash(8) ;
;
	.dbg	line, "quarto.c", 1789
	lda     #$08
	jsr     _bgFlash
;
; delay(40) ;
;
	.dbg	line, "quarto.c", 1790
	lda     #$28
	jsr     _delay
;
; music_play(0) ;
;
	.dbg	line, "quarto.c", 1791
	lda     #$00
	jsr     _music_play
;
; printMsg(2) ;
;
	.dbg	line, "quarto.c", 1794
	lda     #$02
	jsr     _printMsg
;
; tmp = rand8() ;
;
	.dbg	line, "quarto.c", 1796
	jsr     _rand8
	sta     _tmp
;
; tmp2 = rand8() ;
;
	.dbg	line, "quarto.c", 1797
	jsr     _rand8
	sta     _tmp2
;
; tmp3 = rand8() ;
;
	.dbg	line, "quarto.c", 1798
	jsr     _rand8
	sta     _tmp3
;
; tmp4 = rand8() ;
;
	.dbg	line, "quarto.c", 1799
	jsr     _rand8
	sta     _tmp4
;
; x-=4 ;
;
	.dbg	line, "quarto.c", 1801
L000B:	lda     _x
	sec
	sbc     #$04
	sta     _x
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1802
	lda     #$00
	sta     _spr
;
; spr = oam_meta_spr( x + tmp, 80, spr, meta_quarto) ;
;
	.dbg	line, "quarto.c", 1803
	jsr     decsp3
	lda     _x
	clc
	adc     _tmp
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_quarto)
	ldx     #>(_meta_quarto)
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( x + tmp2, 100, spr, meta_quarto) ;
;
	.dbg	line, "quarto.c", 1804
	jsr     decsp3
	lda     _x
	clc
	adc     _tmp2
	ldy     #$02
	sta     (sp),y
	lda     #$64
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_quarto)
	ldx     #>(_meta_quarto)
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( x + tmp3, 120, spr, meta_quarto) ;
;
	.dbg	line, "quarto.c", 1805
	jsr     decsp3
	lda     _x
	clc
	adc     _tmp3
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_quarto)
	ldx     #>(_meta_quarto)
	jsr     _oam_meta_spr
	sta     _spr
;
; spr = oam_meta_spr( x + tmp4, 140, spr, meta_quarto) ;
;
	.dbg	line, "quarto.c", 1806
	jsr     decsp3
	lda     _x
	clc
	adc     _tmp4
	ldy     #$02
	sta     (sp),y
	lda     #$8C
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	lda     #<(_meta_quarto)
	ldx     #>(_meta_quarto)
	jsr     _oam_meta_spr
	sta     _spr
;
; cycleSprColor() ;
;
	.dbg	line, "quarto.c", 1807
	jsr     _cycleSprColor
;
; delay(2);
;
	.dbg	line, "quarto.c", 1808
	lda     #$02
	jsr     _delay
;
; frame++ ;
;
	.dbg	line, "quarto.c", 1809
	inc     _frame
;
; pad=pad_poll(0);
;
	.dbg	line, "quarto.c", 1811
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if( pad&PAD_START ){
;
	.dbg	line, "quarto.c", 1812
	and     #$10
	jeq     L000B
;
; reset() ;
;
	.dbg	line, "quarto.c", 1813
	jsr     _reset
;
; continue ;
;
	.dbg	line, "quarto.c", 1815
	jmp     L000B

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ initVal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initVal: near

	.dbg	func, "initVal", "00", extern, "_initVal"

.segment	"CODE"

;
; setCount = 6 ;
;
	.dbg	line, "quarto.c", 1823
	lda     #$06
	sta     _setCount
;
; quarto = 0 ;
;
	.dbg	line, "quarto.c", 1824
	lda     #$00
	sta     _quarto
;
; bgpl = 0;
;
	.dbg	line, "quarto.c", 1825
	sta     _bgpl
;
; ChooseKoma = 0;
;
	.dbg	line, "quarto.c", 1826
	sta     _ChooseKoma
;
; whichTurn = 1;
;
	.dbg	line, "quarto.c", 1827
	lda     #$01
	sta     _whichTurn
;
; selBW = 0;
;
	.dbg	line, "quarto.c", 1828
	lda     #$00
	sta     _selBW
;
; koma_pos[0]=3;
;
	.dbg	line, "quarto.c", 1829
	lda     #$03
	sta     _koma_pos
;
; koma_pos[1]=1;
;
	.dbg	line, "quarto.c", 1830
	lda     #$01
	sta     _koma_pos+1
;
; x=0;
;
	.dbg	line, "quarto.c", 1831
	lda     #$00
	sta     _x
;
; y=0;
;
	.dbg	line, "quarto.c", 1832
	sta     _y
;
; koma_x[0] = 72 ;
;
	.dbg	line, "quarto.c", 1833
	lda     #$48
	sta     _koma_x
;
; koma_y[0] = 122 ;
;
	.dbg	line, "quarto.c", 1834
	lda     #$7A
	sta     _koma_y
;
; koma_x[1] = 152 ;
;
	.dbg	line, "quarto.c", 1835
	lda     #$98
	sta     _koma_x+1
;
; koma_y[1] = 122 ;
;
	.dbg	line, "quarto.c", 1836
	lda     #$7A
	sta     _koma_y+1
;
; tmp = 0 ; //collision flag
;
	.dbg	line, "quarto.c", 1840
	lda     #$00
	sta     _tmp
;
; frame = 0 ; //frame counter
;
	.dbg	line, "quarto.c", 1841
	sta     _frame
;
; for( i=0; i < 40; i++ ){
;
	.dbg	line, "quarto.c", 1843
	sta     _i
L0007:	lda     _i
	cmp     #$28
	bcs     L0008
;
; attr_stat[i] = 0x55 ;
;
	.dbg	line, "quarto.c", 1844
	ldy     _i
	lda     #$55
	sta     _attr_stat,y
;
; for( i=0; i < 40; i++ ){
;
	.dbg	line, "quarto.c", 1843
	inc     _i
	jmp     L0007
;
; err[0]=0;
;
	.dbg	line, "quarto.c", 1846
L0008:	lda     #$00
	sta     _err
;
; err[1]=0;
;
	.dbg	line, "quarto.c", 1847
	sta     _err+1
;
; }
;
	.dbg	line, "quarto.c", 1850
	rts

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ voiceQuarto (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_voiceQuarto: near

	.dbg	func, "voiceQuarto", "00", extern, "_voiceQuarto"

.segment	"CODE"

;
; music_play(2) ;
;
	.dbg	line, "quarto.c", 1856
	lda     #$02
	jsr     _music_play
;
; delay(60) ;
;
	.dbg	line, "quarto.c", 1857
	lda     #$3C
	jsr     _delay
;
; music_stop() ;
;
	.dbg	line, "quarto.c", 1858
	jmp     _music_stop

	.dbg	line
.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; initVal() ;
;
	.dbg	line, "quarto.c", 1945
	jsr     _initVal
;
; pal_spr((char*)palette2);
;
	.dbg	line, "quarto.c", 1948
	lda     #<(_palette2)
	ldx     #>(_palette2)
	jsr     _pal_spr
;
; pal_bg((char*)open_palette1);//set background palette from an array
;
	.dbg	line, "quarto.c", 1949
	lda     #<(_open_palette1)
	ldx     #>(_open_palette1)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1951
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)open_name);
;
	.dbg	line, "quarto.c", 1952
	lda     #<(_open_name)
	ldx     #>(_open_name)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1953
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0x00, 0x0180);
;
	.dbg	line, "quarto.c", 1954
	lda     #$00
	jsr     pusha
	ldx     #$01
	lda     #$80
	jsr     _vram_fill
;
; spr = 0 ;
;
	.dbg	line, "quarto.c", 1955
	lda     #$00
	sta     _spr
;
; pal_bright(0);
;
	.dbg	line, "quarto.c", 1957
	jsr     _pal_bright
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 1958
	jsr     _ppu_on_all
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1959
	lda     #$14
	jsr     _delay
;
; bgUp() ;
;
	.dbg	line, "quarto.c", 1961
	jsr     _bgUp
;
; delay(20) ;
;
	.dbg	line, "quarto.c", 1963
	lda     #$14
	jsr     _delay
;
; tmp = 0 ;
;
	.dbg	line, "quarto.c", 1964
	lda     #$00
	sta     _tmp
;
; if(frame%20==0){ move_next(); };
;
	.dbg	line, "quarto.c", 1967
L0017:	lda     _frame
	jsr     pusha0
	lda     #$14
	jsr     tosumoda0
	cpx     #$00
	bne     L0005
	cmp     #$00
	bne     L0005
	jsr     _move_next
;
; frame++;
;
	.dbg	line, "quarto.c", 1969
L0005:	inc     _frame
;
; if( checkForceBreak() ){ break ; }
;
	.dbg	line, "quarto.c", 1971
	jsr     _checkForceBreak
	tax
	beq     L0017
;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 1975
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_SELECT ){
;
	.dbg	line, "quarto.c", 1976
	and     #$20
	beq     L001A
;
; ppu_off() ;
;
	.dbg	line, "quarto.c", 1978
	jsr     _ppu_off
;
; bank_bg(1);
;
	.dbg	line, "quarto.c", 1979
	lda     #$01
	jsr     _bank_bg
;
; oam_clear() ;
;
	.dbg	line, "quarto.c", 1980
	jsr     _oam_clear
;
; vram_adr(NAMETABLE_A);//set VRAM address
;
	.dbg	line, "quarto.c", 1981
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle((unsigned char*)qr);
;
	.dbg	line, "quarto.c", 1982
	lda     #<(_qr)
	ldx     #>(_qr)
	jsr     _vram_unrle
;
; ppu_on_all();//enable rendering
;
	.dbg	line, "quarto.c", 1983
	jsr     _ppu_on_all
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1986
L0009:	lda     _pad
	and     #$20
	beq     L0019
;
; delay(1) ;
;
	.dbg	line, "quarto.c", 1987
	lda     #$01
	jsr     _delay
;
; for( ; pad&PAD_SELECT ;pad=pad_poll(0) ){
;
	.dbg	line, "quarto.c", 1986
	lda     #$00
	jsr     _pad_poll
	sta     _pad
	jmp     L0009
;
; pad = pad_poll(0);
;
	.dbg	line, "quarto.c", 1993
L0010:	lda     #$00
L0019:	jsr     _pad_poll
	sta     _pad
;
; if(pad&PAD_SELECT ){
;
	.dbg	line, "quarto.c", 1994
	and     #$20
	beq     L0019
;
; bank_bg(0);
;
	.dbg	line, "quarto.c", 1995
	lda     #$00
	jsr     _bank_bg
;
; reset() ;
;
	.dbg	line, "quarto.c", 1996
	jsr     _reset
;
; while(1){
;
	.dbg	line, "quarto.c", 1992
	jmp     L0010
;
; delay(10) ;
;
	.dbg	line, "quarto.c", 2001
L001A:	lda     #$0A
	jsr     _delay
;
; reset() ;
;
	.dbg	line, "quarto.c", 2013
L0014:	jsr     _reset
;
; while(1){
;
	.dbg	line, "quarto.c", 2012
	jmp     L0014

	.dbg	line
.endproc

